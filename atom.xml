<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lirawx.| Blog</title>
  <icon>https://www.gravatar.com/avatar/8ff03d0dbc8284c5dc433ed57c9ec31c</icon>
  <subtitle>Life is short, let it be undefined;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lirawx.me/"/>
  <updated>2018-03-18T13:14:48.530Z</updated>
  <id>https://lirawx.me/</id>
  
  <author>
    <name>lirawx</name>
    <email>i#lirawx.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack 4 基本配置</title>
    <link href="https://lirawx.me/2018/03/2018-03-16.html"/>
    <id>https://lirawx.me/2018/03/2018-03-16.html</id>
    <published>2018-03-16T10:01:22.000Z</published>
    <updated>2018-03-18T13:14:48.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="入口-entry"><a href="#入口-entry" class="headerlink" title="入口(entry)"></a>入口(entry)</h3><p>webpack.config.js</p><p>可以通过在 webpack 配置中配置 entry 属性，来指定一个入口起点（或多个入口起点）<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="输出-output"><a href="#输出-output" class="headerlink" title="输出(output)"></a>输出(output)</h3><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。你可以通过在配置中指定一个 output 字段，来配置这些处理过程</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p><p>test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。<br>use 属性，表示进行转换时，应该使用哪个 loader。</p><ul><li>.css 文件</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// css 加载 先加载css-loader ,之后sytle-loader 插入html.</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line"><span class="comment">// test: /\.less$/,</span></span><br><span class="line"><span class="comment">// test: /\.scss$/,</span></span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"style-loader"</span>&#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"css-loader"</span>&#125;,</span><br><span class="line"><span class="comment">// &#123; loader: "less-loader"&#125;,</span></span><br><span class="line"><span class="comment">// &#123; loader: "less-loader"&#125;,</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li>.js 文件 ，一般要es6 转 es5</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 转码</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">'@babel/preset-react'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li>.png | .gif 等图片处理</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片加载</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"file-loader"</span>,</span><br><span class="line">            options: &#123;&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h3><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p><p>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。</p><p><strong>常用插件</strong></p><ul><li>ExtractTextWebpackPlugin</li></ul><p>它会将所有的入口 chunk(entry chunks)中引用的 *.css，移动到独立分离的 CSS 文件。因此，你的样式将不再内嵌到 JS bundle 中，而是会放到一个单独的 CSS 文件（即 styles.css）当中。 如果你的样式文件大小较大，这会做更快提前加载，因为 CSS bundle 会跟 JS bundle 并行加载。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">          use: <span class="string">"css-loader"</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"styles.css"</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>开发环境建议不要拆分css文件，热更新不会生效。</p></blockquote><ul><li>HtmlWebpackPlugin<br>该插件将为你生成一个HTML5文件，其中包括使用script标签的body中的所有webpack包。 只需添加插件到你的webpack配置如下：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webpackConfig = &#123;</span><br><span class="line">  entry: <span class="string">'index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'index_bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin()]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://doc.webpack-china.org/concepts/" target="_blank" rel="noopener">webpack 官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; title=&quot;核心概念&quot;&gt;&lt;/a&gt;核心概念&lt;/h2&gt;&lt;h3 id=&quot;入口-entry&quot;&gt;&lt;a href=&quot;#入口-entry&quot; class=&quot;headerlink&quot; title=&quot;入
      
    
    </summary>
    
    
      <category term="js" scheme="https://lirawx.me/tags/js/"/>
    
      <category term="webpack" scheme="https://lirawx.me/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>手写一个redux</title>
    <link href="https://lirawx.me/2018/02/2018-02-25-%E6%89%8B%E5%86%99redux.html"/>
    <id>https://lirawx.me/2018/02/2018-02-25-手写redux.html</id>
    <published>2018-02-25T10:01:22.000Z</published>
    <updated>2018-03-18T13:14:48.530Z</updated>
    
    <content type="html"><![CDATA[<p>首先需要讲一些概念。</p><ul><li>纯函数</li></ul><blockquote><p>一个函数的返回结果只依赖于它的参数，并且在执行过程里面没有副作用，我们就把这个函数叫做纯函数。<br>特点: </p><ol><li>函数的返回结果只依赖于它的参数。</li><li>函数执行过程里面没有副作用。</li></ol></blockquote><ul><li>React.js 特性 —— context</li></ul><blockquote><p>组件间 共享状态 属性<br>只能传入子组件<br>父组件不能读取该属性</p></blockquote><ul><li>高阶组件</li></ul><blockquote><p>高阶组件是一个函数（而不是组件），它接受一个组件作为参数，返回一个新的组件</p></blockquote><ul><li>共享结构的对象</li></ul><blockquote><p>就是类似把 obj 所有的属性都复制到 obj2 里面，相当于对象的浅复制，obj 里面的内容和 obj2 是完全一样的，但是却是两个不同的对象。除了浅复制对象，还可以覆盖、拓展对象属性<br>例：  <figure class="highlight plain"><figcaption><span>obj </span></figcaption><table><tr><td class="code"><pre><span class="line">const obj2 = &#123; ...obj, b: 3, c: 4&#125; // =&gt; &#123; a: 1, b: 3, c: 4 &#125;，覆盖了 b，新增了 c</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在一个正常的 react app中需要 组件 也需要组件间交互的数据的store。在这个app中我们用provider 容器包裹 组件，用context 中包围store, 在组件间共享。每个组件都做纯组件化，不包含逻辑，只根据props 渲染。 这就是redux 的设计模式。</p><p>套路就是</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定一个 reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span> (<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 初始化 state 和 switch case */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听数据变化重新渲染页面</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> renderApp(store.getState()))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次渲染页面</span></span><br><span class="line">renderApp(store.getState()) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 后面可以随意 dispatch 了，页面自动更新</span></span><br><span class="line">store.dispatch(...)</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件就不多说了，主要 Smart 组件 vs Dumb 组件。</p><p>Dumb 组件 不包含所有逻辑<br>Smart 组件包含逻辑和从context 中获取相应的数据</p><h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><p>它接受的参数叫 reducer，reducer 是一个函数, 而且是纯函数（Pure Function）<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span> (<span class="params">reducer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> state = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> listeners = []</span><br><span class="line">  <span class="comment">// 观察着模式 发布和订阅</span></span><br><span class="line">  <span class="comment">// 根据数据是否更新重新渲染相应的足迹</span></span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> listeners.push(listener)</span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    state = reducer(state, action)</span><br><span class="line">    listeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> listener())</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch(&#123;&#125;) <span class="comment">// 初始化 state</span></span><br><span class="line">  <span class="keyword">return</span> &#123; getState, dispatch, subscribe &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h2><p>reducer接受两个参数，一个是 state，一个是 action。<br>如果没有传入 state 或者 state 是 null，那么它就会返回一个初始化的数据。如果有传入 state 的话，就会根据 action 来“修改“数据，但其实它没有、也规定不能修改 state，而是要通过上节所说的把修改路径的对象都复制一遍，然后产生一个新的对象返回。如果它不能识别你的 action，它就不会产生新的数据，而是（在 default 内部）把 state 原封不动地返回。</p><blockquote><p>reducer 是不允许有副作用的。你不能在里面操作 DOM，也不能发 Ajax 请求，更不能直接修改 state，它要做的仅仅是 —— 初始化和计算新的 state。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">themeReducer</span> (<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!state) <span class="keyword">return</span> &#123;</span><br><span class="line">    themeName: <span class="string">'Red Theme'</span>,</span><br><span class="line">    themeColor: <span class="string">'red'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPATE_THEME_NAME'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">themeName</span>: action.themeName &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPATE_THEME_COLOR'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">themeColor</span>: action.themeColor &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(themeReducer)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="https://github.com/lirawx/Crazy_FED/tree/master/react/make-react-redux" target="_blank" rel="noopener">Github</a><br>部分代码<br>react-redux.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> connect = <span class="function">(<span class="params">mapStateToProps, mapDispatchToProps</span>) =&gt;</span> (WrappedComponent) =&gt; &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Connect</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">      store: PropTypes.object</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">      <span class="keyword">super</span>()</span><br><span class="line">      <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        allProps: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount () &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context</span><br><span class="line">      <span class="keyword">this</span>._updateProps()</span><br><span class="line">      store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>._updateProps())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _updateProps () &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context</span><br><span class="line">      <span class="keyword">let</span> stateProps = mapStateToProps</span><br><span class="line">        ? mapStateToProps(store.getState(), <span class="keyword">this</span>.props)</span><br><span class="line">        : &#123;&#125; <span class="comment">// 防止 mapStateToProps 没有传入</span></span><br><span class="line">      <span class="keyword">let</span> dispatchProps = mapDispatchToProps</span><br><span class="line">        ? mapDispatchToProps(store.dispatch, <span class="keyword">this</span>.props)</span><br><span class="line">        : &#123;&#125; <span class="comment">// 防止 mapDispatchToProps 没有传入</span></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        allProps: &#123;</span><br><span class="line">          ...stateProps,</span><br><span class="line">          ...dispatchProps,</span><br><span class="line">          ...this.props</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.state.allProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  return Connect</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export class Provider extends Component &#123;</span></span><br><span class="line"><span class="xml">  static propTypes = &#123;</span></span><br><span class="line"><span class="xml">    store: PropTypes.object,</span></span><br><span class="line"><span class="xml">    children: PropTypes.any</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  static childContextTypes = &#123;</span></span><br><span class="line"><span class="xml">    store: PropTypes.object</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  getChildContext () &#123;</span></span><br><span class="line"><span class="xml">    return &#123;</span></span><br><span class="line"><span class="xml">      store: this.props.store</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  render () &#123;</span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    )</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./Header'</span></span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">'./Content'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'./react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span> (<span class="params">reducer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> state = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> listeners = []</span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> listeners.push(listener)</span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    state = reducer(state, action)</span><br><span class="line">    listeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> listener())</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch(&#123;&#125;) <span class="comment">// 初始化 state</span></span><br><span class="line">  <span class="keyword">return</span> &#123; getState, dispatch, subscribe &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> themeReducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!state) <span class="keyword">return</span> &#123;</span><br><span class="line">    themeColor: <span class="string">'red'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'CHANGE_COLOR'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">themeColor</span>: action.themeColor &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(themeReducer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 Index 里面所有关于 context 的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &lt;Content /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 把 Provider 作为组件树的根节点</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Index /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>参考资料</p><ul><li><a href="https://github.com/huzidaha/react-naive-book" target="_blank" rel="noopener">开源、免费、专业、简单的 React.js 在线教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先需要讲一些概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纯函数&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;一个函数的返回结果只依赖于它的参数，并且在执行过程里面没有副作用，我们就把这个函数叫做纯函数。&lt;br&gt;特点: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数的返回结果只依赖于它的
      
    
    </summary>
    
    
      <category term="js" scheme="https://lirawx.me/tags/js/"/>
    
      <category term="react" scheme="https://lirawx.me/tags/react/"/>
    
      <category term="redux" scheme="https://lirawx.me/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>ueditor java web的使用</title>
    <link href="https://lirawx.me/2018/01/ueditor.html"/>
    <id>https://lirawx.me/2018/01/ueditor.html</id>
    <published>2018-01-29T10:01:22.000Z</published>
    <updated>2018-03-18T13:14:48.530Z</updated>
    
    <content type="html"><![CDATA[<p>ueditor 可以下载生产环境打包版本也可以自己手动编译，ueditor 运用grunt打包。</p><p>ueditor 文档地址 <a href="http://fex.baidu.com/ueditor/#dev-bale_width_grunt" target="_blank" rel="noopener">➡️</a></p><p>ueditor github 地址 <a href="https://github.com/fex-team/ueditor" target="_blank" rel="noopener">➡️</a></p><p>当然还有一个umeditor , 它是ueditor 的简洁版 , <a href="https://github.com/fex-team/umeditor/releases" target="_blank" rel="noopener">github 仓库</a></p><p>下面讲一下java 中ueditor 的使用。</p><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://i.loli.net/2018/01/29/5a6f35d06f7d6.png" alt="75D41BAA-413F-4F9C-938C-54C9C4082907"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>首先你必须有一个简单的java web 项目，我这边是一个maven web 项目，简单讲一下配置.</p><p>ueditor 用到了5个jar 包，其中json.jar ,ueditor-1.1.2.jar 包maven 仓库没有，你需要加入本地包，请看<a href="https://lirawx.me/2018/01/29/2018/01/2018-01-29/">maven如何加入本地包</a>,剩下来的就是pom.xml加入需要的jar包。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="java-配置"><a href="#java-配置" class="headerlink" title="java 配置"></a>java 配置</h2><p>解压或者打包变异出来的ueditor 的dist 文件夹中，有一个jsp文件夹，其中一个<code>controller.jsp</code> 还有一个<code>config.json</code> 文件。这是主要的文件上传，图片插入等功能的controller 层和配置文件。</p><p>当配置好文件和目录结构时，需要重新配置url前缀。具体<code>config.json</code> 文件中</p><ul><li>图片上传：imagePathFormat、imageUrlPrefix</li><li>涂鸦上传：scrawlPathFormat、scrawlUrlPrefix</li><li>截屏上传：snapscreenPathFormat、snapscreenUrlPrefix</li><li>附件上传：filePathFormat、fileUrlPrefix</li><li>视频上传：videoPathFormat、videoUrlPrefix</li></ul><p>例子:</p><p>网站根目录是：”D://apache/www/“ 配置项 imagePathFormat 的值为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imagePathFormat = &quot;/ueditor/php/upload/image/&#123;yyyy&#125;-&#123;mm&#125;-&#123;dd&#125;_&#123;rand:6&#125;_&#123;filename&#125;&quot;</span><br></pre></td></tr></table></figure><p> 上传的文件名可能是这样：”2014-06-13_712623_照片.jpg” 存放的路径是：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D://apache/www/ueditor/php/upload/image</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p> 当easyui 和ueditor 一起使用时，ueditor 的弹框会到easyui dialog 的后面，懂前端的人都知道这是z-index 的问题。<br> 所以需要修改ueditor的z-index 值。<br> 需要修改2处:</p><p> 第一处:</p><p> ueditor.css</p> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* 弹出菜单 */</span></span><br><span class="line"><span class="selector-class">.edui-default</span> <span class="selector-class">.edui-popup</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9800</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">width</span>:auto;</span><br><span class="line">    <span class="attribute">height</span>:auto;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ueditor.config.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">zIndex : <span class="number">9800</span>     <span class="comment">//编辑器层级的基数,默认是900</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ueditor 可以下载生产环境打包版本也可以自己手动编译，ueditor 运用grunt打包。&lt;/p&gt;
&lt;p&gt;ueditor 文档地址 &lt;a href=&quot;http://fex.baidu.com/ueditor/#dev-bale_width_grunt&quot; target=
      
    
    </summary>
    
    
      <category term="java ueditor" scheme="https://lirawx.me/tags/java-ueditor/"/>
    
  </entry>
  
  <entry>
    <title>maven 使用本地jar 包</title>
    <link href="https://lirawx.me/2018/01/2018-01-29.html"/>
    <id>https://lirawx.me/2018/01/2018-01-29.html</id>
    <published>2018-01-29T10:01:22.000Z</published>
    <updated>2018-03-18T13:14:48.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入本地jar包"><a href="#引入本地jar包" class="headerlink" title="引入本地jar包"></a>引入本地jar包</h2><ul><li>将本地Jar包安装到本地仓库，再按常规方式引用</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=libs\tools.jar -DgroupId=com.sun -DartifactId=tools -Dversion=1.5.0 -Dpackaging=jar -DgeneratePom=<span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>直接添加本地依赖</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>C:/java/jdk/lib/tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编译时配置额外的依赖包路径"><a href="#编译时配置额外的依赖包路径" class="headerlink" title="编译时配置额外的依赖包路径"></a>编译时配置额外的依赖包路径</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">extdirs</span>&gt;</span>src\main\webapp\WEB-INF\lib<span class="tag">&lt;/<span class="name">extdirs</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="将额外的本地依赖文件打到war包中"><a href="#将额外的本地依赖文件打到war包中" class="headerlink" title="将额外的本地依赖文件打到war包中"></a>将额外的本地依赖文件打到war包中</h2><pre><code class="xml"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>            　　　　　　 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span>            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>                <span class="tag">&lt;<span class="name">warName</span>&gt;</span>${project.artifactId}<span class="tag">&lt;/<span class="name">warName</span>&gt;</span>                <span class="tag">&lt;<span class="name">webResources</span>&gt;</span>                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span>                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span>                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>WEB-INF/lib<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span>                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span>                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span>                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span>                <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span>            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引入本地jar包&quot;&gt;&lt;a href=&quot;#引入本地jar包&quot; class=&quot;headerlink&quot; title=&quot;引入本地jar包&quot;&gt;&lt;/a&gt;引入本地jar包&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将本地Jar包安装到本地仓库，再按常规方式引用&lt;/li&gt;
&lt;/ul&gt;
&lt;figu
      
    
    </summary>
    
    
      <category term="maven jar" scheme="https://lirawx.me/tags/maven-jar/"/>
    
  </entry>
  
  <entry>
    <title>2017年终总结</title>
    <link href="https://lirawx.me/2017/12/2017-2018.html"/>
    <id>https://lirawx.me/2017/12/2017-2018.html</id>
    <published>2018-01-02T00:27:15.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>2017年已经接近尾声，今年是离开学校的第一年，也是开始工作的第一年，从象牙塔到社会大熔炉，是结束也是开始，今年的目标很没有志气，只是希望安稳的开始工作，掌握应有的技术知识，可以工作稳定下来，甚至可以说活下来。目标很低，但是我很知足，生活还是可以安逸和祥和。<br><a id="more"></a><br>今年学习很快，学了很多，真正用的很少，spring,springmvc,mybatis,shiro,redis,等后端的基本已经很熟练，编码基本都是那样，严格按照google java 编程风格，同时，熟悉maven 工程管理项目，maven + spring + springmvc + mybatis 等普通java web 项目的搭建，同时在java开发中，一些基本的应用，例如spring文件上传，整合阿里短信平台，七牛云存储等。。逐步搭建了相应的框架实现相应的功能，在视图方面，熟悉了Thymeleaf, Velocity等模版引擎的应用，当然，学习主要是应用。下面讲项目：</p><ol><li>企业信息库<br>搭建该项目的技术结构，同时负责用户订单模块，包括了订单下单，订单结算，订单的查询，后台管理订单的增删改查，发货，再次发货等功能。</li><li>邀请函系统<br>主要是解决现有系统的bug，同时增加相应的公共。重写了邀请函附件上传功能，增加多个文件上传，统一预览功能。增加了受理后自动盖上公章的功能，主要是imageio类的应用。实现条形码的实现，运用google zXing 工具包。当然还有一些其他功能的修正，如重新注册，一些显示问题等。</li><li>境外投资<br>前端要用easyui做，所以需要修改一下接口。前端页面手写bootstrap 搭建。等等。</li></ol><p>以上是今年主要完成的工作，同时明年应当有所计划，现阶段，后端java 基本开发逻辑已经很清楚了，技术感觉略处于饱和，时代的潮流，后端已经开始剥离一些功能，转入前端，后端只需要开放相应的接口，所以2018年应当把工作重心放到前端上，尤其是一些框架，vue react等前端框架，同时拥抱es6,es7 javascript技术，构建自有的前端技术栈，同时java 后端采用spring boot 快速开发，开放相应的api，数据库可以用mycat 实现读写分离，在服务器架构上可以用docker实现一台ecs 多个项目共存，互不影响。同时可以应用nodejs处理高并发的请求，实现全栈技术的实际应用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年已经接近尾声，今年是离开学校的第一年，也是开始工作的第一年，从象牙塔到社会大熔炉，是结束也是开始，今年的目标很没有志气，只是希望安稳的开始工作，掌握应有的技术知识，可以工作稳定下来，甚至可以说活下来。目标很低，但是我很知足，生活还是可以安逸和祥和。&lt;br&gt;
    
    </summary>
    
    
      <category term="年终总结" scheme="https://lirawx.me/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>docker容器简单总结</title>
    <link href="https://lirawx.me/2017/12/docker.html"/>
    <id>https://lirawx.me/2017/12/docker.html</id>
    <published>2017-12-31T04:37:33.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>docker 现代化服务端部署运行环境的解决方案，避免了很多程序兼容性的问题，所以值得每个软件开发人<br>掌握，一下是我自己学习之后稍微的整理出的知识点。<br><a id="more"></a></p><h2 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h2><p>容器技术是docker 的核心和基础。核心知识主要回答有关容器 what, why 和 how 三方面的问题。 其中以 how 为重，将展开讨论架构、镜像、容器、网络和存储。<br>进阶知识包括将容器真正用于生产所必需的技术，包括多主机管理、跨主机网络、监控、数据管理、日志管理和安全管理。 大家有兴趣深入docker，可以去看看<br><a href="https://item.jd.com/16936307278.html" target="_blank" rel="noopener">《每天5分钟玩转Docker容器技术》</a>这本书。</p><h2 id="容器平台技术"><a href="#容器平台技术" class="headerlink" title="容器平台技术"></a>容器平台技术</h2><p>“容器平台技术”包括容器编排引擎、容器管理平台和基于容器的 PaaS。容器平台技术在生态环境中占据着举足轻重的位置，对于容器是否能够落地，是否能应用于生产至关重要。</p><h2 id="容器核心技术"><a href="#容器核心技术" class="headerlink" title="容器核心技术"></a>容器核心技术</h2><p>一想到容器就想到docker，docker因为构建了完整的容器生态系统，所以他成功了。</p><table><tbody><br>    <tr><br>        <th rowspan="7">容器核心技术</th><br>    </tr><br>    <tr><br>        <td>容器规范</td><br>    </tr><br>    <tr><br>        <td>容器runtime</td><br>    </tr><br>    <tr><br>        <td>容器管理工具</td><br>    </tr><br>    <tr><br>        <td>容器定义工具</td><br>    </tr><br>    <tr><br>        <td>Registries</td><br>    </tr><br>    <tr><br>        <td>容器OS</td><br>    </tr><br></tbody></table> <blockquote><p>容器规范(OCI) ，不同的组织和厂商开发的容器能够在不同的runtime中运行。</p></blockquote><blockquote><p>容器 runtime，需要跟操作系统kernel紧密结合，java 程序类似容器，jvm 类似runtime。jvm 为java 程序提供运行环境。所以容器只能在runtime 中运行。lxc、runc 和 rkt 是目前主流的三种容器 runtime。</p></blockquote><blockquote><p>容器管理工具 容器管理工具对内与 runtime 交互，对外为用户提供 interface。runc 的管理工具是 docker engine。docker engine 包含后台 deamon 和 cli 两个部分。我们通常提到 Docker，一般就是指的 docker engine。</p></blockquote><blockquote><p>容器定义工具，容器定义工具允许用户定义容器的内容和属性，这样容器就能够被保存，共享和重建。docker image 是 docker 容器的模板，runtime 依据 docker image 创建容器。<br>dockerfile 是包含若干命令的文本文件，可以通过这些命令创建出 docker image。<br>ACI (App Container Image) 与 docker image 类似，只不过它是由 CoreOS 开发的 rkt 容器的 image 格式。</p></blockquote><blockquote><p>Registry，容器是通过 image 创建的，需要有一个仓库来统一存放 image，这个仓库就叫做 Registry。</p></blockquote><blockquote><p>容器 OS ，容器 OS 是专门运行容器的操作系统。与常规 OS 相比，容器 OS 通常体积更小，启动更快。因为是为容器定制的 OS，通常它们运行容器的效率会更高。</p></blockquote><p>以上是一些简单的技术名词介绍，方便大家理解容器，下面讲怎么样应用docker.</p><h2 id="容器的优势"><a href="#容器的优势" class="headerlink" title="容器的优势"></a>容器的优势</h2><h3 id="对于开发人员"><a href="#对于开发人员" class="headerlink" title="对于开发人员"></a>对于开发人员</h3><ul><li>Build Once, Run Anywhere容器意味着环境隔离和可重复性。开发人员只需为应用创建一次运行环境，然后打包成容器便可在其他机器上运行。另外，容器环境与所在的 Host 环境是隔离的，就像虚拟机一样，但更快更简单。</li></ul><h3 id="对于运维人员"><a href="#对于运维人员" class="headerlink" title="对于运维人员"></a>对于运维人员</h3><ul><li>Configure Once, Run Anything只需要配置好标准的 runtime 环境，服务器就可以运行任何容器。这使得运维人员的工作变得更高效，一致和可重复。容器消除了开发、测试、生产环境的不一致性。</li></ul><h2 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h2><p><img src="https://i.loli.net/2017/12/31/5a4872f9530be.png" alt=""></p><h2 id="Docker-客户端"><a href="#Docker-客户端" class="headerlink" title="Docker 客户端"></a>Docker 客户端</h2><p>最常用的 Docker 客户端是 docker 命令。通过 docker 我们可以方便地在 Host 上构建和运行容器。</p><h2 id="Docker-服务器"><a href="#Docker-服务器" class="headerlink" title="Docker 服务器"></a>Docker 服务器</h2><p>Docker daemon 是服务器组件，以 Linux 后台服务的方式运行。<br>可以查看运行情况<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status docker.service</span><br></pre></td></tr></table></figure></p><h2 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h2><p>可将 Docker 镜像看成只读模板，通过它可以创建 Docker 容器。例如某个镜像可能包含一个 Ubuntu 操作系统、一个 Apache HTTP Server 以及用户开发的 Web 应用。<br>镜像有多种生成方法：</p><ul><li>可以从无到有开始创建镜像</li><li>也可以下载并使用别人创建好的现成的镜像</li><li>还可以在现有镜像上创建新的镜像</li></ul><p>我们可以将镜像的内容和创建步骤描述在一个文本文件中，这个文件被称作 Dockerfile，通过执行 docker build <docker-file> 命令可以构建出 Docker 镜像。</docker-file></p><h2 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h2><p>Docker 容器就是 Docker 镜像的运行实例。</p><p>用户可以通过 CLI（docker）或是 API 启动、停止、移动或删除容器。可以这么认为，对于应用软件，镜像是软件生命周期的构建和打包阶段，而容器则是启动和运行阶段。</p><h2 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h2><p>Registry 是存放 Docker 镜像的仓库，Registry 分私有和公有两种。<br><code>docker pull</code>命令可以从 Registry 下载镜像。 <code>docker run</code>命令则是先下载镜像（如果本地没有），然后再启动容器。</p><h2 id="helloword"><a href="#helloword" class="headerlink" title="helloword"></a>helloword</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下载hello-wrold镜像</span><br><span class="line">docker pull hello-world</span><br><span class="line"></span><br><span class="line">查看</span><br><span class="line"></span><br><span class="line">docker imges hello-world</span><br><span class="line"></span><br><span class="line">运行</span><br><span class="line"></span><br><span class="line">docker run hello-world</span><br><span class="line">&gt; Hello from Docker!</span><br></pre></td></tr></table></figure><p>到此docker就介绍完了。可以去参考一下链接。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://juejin.im/post/5a40aa1a6fb9a0452a3c8ec0" target="_blank" rel="noopener">每天5分钟玩转Docker容器技术（一）</a><br><a href="https://link.juejin.im/?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5a43037b5188252bca05239a" target="_blank" rel="noopener">每天5分钟玩转Docker容器技术（二）</a><br><a href="https://juejin.im/post/5a44531e518825455f2f9390" target="_blank" rel="noopener">每天5分钟玩转Docker容器技术（三）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker 现代化服务端部署运行环境的解决方案，避免了很多程序兼容性的问题，所以值得每个软件开发人&lt;br&gt;掌握，一下是我自己学习之后稍微的整理出的知识点。&lt;br&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://lirawx.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>常用设计模式总结</title>
    <link href="https://lirawx.me/2017/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://lirawx.me/2017/12/设计模式.html</id>
    <published>2017-12-22T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.530Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">设计模式</th></tr></thead><tbody><tr><td style="text-align:center">工厂模式</td></tr><tr><td style="text-align:center">抽象工厂模式</td></tr><tr><td style="text-align:center">代理模式</td></tr><tr><td style="text-align:center">单例模式</td></tr><tr><td style="text-align:center">策略模式</td></tr><tr><td style="text-align:center">原型模式</td></tr><tr><td style="text-align:center">模板模式</td></tr></tbody></table><a id="more"></a><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul><li><p>简介 ：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p></li><li><p>优点：</p></li></ul><p>1、一个调用者想创建一个对象，只要知道其名称就可以了。</p><p>2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</p><p>3、屏蔽产品的具体实现，调用者只关心产品的接口。</p><ul><li>缺点：</li></ul><p>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p><ul><li>使用场景：</li></ul><p>1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。</p><p>2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。</p><p>3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</p><p>简单实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//使用 getShape 方法获取形状类型的对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(shapeType == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"RECTANGLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>利用反射实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getClass</span><span class="params">(Class&lt;?extends Shape&gt; clazz)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = Class.forName(clazz.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Rectangle rect = (Rectangle) ShapeFactory.getClass(Rectangle.class);</span><br><span class="line">rect.draw();</span><br><span class="line">Square square = (Square) ShapeFactory.getClass(Square.class);</span><br><span class="line">square.draw();</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ul><li>简介</li></ul><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</p><ul><li><p>优点：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p></li><li><p>缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p></li><li><p>使用场景： 1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。</p></li><li><p>实现</p></li></ul><p>抽象工厂函数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> Color <span class="title">getColor</span><span class="params">(String color)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> Shape <span class="title">getShape</span><span class="params">(String shape)</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据参数不同生产不同工厂函数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(shapeType == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"RECTANGLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function">Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function">Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(color == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">"RED"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Red();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">"GREEN"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Green();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">"BLUE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Blue();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ul><li>简介</li></ul><p>为其他对象提供一种代理以控制对这个对象的访问。</p><ul><li>优点：</li></ul><p>1、职责清晰。</p><p>2、高扩展性。</p><p>3、智能化。</p><ul><li>缺点：</li></ul><p>1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</p><p>2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p><ul><li>使用场景：按职责来划分，通常有以下使用场景：</li></ul><p>1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。</p><ul><li>实现</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RealImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">      loadFromDisk(fileName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Displaying "</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Loading "</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(realImage == <span class="keyword">null</span>)&#123;</span><br><span class="line">         realImage = <span class="keyword">new</span> RealImage(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      realImage.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPatternDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Image image = <span class="keyword">new</span> ProxyImage(<span class="string">"test_10mb.jpg"</span>);</span><br><span class="line"></span><br><span class="line">      image.display();</span><br><span class="line">      System.out.println(<span class="string">""</span>);</span><br><span class="line">      image.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul><li>简介</li></ul><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p><ul><li>优点：</li></ul><p>1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</p><p>2、避免对资源的多重占用（比如写文件操作）。</p><ul><li>缺点：</li></ul><p>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><ul><li>使用场景：</li></ul><p>1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</p><ul><li>实现方式</li></ul><p>1.懒汉式：</p><p>是否 Lazy 初始化：是</p><p>是否多线程安全：是</p><p>实现难度：易</p><p>描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。<br>优点：第一次调用才初始化，避免内存浪费。<br>缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。<br>getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>双检锁/双重校验锁（DCL，即 double-checked locking）</li></ul><p>JDK 版本：JDK1.5 起</p><p>是否 Lazy 初始化：是</p><p>是否多线程安全：是</p><p>实现难度：较复杂</p><p>描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br>getInstance() 的性能对应用程序很关键。</p><p>代码实例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>枚举</li></ul><p>JDK 版本：JDK1.5 起</p><p>是否 Lazy 初始化：否</p><p>是否多线程安全：是</p><p>实现难度：易</p><p>描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。<br>这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。<br>不能通过 reflection attack 来调用私有构造方法。</p><p>代码实例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><ul><li>简介</li></ul><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。<br>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。<br>关键就是要实现同一个接口</p><ul><li>优点：</li></ul><p>1、算法可以自由切换。<br>2、避免使用多重条件判断。<br>3、扩展性良好。</p><ul><li>缺点：</li></ul><p>1、策略类会增多。<br>2、所有策略类都需要对外暴露。</p><ul><li>使用场景：</li></ul><p>1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。<br>2、一个系统需要动态地在几种算法中选择一种。<br>3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p><ul><li>实现</li></ul><p>统一接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 + num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>省略了 OperationSubstract  OperationMultiply</p></blockquote><p>容器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeStrategy</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> strategy.doOperation(num1, num2);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationAdd());</span><br><span class="line">      System.out.println(<span class="string">"10 + 5 = "</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">      context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationSubstract());</span><br><span class="line">      System.out.println(<span class="string">"10 - 5 = "</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">      context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationMultiply());</span><br><span class="line">      System.out.println(<span class="string">"10 * 5 = "</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><ul><li>简介</li></ul><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p><ul><li>优点：</li></ul><p>1、性能提高。<br>2、逃避构造函数的约束。</p><ul><li>缺点：</li></ul><p>1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。<br>2、必须实现 Cloneable 接口。<br>3、逃避构造函数的约束。</p><ul><li>使用场景：</li></ul><p>1、资源优化场景。<br>2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。<br>3、性能和安全要求的场景。 4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。<br>5、一个对象多个修改者的场景。 6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。<br>7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过clone的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。</p><ul><li>实现</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String id;</span><br><span class="line">   <span class="keyword">protected</span> String type;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> type;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Object clone = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         clone = <span class="keyword">super</span>.clone();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> clone;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span></span>&#123;</span><br><span class="line">     type = <span class="string">"Rectangle"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Rectangle::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeCache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Hashtable&lt;String, Shape&gt; shapeMap</span><br><span class="line">      = <span class="keyword">new</span> Hashtable&lt;String, Shape&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(String shapeId)</span> </span>&#123;</span><br><span class="line">      Shape cachedShape = shapeMap.get(shapeId);</span><br><span class="line">      <span class="keyword">return</span> (Shape) cachedShape.clone();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对每种形状都运行数据库查询，并创建该形状</span></span><br><span class="line">   <span class="comment">// shapeMap.put(shapeKey, shape);</span></span><br><span class="line">   <span class="comment">// 例如，我们要添加三种形状</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Circle circle = <span class="keyword">new</span> Circle();</span><br><span class="line">      circle.setId(<span class="string">"1"</span>);</span><br><span class="line">      shapeMap.put(circle.getId(),circle);</span><br><span class="line"></span><br><span class="line">      Square square = <span class="keyword">new</span> Square();</span><br><span class="line">      square.setId(<span class="string">"2"</span>);</span><br><span class="line">      shapeMap.put(square.getId(),square);</span><br><span class="line"></span><br><span class="line">      Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">      rectangle.setId(<span class="string">"3"</span>);</span><br><span class="line">      shapeMap.put(rectangle.getId(),rectangle);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ShapeCache.loadCache();</span><br><span class="line"></span><br><span class="line">      Shape clonedShape = (Shape) ShapeCache.getShape(<span class="string">"1"</span>);</span><br><span class="line">      System.out.println(<span class="string">"Shape : "</span> + clonedShape.getType());</span><br><span class="line"></span><br><span class="line">      Shape clonedShape2 = (Shape) ShapeCache.getShape(<span class="string">"2"</span>);</span><br><span class="line">      System.out.println(<span class="string">"Shape : "</span> + clonedShape2.getType());</span><br><span class="line"></span><br><span class="line">      Shape clonedShape3 = (Shape) ShapeCache.getShape(<span class="string">"3"</span>);</span><br><span class="line">      System.out.println(<span class="string">"Shape : "</span> + clonedShape3.getType());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><ul><li>简介</li></ul><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><ul><li>优点：</li></ul><p>1、封装不变部分，扩展可变部分。</p><p>2、提取公共代码，便于维护。</p><p>3、行为由父类控制，子类实现。</p><ul><li>缺点：</li></ul><p>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><ul><li>使用场景：</li></ul><p>1、有多个子类共有的方法，且逻辑相同。</p><p>2、重要的、复杂的方法，可以考虑作为模板方法。</p><ul><li>实现</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//模板</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//初始化游戏</span></span><br><span class="line">      initialize();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//开始游戏</span></span><br><span class="line">      startPlay();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//结束游戏</span></span><br><span class="line">      endPlay();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cricket</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Cricket Game Finished!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Cricket Game Initialized! Start playing."</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Cricket Game Started. Enjoy the game!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplatePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      Game game = <span class="keyword">new</span> Cricket();</span><br><span class="line">      game.play();</span><br><span class="line">      System.out.println();</span><br><span class="line">      game = <span class="keyword">new</span> Football();</span><br><span class="line">      game.play();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;设计模式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;工厂模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;抽象工厂模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;代理模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;单例模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;策略模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;原型模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;模板模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://lirawx.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>docker 实现 mysql 的主从复制</title>
    <link href="https://lirawx.me/2017/12/mysql-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.html"/>
    <id>https://lirawx.me/2017/12/mysql-主从复制.html</id>
    <published>2017-12-19T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的引擎，可以轻松的为任何应用创建一个轻量级、可移植、自给自足的容器。</p><p>docker 的使用就不多说，直接进入怎么配置mysql 主从复制<br><a id="more"></a></p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ul><li><p>准备两台 MySQL 服务器</p></li><li><p>配置主服务器（Master）</p></li><li><p>配置从服务器（Slave）</p></li><li><p>完成Master和Slave链接</p></li><li><p>测试配置是否成功</p></li></ul><h2 id="docker-虚拟两台-MySQL-服务器"><a href="#docker-虚拟两台-MySQL-服务器" class="headerlink" title="docker 虚拟两台 MySQL 服务器"></a>docker 虚拟两台 MySQL 服务器</h2><p>命令如下：<br>创建主服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql_master -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest</span><br></pre></td></tr></table></figure><blockquote><p>通过镜像 mysql:latest ,该景象基于debain os 。启动一个名为 mysql_master 的 MySQL 服务器，端口号是3306，映射的宿主机端口号是3306，root 账号密码是123456</p></blockquote><p>创建从服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql_slave -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest</span><br></pre></td></tr></table></figure><p>可以使用 docker ps 查看当前运行的容器</p><p>下面需要进行一些相关配置</p><p>首先我们先逐个获取容器运行的ip地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master</span></span><br><span class="line">docker inspect --format=<span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> c66b935ea94d</span><br><span class="line"></span><br><span class="line">172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># slave</span></span><br><span class="line"></span><br><span class="line">docker inspect --format=<span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> 2bb11aa899e4</span><br><span class="line"></span><br><span class="line">172.17.0.3</span><br></pre></td></tr></table></figure><h2 id="配置主服务器（Master）"><a href="#配置主服务器（Master）" class="headerlink" title="配置主服务器（Master）"></a>配置主服务器（Master）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it c66b935ea94d /bin/bash</span><br></pre></td></tr></table></figure><p>在安装vim之前要先升级一下软件包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt install -y vim</span><br></pre></td></tr></table></figure><p>之后配置mysql，配置文件在/etc/mysql/my.cnf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment">## 设置server_id，一般设置为IP，同一局域网内注意要唯一</span></span><br><span class="line">server_id=100</span><br><span class="line"><span class="comment">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"><span class="comment">## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）</span></span><br><span class="line"><span class="built_in">log</span>-bin=edu-mysql-bin</span><br><span class="line"><span class="comment">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="comment">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"><span class="comment">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure><p>在我的容器中，my.cnf 的路径是 /etc/mysql。<br>配置完成后重启 mysql ，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p>这个命令会使得容器停止，重新启动就可以了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start c66b935ea94d</span><br></pre></td></tr></table></figure><p>接下来创建数据同步用户：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &apos;slave&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;;</span><br><span class="line">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;slave&apos;@&apos;%&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="配置从服务器（Slave）"><a href="#配置从服务器（Slave）" class="headerlink" title="配置从服务器（Slave）"></a>配置从服务器（Slave）</h2><p>配置文件 my.cnf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment">## 设置server_id，一般设置为IP,注意要唯一</span></span><br><span class="line">server_id=101</span><br><span class="line"><span class="comment">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"><span class="comment">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span></span><br><span class="line"><span class="built_in">log</span>-bin=edu-mysql-slave1-bin</span><br><span class="line"><span class="comment">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="comment">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"><span class="comment">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"><span class="comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class="line"><span class="comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062</span><br><span class="line"><span class="comment">## relay_log配置中继日志</span></span><br><span class="line">relay_log=edu-mysql-relay-bin</span><br><span class="line"><span class="comment">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class="line">log_slave_updates=1</span><br><span class="line"><span class="comment">## 防止改变数据(除了特殊的线程)</span></span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure><h2 id="完成Master和Slave链接"><a href="#完成Master和Slave链接" class="headerlink" title="完成Master和Slave链接"></a>完成Master和Slave链接</h2><p>注意，需要保证 Master 和 Slave 除了不同步的数据库，其他数据库的数据要一致。<br>在 Master 进入 MySQL， 然后执行命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p>记录下 File 和 Position 字段的值，后面会用到。</p><p>然后到 Slave 中进入 mysql，执行命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">change master to master_host=<span class="string">'172.17.0.2'</span>, master_user=<span class="string">'slave'</span>, master_password=<span class="string">'123456'</span>, master_port=3306, master_log_file=<span class="string">'edu-mysql-bin.000001'</span>, master_log_pos=929, master_connect_retry=30;</span><br></pre></td></tr></table></figure></p><blockquote><p>命令解释：<br>master_host: Master 的IP地址<br>master_user: 在 Master 中授权的用于数据同步的用户<br>master_password: 同步数据的用户的密码<br>master_port: Master 的数据库的端口号<br>master_log_file: 指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值<br>master_log_pos: 从哪个 Position 开始读，即上文中提到的 Position 字段的值<br>master_connect_retry: 当重新建立主从连接时，如果连接失败，重试的时间间隔，单位是秒，默认是60秒。</p></blockquote><p>在 Slave 的 MySQL 终端执行查看主从同步状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show slave status \G;</span><br></pre></td></tr></table></figure><p>SlaveIORunning 和 SlaveSQLRunning 是No，表明 Slave 还没有开始复制过程。相反 SlaveIORunning 和 SlaveSQLRunning 是Yes表明已经开始工作了，因为我已经运行过了，所以我的显示的都是 Yes。</p><p>执行以下命令，开始开启主从同步：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure></p><p>OK!</p><blockquote><p>slave 基本命令<br>start slave; //开启slave<br>stop slave;  // 停止主从复制<br>reset slave; // 充值slave 状态。<br>或者 change master to master_host=’ ‘</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 是一个开源的引擎，可以轻松的为任何应用创建一个轻量级、可移植、自给自足的容器。&lt;/p&gt;
&lt;p&gt;docker 的使用就不多说，直接进入怎么配置mysql 主从复制&lt;br&gt;
    
    </summary>
    
    
      <category term="mysql docker" scheme="https://lirawx.me/tags/mysql-docker/"/>
    
  </entry>
  
  <entry>
    <title>mysql 读写分离mycat实现</title>
    <link href="https://lirawx.me/2017/12/mycat-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB.html"/>
    <id>https://lirawx.me/2017/12/mycat-读写分离.html</id>
    <published>2017-12-19T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>必须已经配置mysql主从复制，可以参考文章➡️<a href="">mysql主从复制</a></li></ul><p>实验拓扑：</p><pre><code>mycat/    \</code></pre><p>  master – slave (主从复制)<br><a id="more"></a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mycat: 172.17.0.1</span><br><span class="line">master: 172.17.0.2</span><br><span class="line">slave: 172.17.0.3</span><br></pre></td></tr></table></figure><p>Mycat 提供了编译好的安装包，下载地址：<a href="http://dl.mycat.io" target="_blank" rel="noopener">http://dl.mycat.io</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Index of /</span><br><span class="line"></span><br><span class="line">../</span><br><span class="line">1.6-RELEASE/                                      28-Oct-2016 12:56                  -</span><br><span class="line">1.6.5-DEV/                                        15-Jan-2017 07:10                  -</span><br><span class="line">2.0-dev/                                          02-Jan-2017 07:24                  -</span><br><span class="line">mycat-web-1.0/                                    02-Jan-2017 07:40                  -</span><br><span class="line">yum/                                              18-May-2016 02:51                  -</span><br><span class="line">Mycat-server-1.4-beta-20150604171601-linux.tar.gz  27-Jun-2015 10:09            7663894</span><br><span class="line">apache-maven-3.3.3-bin.tar.gz                      27-Jun-2015 10:09            8042383</span><br><span class="line">apache-tomcat-7.0.62.tar.gz                        27-Jun-2015 10:09            8824528</span><br><span class="line">jdk-7u79-linux-x64.tar.gz                          27-Jun-2015 10:09          153512879</span><br><span class="line">jdk-8u20-linux-x64.tar.gz                          27-Jun-2015 10:09          160872342</span><br><span class="line">phpMyAdmin-4.4.9-all-languages.tar.gz              27-Jun-2015 10:09            9352049</span><br><span class="line">probe-2.3.3.zip                                    27-Jun-2015 10:09            7957290</span><br><span class="line">toolset.sh                                        26-Oct-2015 05:03              16015</span><br><span class="line">zookeeper-3.4.6.tar.gz</span><br></pre></td></tr></table></figure><p>下载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</span><br></pre></td></tr></table></figure><p>Mycat-server 包解压后可直接使用。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz -C /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure><p>目录结构:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vm2 <span class="built_in">local</span>]<span class="comment"># tree -L 1 mycat</span></span><br><span class="line">mycat</span><br><span class="line">|-- bin</span><br><span class="line">|-- catlet</span><br><span class="line">|-- conf</span><br><span class="line">|-- lib</span><br><span class="line">|-- logs</span><br><span class="line">-- version.txt</span><br><span class="line"></span><br><span class="line">5 directories, 1 file</span><br></pre></td></tr></table></figure><blockquote><p>bin 目录中是可执行文件以及脚本，我们可以使用其中的 mycat 脚本控制mycat的启动和关闭。<br>conf 目录中是配置文件，这里配置读写分离主要使用 schema.xml 和 server.xml。其他配置分片的配置请参考官方文档。<br>logs 目录存放日志文件，遇到mycat出错了，就在这里查看问题的原因。</p></blockquote><p>这里只讲解一下读写分离用到的配置文件：server.xml, schema.xml。</p><p>前提：已经有一个配置好的 mysql 一主一从架构。</p><p>一个主从集群在Mycat里面由一个 dataNode 定义，dataNode 定义了一个数据库实例及其中的一个具体的库。Mycat 的一个数据库实例可以实际上是一个主从复制架构：一主多从，一主一从，多主多从等等，具体在 dataHost 中定义。</p><p>这里建立一个非拆分库（将mycat逻辑库绑定到一个具体的 dataNode 上）testdb，绑定到 dn1 这个 dataNode 上。</p><p>schema.xml:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"testdb"</span> <span class="attr">checkSQLschema</span>=<span class="string">"false"</span> <span class="attr">sqlMaxLimit</span>=<span class="string">"100"</span> <span class="attr">dataNode</span>=<span class="string">"dn1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在所有的表会走默认的节点 dn1。逻辑库 testdb，对应了数据节点 dn1。dn1 对应着真实的数据库实例上的一个真实的库。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn1"</span> <span class="attr">dataHost</span>=<span class="string">"vm3306"</span> <span class="attr">database</span>=<span class="string">"db1"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataNode</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>dataNode 标签定义了 MyCat 中的数据节点,也就是我们通常说所的数据分片。一个 dataNode 标签就是 一个独立的数据分片。<br>例子中所表述的意思为:使用名字为 vm3306 数据库实例上的 db1 物理数据库,这就组成一个数据分片,最 后,我们使用名字 dn1 标识这个分片。<br>该属性用于定义该分片属性哪个具体数据库实例上的具体库,因为这里使用两个纬度来定义分片,就是:实 例+具体的库。因为每个库上建立的表和表结构是一样的。所以这样做就可以轻松的对表进行水平拆分。<br>dataHost: 包含一个 writeHost 和 一个 readHost，它们之前已经配置好主从复制了。<br>balance=”3”：表示写请求只发给节点，读请求只发给读节点。</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"vm3306"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"3"</span> <span class="attr">writeType</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- can have multi write hosts --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM1"</span> <span class="attr">url</span>=<span class="string">"192.168.0.120:3306"</span> <span class="attr">user</span>=<span class="string">"tuser"</span> <span class="attr">password</span>=<span class="string">"guli123"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- can have multi read hosts --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"hostS1"</span> <span class="attr">url</span>=<span class="string">"192.168.0.122:3306"</span> <span class="attr">user</span>=<span class="string">"tuser"</span> <span class="attr">password</span>=<span class="string">"guli123"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;writeHost host="hostM2" url="localhost:3316" user="tuser" password="guli123"/&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>user 及 password属性是后端主从mysql的账户密码信息。</p></blockquote><p>dataHost属性说明：</p><ul><li>writeType=”0”, 所有写操作发送到配置的第一个 writeHost,第一个挂了切到还生存的第二个 writeHost,重新启动后已切换后的为准,切换记录在配置文件中:dnindex.properties .</li><li>balance=”3”,所有读请求随机的分发到 wiriterHost 对应的 readhost 执行,writerHost 不负担读压力,注意 balance=3 只在 1.4 及其以后版本有,1.3 没有。</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>testdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>user<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>testdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readOnly"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这边定义mycat 的用户 配置相应的权限</p></blockquote><p>启动mycat</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mycat/bin</span><br><span class="line">./mycat start</span><br></pre></td></tr></table></figure><h3 id="Mycat-管理命令与监控"><a href="#Mycat-管理命令与监控" class="headerlink" title="Mycat 管理命令与监控"></a>Mycat 管理命令与监控</h3><p>登录:目前 mycat 有两个端口,8066 数据端口,9066 管理端口,命令行的登陆是通过 9066 管理端口来操 作,登录方式类似于 mysql 的服务端登陆。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h127.0.0.1 -utest -ptest -P9066 [-dmycat]</span><br><span class="line">-h 后面是主机,即当前 mycat 按照的主机地址,本地可用 127.0.0.1 远程需要远程 ip -u Mycat server.xml 中配置的逻辑库用户</span><br><span class="line">-p Mycat server.xml 中配置的逻辑库密码</span><br><span class="line">-P 后面是端口 默认 9066,注意 P 是大写</span><br><span class="line">-d Mycat server.xml 中配置的逻辑库</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h127.0.0.1 -uroot -p123456 -P9066</span><br></pre></td></tr></table></figure><p>从 9066 管理端口登陆后，执行 show @@help 可以查看到所有帮助命令</p><blockquote><p>其他主要和mysql 差不多，就不多说了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;必须已经配置mysql主从复制，可以参考文章➡️&lt;a href=&quot;&quot;&gt;mysql主从复制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实验拓扑：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mycat
/    \
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  master – slave (主从复制)&lt;br&gt;
    
    </summary>
    
    
      <category term="mycat mysql" scheme="https://lirawx.me/tags/mycat-mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql 悲观锁和乐观锁</title>
    <link href="https://lirawx.me/2017/12/mysql-%E6%82%B2%E8%A7%82%E9%94%81-%E4%B9%90%E8%A7%82%E9%94%81.html"/>
    <id>https://lirawx.me/2017/12/mysql-悲观锁-乐观锁.html</id>
    <published>2017-12-19T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在数据库的锁机制中介绍过，数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。</p><p>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p><p>无论是悲观锁还是乐观锁，都是人们定义出来的概念，可以认为是一种思想。其实不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像memcache、hibernate、tair等都有类似的概念。</p><p>针对于不同的业务场景，应该选用不同的并发控制方式。所以，不要把乐观并发控制和悲观并发控制狭义的理解为DBMS中的概念，更不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。<br><a id="more"></a></p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><blockquote><p>在关系数据库管理系统里，悲观并发控制（又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作都某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。<br>悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。</p></blockquote><ul><li>在数据库中，悲观锁的流程如下：</li></ul><p>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。</p><p>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。</p><p>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。</p><p>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</p><ul><li>MySQL InnoDB中使用悲观锁</li></ul><p>要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//0.开始事务</span></span><br><span class="line">begin;/begin work;/start transaction; (三者选一就可以)</span><br><span class="line"><span class="comment">//1.查询出商品信息</span></span><br><span class="line">select status from t_goods where id=<span class="number">1</span> <span class="keyword">for</span> update;</span><br><span class="line"><span class="comment">//2.根据商品信息生成订单</span></span><br><span class="line"><span class="function">insert into <span class="title">t_orders</span> <span class="params">(id,goods_id)</span> <span class="title">values</span> <span class="params">(<span class="keyword">null</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//3.修改商品status为2</span></span><br><span class="line">update t_goods set status=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//4.提交事务</span></span><br><span class="line">commit;/commit work;</span><br></pre></td></tr></table></figure><p>上面的查询语句中，我们使用了select…for update的方式，这样就通过开启排他锁的方式实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>在关系数据库管理系统里，乐观并发控制（又名“乐观锁”，Optimistic Concurrency Control，缩写“OCC”）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。乐观事务控制最早是由孔祥重（H.T.Kung）教授提出。</p><ul><li>实现流程</li></ul><p>数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。</p><ul><li>SQL语句</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span>.查询出商品信息</span><br><span class="line">select (status,status,version) from t_goods where id=#&#123;id&#125;</span><br><span class="line"><span class="number">2</span>.根据商品信息生成订单</span><br><span class="line"><span class="number">3</span>.修改商品status为<span class="number">2</span></span><br><span class="line">update t_goods</span><br><span class="line">set status=<span class="number">2</span>,version=version+<span class="number">1</span></span><br><span class="line">where id=#&#123;id&#125; and version=#&#123;version&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;在数据库的锁机制中介绍过，数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。&lt;/p&gt;
&lt;p&gt;乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。&lt;/p&gt;
&lt;p&gt;无论是悲观锁还是乐观锁，都是人们定义出来的概念，可以认为是一种思想。其实不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像memcache、hibernate、tair等都有类似的概念。&lt;/p&gt;
&lt;p&gt;针对于不同的业务场景，应该选用不同的并发控制方式。所以，不要把乐观并发控制和悲观并发控制狭义的理解为DBMS中的概念，更不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。&lt;br&gt;
    
    </summary>
    
    
      <category term="mysql 并发控制" scheme="https://lirawx.me/tags/mysql-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>maven 分模块工程</title>
    <link href="https://lirawx.me/2017/12/maven-module.html"/>
    <id>https://lirawx.me/2017/12/maven-module.html</id>
    <published>2017-12-17T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>在平时的Javaweb项目开发中为了便于后期的维护，我们一般会进行分层开发，最常见的就是分为domain（域模型层）、dao（数据库访问层）、service（业务逻辑层）、web（表现层），这样分层之后，各个层之间的职责会比较明确，后期维护起来也相对比较容易，今天我们就是使用Maven来构建以上的各个层。每个层对应一个模块，这里domain层为model 包， web 层为controller层。</p><a id="more"></a><p>项目结构如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── maven_archetype_custom.iml</span><br><span class="line">├── maven_archetype_custom_common</span><br><span class="line">│   ├── maven_archetype_custom_common.iml</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── maven_archetype_custom_controller</span><br><span class="line">│   ├── maven_archetype_custom_controller.iml</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── maven_archetype_custom_dao</span><br><span class="line">│   ├── maven_archetype_custom_dao.iml</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── maven_archetype_custom_model</span><br><span class="line">│   ├── maven_archetype_custom_model.iml</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── maven_archetype_custom_service</span><br><span class="line">│   ├── maven_archetype_custom_service.iml</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    └── test</span><br></pre></td></tr></table></figure><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>mac os 10.13.2</li><li>idea 2017.2</li><li>maven 3.5</li></ul><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>parent 包普通maven项目就好，主要是配置pom.xml ，所有的依赖jar包都可以写入pom.xml 后面创建的模块会继承这个pom.xml。<br>差不多这种感觉：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven_archetype_custom_common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven_archetype_custom_model<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven_archetype_custom_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven_archetype_custom_service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven_archetype_custom_controller<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">  .......</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来创建其他模块，直接parent 包右键new -&gt; module 就好，然后除了controller包也就是web层是webapp 也就是war打包以外其他都是普通maven项目,也就是packaging设置为pom。</p><p>项目结构搭建好了，现在还不能整个项目编译，我们稍稍修改一些配置。controller 层依赖service层，service 层依赖dao层，dao层依赖model层，所以我们需要在pom.xml中添加相关依赖。这边我所有工具包都在common包下，所以他们都依赖common包，</p><p>下面贴一下配置<br>model 层</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dao 层</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>service 层</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>controller 层</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_controller<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven_archetype_custom_controller Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lirawx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_archetype_custom_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>${project.version} 是maven自带的属性，表示整个工程的version</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在平时的Javaweb项目开发中为了便于后期的维护，我们一般会进行分层开发，最常见的就是分为domain（域模型层）、dao（数据库访问层）、service（业务逻辑层）、web（表现层），这样分层之后，各个层之间的职责会比较明确，后期维护起来也相对比较容易，今天我们就是使用Maven来构建以上的各个层。每个层对应一个模块，这里domain层为model 包， web 层为controller层。&lt;/p&gt;
    
    </summary>
    
    
      <category term="maven modules" scheme="https://lirawx.me/tags/maven-modules/"/>
    
  </entry>
  
  <entry>
    <title>maven profile切换</title>
    <link href="https://lirawx.me/2017/12/maven-profile.html"/>
    <id>https://lirawx.me/2017/12/maven-profile.html</id>
    <published>2017-12-17T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>当用maven管理工程后，线上线下环境的切换就变得很有必要了，灵活切换有助于项目的开发和测试。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>mac os 10.13.2</li><li>idea 2017.2</li><li>maven 3.5</li></ul><h2 id="maven-配置"><a href="#maven-配置" class="headerlink" title="maven 配置"></a>maven 配置</h2><p>首先pom.xml 定义 两个profile ，这边一个开发环境dev一个生产环境 prod</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profiles.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profiles.active</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>config/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/config/$&#123;profiles.active&#125;/*<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">profiles.active</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">profiles.active</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>config/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/config/$&#123;profiles.active&#125;/*<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>resouces 可以配置包含哪个文件或者去除包含哪个文件，然后可以更具激活不同的dev 来包含正确的resource文件或者目录</p></blockquote><p>之后因为web.xml中要加载applicationContext.xml其中数据库文件需要更具不同的profile来选择，所以需要把${profiles.active}<br>这个变量传递到web.xml中，pom.xml中build 标签下加入如下配置:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">warName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">warName</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!-- 激活spring profile --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/web.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">warSourceDirectory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">warSourceDirectory</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">webXml</span>&gt;</span>src/main/webapp/WEB-INF/web.xml<span class="tag">&lt;/<span class="name">webXml</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后在web.xml 中 加入profile.active 这个变量</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>profiles.active<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>$&#123;profiles.active&#125;<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后applicationContext.xml中就可以应用这个变量了。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"systemPropertiesModeName"</span> <span class="attr">value</span>=<span class="string">"SYSTEM_PROPERTIES_MODE_OVERRIDE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreResourceNotFound"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:config/$&#123;profiles.active&#125;/config.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当用maven管理工程后，线上线下环境的切换就变得很有必要了，灵活切换有助于项目的开发和测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="maven profile" scheme="https://lirawx.me/tags/maven-profile/"/>
    
  </entry>
  
  <entry>
    <title>小程序初探</title>
    <link href="https://lirawx.me/2017/12/wxapp.html"/>
    <id>https://lirawx.me/2017/12/wxapp.html</id>
    <published>2017-12-02T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.530Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究了一下小程序的开发工具的应用。主要是通过腾讯云上传测试代码和正式代码，主要是集成了很多工具，<br>比较方便。<br><a id="more"></a></p><h2 id="程序截图"><a href="#程序截图" class="headerlink" title="程序截图"></a>程序截图</h2><p><img src="https://github.com/lirawx/weapp/raw/master/dtools/weapp-screen-drivernews.gif" alt=""></p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>功能比较简单，基于脚手架<a href="https://github.com/tencentyun/wafer2-quickstart-nodejs" target="_blank" rel="noopener">wafer2-quickstart-nodejs</a>抽空业余时间写的一些代码，主要是新闻数据获取，我用node js 爬取的驱动之家的新闻<br>新闻地址为<a href="http://news.mydrivers.com/blog/" target="_blank" rel="noopener">➡️</a> 这个地址的新闻每天都会更新。很实用，不多<br>也不少，每天差不多40条左右，没什么广告，业内热门新闻都有，有时候还有steam游戏打折推荐，很不错。</p><h2 id="主要实现"><a href="#主要实现" class="headerlink" title="主要实现"></a>主要实现</h2><p>WEUI <a href="https://github.com/Tencent/weui-wxss" target="_blank" rel="noopener">文档</a><br>font awesome 引入<br>moment js 时间格式化<br>promise 风格 API 封装。</p><p>几个主要的功能代码贴一下。<br>sql.js  工具类代码，通用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var mysql = require(&apos;mysql&apos;)</span><br><span class="line">var config = require(&apos;../config&apos;)</span><br><span class="line">const moment = require(&apos;moment&apos;)</span><br><span class="line"></span><br><span class="line">var pool = mysql.createPool(&#123;</span><br><span class="line">    host: config.mysql.host,</span><br><span class="line">    user: config.mysql.user,</span><br><span class="line">    password: config.mysql.pass,</span><br><span class="line">    database: config.mysql.db</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var query = function (sql, val) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        pool.getConnection((err, connection) =&gt; &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">                return resolve(err)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                connection.query(sql, val, (err, rows) =&gt; &#123;</span><br><span class="line">                    if (err) &#123;</span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        resolve(rows)</span><br><span class="line">                    &#125;</span><br><span class="line">                    connection.release()</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let insertData = function (n) &#123;</span><br><span class="line">    let _sql = `INSERT INTO tb_driver_news(id, title, auther, pulish_time, href, imgs_url, content, contentHTML, createAt, updateAt) VALUES (null, &apos;$&#123;n.title&#125;&apos;, &apos;$&#123;n.auther&#125;&apos;, &apos;$&#123;n.publishtime&#125;&apos;, &apos;$&#123;n.href&#125;&apos;, &apos;$&#123;n.imgsUrl&#125;&apos;, &apos;$&#123;n.content&#125;&apos;,&apos;$&#123;n.contentHTML&#125;&apos;, NOW(), NOW());`</span><br><span class="line">    return query(_sql)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let selectData = function (t) &#123;</span><br><span class="line">    let re = /^[1-9]\d&#123;3&#125;-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/</span><br><span class="line">    if (!re.test(t) || t === undefined || t === null) &#123;</span><br><span class="line">        t = moment().format(&apos;Y-M-D&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    let _sql = `SELECT * FROM tb_driver_news WHERE DATE_FORMAT(createAt,&apos;%Y-%m-%d&apos;) = &apos;$&#123;t&#125;&apos;;`</span><br><span class="line">    return query(_sql)</span><br><span class="line">&#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    insertData,</span><br><span class="line">    selectData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>util.js 客户端工具类</p><p>moment.js 直接官网下<a href="http://momentjs.com/" target="_blank" rel="noopener">moment.min.js</a> 就好了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const moment = require(&apos;moment.js&apos;);</span><br><span class="line">const getToday = () =&gt; &#123;</span><br><span class="line">  return moment(new Date()).format(&apos;Y-M-D&apos;);</span><br><span class="line">&#125;</span><br><span class="line">const getWeek = date =&gt; &#123;</span><br><span class="line">  let w = &apos;&apos;;</span><br><span class="line">  switch (moment(date).format(&apos;E&apos;)) &#123;</span><br><span class="line">    case &apos;1&apos;:</span><br><span class="line">      w = &apos;一&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case &apos;2&apos;:</span><br><span class="line">      w = &apos;二&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case &apos;3&apos;:</span><br><span class="line">      w = &apos;三&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case &apos;4&apos;:</span><br><span class="line">      w = &apos;四&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case &apos;5&apos;:</span><br><span class="line">      w = &apos;五&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case &apos;6&apos;:</span><br><span class="line">      w = &apos;六&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case &apos;7&apos;:</span><br><span class="line">      w = &apos;七&apos;;</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">  return &apos;星期&apos;+w;</span><br><span class="line">&#125;</span><br><span class="line">const getYesterDay = () =&gt; &#123;</span><br><span class="line">  return moment(new Date()).subtract(1, &apos;days&apos;).format(&apos;Y-M-D&apos;);</span><br><span class="line">&#125;</span><br><span class="line">const getDayBeforeYesterDay = () =&gt; &#123;</span><br><span class="line">  return moment(new Date()).subtract(2, &apos;days&apos;).format(&apos;Y-M-D&apos;);</span><br><span class="line">&#125;</span><br><span class="line">const formatTime = date =&gt; &#123;</span><br><span class="line">  const year = date.getFullYear()</span><br><span class="line">  const month = date.getMonth() + 1</span><br><span class="line">  const day = date.getDate()</span><br><span class="line">  const hour = date.getHours()</span><br><span class="line">  const minute = date.getMinutes()</span><br><span class="line">  const second = date.getSeconds()</span><br><span class="line"></span><br><span class="line">  return [year, month, day].map(formatNumber).join(&apos;/&apos;) + &apos; &apos; + [hour, minute, second].map(formatNumber).join(&apos;:&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const formatNumber = n =&gt; &#123;</span><br><span class="line">  n = n.toString()</span><br><span class="line">  return n[1] ? n : &apos;0&apos; + n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 显示繁忙提示</span><br><span class="line">var showBusy = text =&gt; wx.showToast(&#123;</span><br><span class="line">    title: text,</span><br><span class="line">    icon: &apos;loading&apos;,</span><br><span class="line">    duration: 10000</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 显示成功提示</span><br><span class="line">var showSuccess = text =&gt; wx.showToast(&#123;</span><br><span class="line">    title: text,</span><br><span class="line">    icon: &apos;success&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 显示失败提示</span><br><span class="line">var showModel = (title, content) =&gt; &#123;</span><br><span class="line">    wx.hideToast();</span><br><span class="line"></span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">        title,</span><br><span class="line">        content: JSON.stringify(content),</span><br><span class="line">        showCancel: false</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  formatTime,</span><br><span class="line">  getToday,</span><br><span class="line">  getWeek,</span><br><span class="line">  getYesterDay,</span><br><span class="line">  getDayBeforeYesterDay,</span><br><span class="line">  showBusy,</span><br><span class="line">  showSuccess,</span><br><span class="line">  showModel &#125;</span><br></pre></td></tr></table></figure></p><p>app.wxss<br>里面包含了fontawesome 的图标应用 实现原理就是吧字体文件ttf 转成 base64 格式的代码<br>然后引用就好了<br>我贴一部分具体的拿fontawesome.css替换就好了</p><p>下载地址<a href="https://github.com/lirawx/weapp/raw/master/dtools/client/app.wxss" target="_blank" rel="noopener">app.wxss</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: &apos;fa&apos;;</span><br><span class="line">    src: url(data:font/truetype;charset=utf-8;base64,AAEAAAANAIAAAwBQRkZUTXLOMIUAAlXMAAAAHEdERUYAJwKrAAJVrAAAAB5PUy8yiDJ6IwAAAVgAAABgY21hcJ0vdNQAAAw4AAADAmdhc3D//wADAAJVpAAAAAhnbHlmHejPwQAAGdQAAh3kaGVhZAbB4eAAAADcAAAANmhoZWEO ....</span><br><span class="line">.....</span><br><span class="line">JkmAAAAAMtPPDAAAAAA01pbLg==) format(&apos;truetype&apos;);</span><br><span class="line">    font-weight: normal;</span><br><span class="line">    font-style: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fa &#123;</span><br><span class="line">  font-family: &quot;fa&quot; !important;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -webkit-text-stroke-width: 0.2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* makes the font 33% larger relative to the icon container */</span><br><span class="line">.fa-lg &#123;</span><br><span class="line">  font-size: 1.33333333em;</span><br><span class="line">  line-height: 0.75em;</span><br><span class="line">  vertical-align: -15%;</span><br><span class="line">&#125;</span><br><span class="line">.fa-2x &#123;</span><br><span class="line">  font-size: 2em;</span><br><span class="line">&#125;</span><br><span class="line">.fa-3x &#123;</span><br><span class="line">  font-size: 3em;</span><br><span class="line">&#125;</span><br><span class="line">.fa-4x &#123;</span><br><span class="line">  font-size: 4em;</span><br><span class="line">&#125;</span><br><span class="line">.fa-5x &#123;</span><br><span class="line">  font-size: 5em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近研究了一下小程序的开发工具的应用。主要是通过腾讯云上传测试代码和正式代码，主要是集成了很多工具，&lt;br&gt;比较方便。&lt;br&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="https://lirawx.me/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>react webpack2 配置</title>
    <link href="https://lirawx.me/2017/12/11.html"/>
    <id>https://lirawx.me/2017/12/11.html</id>
    <published>2017-12-02T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>主要分三种实现</p><ul><li>webpack 模块管理</li><li>webpack 加入文件改动监听，自动编译刷新浏览器</li><li>实现热替换 （MHR）</li></ul><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>yarn 1.3.2 详细api使用请戳<a href="https://yarnpkg.com/lang/en/docs/install/" target="_blank" rel="noopener">👇</a></li><li>node v8.9.1</li><li>webpack2</li><li>react</li><li>sublimet text 3</li></ul><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://github.com/lirawx/Crazy_FED/raw/master/react/helloworld/react-webpack2.png" alt=""></p><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><p><a href="https://github.com/lirawx/Crazy_FED/tree/master/react/helloworld" target="_blank" rel="noopener">链接地址➡️</a></p><h2 id="webpack-模块管理"><a href="#webpack-模块管理" class="headerlink" title="webpack 模块管理"></a>webpack 模块管理</h2><p>webpack.dev.js</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const root = __dirname</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 入口文件</span><br><span class="line">  entry: path.resolve(root, &apos;src/main.js&apos;),</span><br><span class="line">  // 出口文件</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &apos;bundle.js&apos;,</span><br><span class="line">    path: path.resolve(root, &apos;dist&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // loaders</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;test: /\.jsx?$/, use: [&apos;babel-loader&apos;], exclude: /node_modules/&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.babelrc</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;es2015&quot;, &#123;&quot;modules&quot;: false&#125;], // webpack 2 本身已支持es6 module</span><br><span class="line">    &quot;react&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包依赖安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add react react-dom</span><br><span class="line"></span><br><span class="line">yarn add webpack babel-cli babel-loader babel-preset-es2015 babel-preset-react --dev</span><br></pre></td></tr></table></figure><p>另外可以加入 <a href="https://webpack.js.org/plugins/html-webpack-plugin/" target="_blank" rel="noopener">html-webpack-plugin</a><br>根据teplate.html生成index.html<br>js 文件会自动引入模板文件。</p><p>最后的 webpack 配置 如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">// 引入html-webpack-plugin</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">const root = __dirname</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 入口文件</span><br><span class="line">  entry: path.resolve(root, &apos;src/main.js&apos;),</span><br><span class="line">  // 出口文件</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &apos;bundle.js&apos;,</span><br><span class="line">    path: path.resolve(root, &apos;dist&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // loaders</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;test: /\.jsx?$/, use: [&apos;babel-loader&apos;], exclude: /node_modules/&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: &apos;React Demo&apos;,</span><br><span class="line">      template: path.resolve(root, &apos;template.html&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加入文件改动监听，自动编译刷新浏览器"><a href="#加入文件改动监听，自动编译刷新浏览器" class="headerlink" title="加入文件改动监听，自动编译刷新浏览器"></a>加入文件改动监听，自动编译刷新浏览器</h2><p>需要用到 <a href="https://doc.webpack-china.org/configuration/dev-server/" target="_blank" rel="noopener">webpack-dev-server</a> 模块管理</p><p>安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add webpack-dev-server --dev</span><br></pre></td></tr></table></figure><p>webpack.dev.js 更改为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">// 引入html-webpack-plugin</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">const root = __dirname</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 入口文件</span><br><span class="line">  entry: [</span><br><span class="line">    &apos;webpack-dev-server/client&apos;,</span><br><span class="line">    path.resolve(root, &apos;src/main.js&apos;)</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &apos;bundle.js&apos;,</span><br><span class="line">    path: path.resolve(root, &apos;dist&apos;),</span><br><span class="line">    publicPath: &apos;/&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  // loaders</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;test: /\.jsx?$/, use: [&apos;babel-loader&apos;], exclude: /node_modules/&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: &apos;React Demo&apos;,</span><br><span class="line">      template: path.resolve(root, &apos;template.html&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.resolve(root, &apos;dist&apos;),</span><br><span class="line">    publicPath: &apos;/&apos;,</span><br><span class="line">    port: 8080,</span><br><span class="line">    historyApiFallback: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>package.json 中的scripts 改为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;webpack-dev-server --config webpack.dev.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现热替换-（MHR）"><a href="#实现热替换-（MHR）" class="headerlink" title="实现热替换 （MHR）"></a>实现热替换 （MHR）</h2><p>上面已经实现了改动自动刷新服务器，但是，有时只需要局部更改相应数据，不需要整体更新，这时就需要热替换<br>更新相应的组件。</p><p>这里用到了 <a href="https://gaearon.github.io/react-hot-loader/getstarted/" target="_blank" rel="noopener">react-hot-loader</a></p><p>安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add react-hot-loader --dev</span><br></pre></td></tr></table></figure><p>webpack.dev.js 如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line">// 引入html-webpack-plugin</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">const root = __dirname</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 入口文件</span><br><span class="line">  entry: [</span><br><span class="line">    &apos;react-hot-loader/patch&apos;, // 激活HMR</span><br><span class="line">    &apos;webpack-dev-server/client&apos;,</span><br><span class="line">    &apos;webpack/hot/only-dev-server&apos;,</span><br><span class="line">    path.resolve(root, &apos;src/main.js&apos;)</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &apos;bundle.js&apos;,</span><br><span class="line">    path: path.resolve(root, &apos;dist&apos;),</span><br><span class="line">    publicPath: &apos;/&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  // loaders</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;test: /\.jsx?$/, use: [&apos;babel-loader&apos;], exclude: /node_modules/&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: true, // 激活服务器的HMR</span><br><span class="line">    contentBase: path.resolve(root, &apos;dist&apos;),</span><br><span class="line">    publicPath: &apos;/&apos;,</span><br><span class="line">    port: 8080,</span><br><span class="line">    historyApiFallback: true</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: &apos;React Demo&apos;,</span><br><span class="line">      template: path.resolve(root, &apos;template.html&apos;)</span><br><span class="line">    &#125;),</span><br><span class="line">    new webpack.HotModuleReplacementPlugin(), // 热替换插件</span><br><span class="line">    new webpack.NamedModulesPlugin() // 执行热替换时打印模块名字</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如 热替换组件为 App ，在main.js 中加入相关热替换代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;</span><br><span class="line">import &#123;</span><br><span class="line">    AppContainer</span><br><span class="line">&#125; from &apos;react-hot-loader&apos;</span><br><span class="line">import App from &apos;./App&apos;</span><br><span class="line">const render = (App) =&gt; &#123;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;AppContainer&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/AppContainer&gt;,</span><br><span class="line">        document.getElementById(&apos;app&apos;)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render(App)</span><br><span class="line"></span><br><span class="line">if (module.hot) &#123;</span><br><span class="line">    module.hot.accept(&apos;./App&apos;, () =&gt; render(App))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要分三种实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;webpack 模块管理&lt;/li&gt;
&lt;li&gt;webpack 加入文件改动监听，自动编译刷新浏览器&lt;/li&gt;
&lt;li&gt;实现热替换 （MHR）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="react webpack2" scheme="https://lirawx.me/tags/react-webpack2/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC java config</title>
    <link href="https://lirawx.me/2017/11/spirngmvc-java-config.html"/>
    <id>https://lirawx.me/2017/11/spirngmvc-java-config.html</id>
    <published>2017-11-11T10:01:22.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-MVC-java-config"><a href="#spring-MVC-java-config" class="headerlink" title="spring MVC java config"></a>spring MVC java config</h1><h2 id="编程环境"><a href="#编程环境" class="headerlink" title="编程环境"></a>编程环境</h2><p>java 1.8<br>tomcat 8<br>spring 4.3.12.RELEASE<br>mybatis 3.4.0<br>mybatis-spring 1.3.0</p><h2 id="web-配置"><a href="#web-配置" class="headerlink" title="web 配置"></a>web 配置</h2><p>web.xml 配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>java config</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; RootConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="comment">// 制定配置类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; WebConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="comment">// 讲DispatcherServlet 映射到“/”</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; <span class="string">"/"</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        CharacterEncodingFilter characterEncodingFilter = <span class="keyword">new</span> CharacterEncodingFilter();</span><br><span class="line">        characterEncodingFilter.setEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        characterEncodingFilter.setForceEncoding(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//      //shiro</span></span><br><span class="line"><span class="comment">//      DelegatingFilterProxy delegatingFilterProxy = new DelegatingFilterProxy();</span></span><br><span class="line"><span class="comment">//      delegatingFilterProxy.setBeanName("shiroFilter");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Filter[] &#123; characterEncodingFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(ServletRegistration.Dynamic registration)</span> </span>&#123;</span><br><span class="line">        registration.setInitParameter(<span class="string">"throwExceptionIfNoHandlerFound"</span>, <span class="string">"true"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring-配置"><a href="#spring-配置" class="headerlink" title="spring 配置"></a>spring 配置</h2><p>xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"systemPropertiesModeName"</span> <span class="attr">value</span>=<span class="string">"SYSTEM_PROPERTIES_MODE_OVERRIDE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreResourceNotFound"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:config/config.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:config/shiro-config.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring/spring-mybatis.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>java config<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123; <span class="string">"com"</span> &#125;, excludeFilters = &#123;</span><br><span class="line">        <span class="meta">@Filter</span>(type = FilterType.ANNOTATION, value = EnableWebMvc.class) &#125;)</span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:config.properties"</span>, encoding = <span class="string">"utf-8"</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Import</span>(&#123; MybatisConfig.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RootConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="web-MVC"><a href="#web-MVC" class="headerlink" title="web MVC"></a>web MVC</h2><p>xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- json 处理  ie下载提示 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"stringHttpMessageConverter"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"fastJsonHttpMessageConverter"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描(自动注入) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- cache-period="315360000" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/images/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/imgs/**"</span> <span class="attr">location</span>=<span class="string">"/imgs/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/attachment/**"</span> <span class="attr">location</span>=<span class="string">"/attachment/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> <span class="attr">location</span>=<span class="string">"/css/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"springContextUtil"</span> <span class="attr">class</span>=<span class="string">"com.common.commonutil.runtime.SpringContextUtil"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这个一定得有，注意了，如果其他配置也有需要这个，已经配置了，那不必了 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- json 处理  ie下载提示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringHttpMessageConverter"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>java config<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * web 配置 替代springmvc xml servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AspectConfig.class&#125;)</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  jsp html view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//  @Bean</span></span><br><span class="line"><span class="comment">//  public ViewResolver viewResolver()&#123;</span></span><br><span class="line"><span class="comment">//      //jsp html view模板</span></span><br><span class="line"><span class="comment">//      InternalResourceViewResolver resolver = new InternalResourceViewResolver();</span></span><br><span class="line"><span class="comment">//      resolver.setPrefix("/admin/");</span></span><br><span class="line"><span class="comment">//      resolver.setSuffix(".html");</span></span><br><span class="line"><span class="comment">//      resolver.setExposeContextBeansAsAttributes(true);</span></span><br><span class="line"><span class="comment">//      return resolver;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//static resources</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">          registry.addResourceHandler(<span class="string">"/css/**"</span>).addResourceLocations(<span class="string">"/css/"</span>);</span><br><span class="line">          registry.addResourceHandler(<span class="string">"/img/**"</span>).addResourceLocations(<span class="string">"/img/"</span>);</span><br><span class="line">          registry.addResourceHandler(<span class="string">"/js/**"</span>).addResourceLocations(<span class="string">"/js/"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span></span>&#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单一 thymeleafview</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThymeleafViewResolver resolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">        resolver.setTemplateEngine(templateEngine());</span><br><span class="line">        resolver.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 多种视图并存</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public ContentNegotiatingViewResolver contentNegotiatingViewResolver()&#123;</span></span><br><span class="line"><span class="comment">//        ContentNegotiatingViewResolver cnv = new ContentNegotiatingViewResolver();</span></span><br><span class="line"><span class="comment">//        // Thymeleaf</span></span><br><span class="line"><span class="comment">//        List&lt;ViewResolver&gt; vrs = new ArrayList&lt;ViewResolver&gt;();</span></span><br><span class="line"><span class="comment">//        ThymeleafViewResolver thymelearfview = new ThymeleafViewResolver();</span></span><br><span class="line"><span class="comment">//        thymelearfview.setTemplateEngine(templateEngine());</span></span><br><span class="line"><span class="comment">//        thymelearfview.setCharacterEncoding("UTF-8");</span></span><br><span class="line"><span class="comment">//        String [] strs = new String[]&#123;"thy/*"&#125;;</span></span><br><span class="line"><span class="comment">//        thymelearfview.setViewNames(strs);</span></span><br><span class="line"><span class="comment">//        thymelearfview.setOrder(2);</span></span><br><span class="line"><span class="comment">//        //jsp 视图</span></span><br><span class="line"><span class="comment">//        InternalResourceViewResolver resolver = new InternalResourceViewResolver();</span></span><br><span class="line"><span class="comment">//          resolver.setPrefix("WEB-INF/");</span></span><br><span class="line"><span class="comment">//          resolver.setViewNames("jsp/*");</span></span><br><span class="line"><span class="comment">//          resolver.setExposeContextBeansAsAttributes(true);</span></span><br><span class="line"><span class="comment">//          resolver.setOrder(1);</span></span><br><span class="line"><span class="comment">//        vrs.add(thymelearfview);</span></span><br><span class="line"><span class="comment">////          vrs.add(resolver);</span></span><br><span class="line"><span class="comment">//        cnv.setViewResolvers(vrs);</span></span><br><span class="line"><span class="comment">//        return cnv;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> TemplateEngine <span class="title">templateEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpringTemplateEngine engine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">        engine.setEnableSpringELCompiler(<span class="keyword">true</span>);</span><br><span class="line">        engine.setTemplateResolver(templateResolver());</span><br><span class="line">        <span class="keyword">return</span> engine;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> ITemplateResolver <span class="title">templateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpringResourceTemplateResolver resolver = <span class="keyword">new</span> SpringResourceTemplateResolver();</span><br><span class="line">        resolver.setApplicationContext(applicationContext);</span><br><span class="line">        resolver.setPrefix(<span class="string">"/WEB-INF/thy/"</span>);</span><br><span class="line">        resolver.setSuffix(<span class="string">".html"</span>);</span><br><span class="line">        resolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * velocity</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"><span class="comment">//  @Bean</span></span><br><span class="line"><span class="comment">//    public ViewResolver viewResolver() &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      VelocityLayoutViewResolver bean = new VelocityLayoutViewResolver();</span></span><br><span class="line"><span class="comment">//        bean.setCache(true);</span></span><br><span class="line"><span class="comment">//        bean.setPrefix("/WEB-INF/views/");</span></span><br><span class="line"><span class="comment">//        bean.setLayoutUrl("/WEB-INF/layouts/layout.vm");</span></span><br><span class="line"><span class="comment">//        bean.setSuffix(".vm");</span></span><br><span class="line"><span class="comment">//        return bean;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public VelocityConfigurer velocityConfig() &#123;</span></span><br><span class="line"><span class="comment">//        VelocityConfigurer velocityConfigurer = new VelocityConfigurer();</span></span><br><span class="line"><span class="comment">//        velocityConfigurer.setResourceLoaderPath("/");</span></span><br><span class="line"><span class="comment">//        return velocityConfigurer;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义spring文件上传编码</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> CommonsMultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          CommonsMultipartResolver multipartResolver = <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">          multipartResolver.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">          <span class="keyword">return</span> multipartResolver;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//解析json返回数据</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> StringHttpMessageConverter <span class="title">stringHttpMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">          StringHttpMessageConverter shmc = <span class="keyword">new</span> StringHttpMessageConverter();</span><br><span class="line">          shmc.setSupportedMediaTypes(Arrays.asList(<span class="keyword">new</span> MediaType(<span class="string">"text"</span>, <span class="string">"plain"</span>, Charset.forName(<span class="string">"UTF-8"</span>))));</span><br><span class="line">          <span class="keyword">return</span> shmc;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span> HttpMessageConverter&lt;?&gt; fastJsonHttpMessageConverter4()&#123;</span><br><span class="line">          Feature[] features =&#123;Feature.AllowArbitraryCommas,</span><br><span class="line">                  Feature.AllowUnQuotedFieldNames,</span><br><span class="line">                  Feature.DisableCircularReferenceDetect&#125;;</span><br><span class="line">          FastJsonHttpMessageConverter4 fjtmc4 = <span class="keyword">new</span> FastJsonHttpMessageConverter4();</span><br><span class="line">          fjtmc4.setSupportedMediaTypes(Arrays.asList(<span class="keyword">new</span> MediaType(<span class="string">"text"</span>, <span class="string">"html"</span>, Charset.forName(<span class="string">"UTF-8"</span>))));</span><br><span class="line">          fjtmc4.setSupportedMediaTypes(Arrays.asList(<span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"json"</span>, Charset.forName(<span class="string">"UTF-8"</span>))));</span><br><span class="line">          FastJsonConfig fjc = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">          fjc.setFeatures(features);</span><br><span class="line">          fjc.setDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">          fjtmc4.setFastJsonConfig(fjc);</span><br><span class="line">          <span class="keyword">return</span> (HttpMessageConverter&lt;?&gt;) fjtmc4;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//json处理 解决ie下载提示</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        converters.add(stringHttpMessageConverter());</span><br><span class="line">        converters.add(fastJsonHttpMessageConverter4());</span><br><span class="line">        <span class="keyword">super</span>.configureMessageConverters(converters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis分页拦截器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.common.commonutil.pagehelper.PageInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java config<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:config.properties"</span>, encoding = <span class="string">"utf-8"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PropertySourcesPlaceholderConfigurer <span class="title">propertyConfigInDev</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=&#123;<span class="string">"writeDataSource"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">writeDataSource</span><span class="params">(Environment env)</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(env.getProperty(<span class="string">"db.write.driver"</span>));</span><br><span class="line">        dataSource.setUrl(env.getProperty(<span class="string">"db.write.url"</span>));</span><br><span class="line">        dataSource.setUsername(env.getProperty(<span class="string">"db.write.username"</span>));</span><br><span class="line">        dataSource.setPassword(env.getProperty(<span class="string">"db.write.password"</span>));</span><br><span class="line">        dataSource.setInitialSize(<span class="number">0</span>);</span><br><span class="line">        dataSource.setMaxActive(<span class="number">20</span>);</span><br><span class="line">        dataSource.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        dataSource.setMaxWait(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource.setFilters(<span class="string">"stat,log4j,wall"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            LoggerUtils.error(getClass(), e.getMessage());</span><br><span class="line">            <span class="comment">// e.printStackTrace();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name=&#123;<span class="string">"readDataSource"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">readDataSource</span><span class="params">(Environment env)</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(env.getProperty(<span class="string">"db.read.driver"</span>));</span><br><span class="line">        dataSource.setUrl(env.getProperty(<span class="string">"db.read.url"</span>));</span><br><span class="line">        dataSource.setUsername(env.getProperty(<span class="string">"db.read.username"</span>));</span><br><span class="line">        dataSource.setPassword(env.getProperty(<span class="string">"db.read.password"</span>));</span><br><span class="line">        dataSource.setInitialSize(<span class="number">0</span>);</span><br><span class="line">        dataSource.setMaxActive(<span class="number">20</span>);</span><br><span class="line">        dataSource.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        dataSource.setMaxWait(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource.setFilters(<span class="string">"stat,log4j,wall"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            LoggerUtils.error(getClass(), e.getMessage());</span><br><span class="line">            <span class="comment">// e.printStackTrace();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DynamicDataSource <span class="title">dataSource</span><span class="params">(@Qualifier(<span class="string">"readDataSource"</span>)</span> DruidDataSource readDataSource</span></span><br><span class="line"><span class="function">            ,@<span class="title">Qualifier</span><span class="params">(<span class="string">"writeDataSource"</span>)</span> DruidDataSource writeDataSource) </span>&#123;</span><br><span class="line">        DynamicDataSource dataSource = <span class="keyword">new</span> DynamicDataSource();</span><br><span class="line">        dataSource.setWriteDataSource(writeDataSource);</span><br><span class="line">        dataSource.setReadDataSource(readDataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DynamicDataSource dataSource) </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactory.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PathMatchingResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">            sqlSessionFactory.setMapperLocations(resolver.getResources(<span class="string">"classpath*:/mappers/**/*.xml"</span>));</span><br><span class="line">            sqlSessionFactory.setFailFast(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LoggerUtils.error(getClass(), <span class="string">"sqlsession"</span> + e.getMessage());</span><br><span class="line">            <span class="comment">// e.printStackTrace();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">scannerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MapperScannerConfigurer configurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">        configurer.setBasePackage(<span class="string">"com.**.**.mapper"</span>);</span><br><span class="line">        <span class="keyword">return</span> configurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DynamicDataSource dataSource) </span>&#123;</span><br><span class="line">        DataSourceTransactionManager tsm = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        tsm.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> tsm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mybatis 分页插件配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageHelper <span class="title">pageHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LoggerUtils.debug(getClass(), <span class="string">"MyBatisConfiguration.pageHelper()"</span>);</span><br><span class="line">        PageHelper pageHelper = <span class="keyword">new</span> PageHelper();</span><br><span class="line">        Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">        p.setProperty(<span class="string">"offsetAsPageNum"</span>, <span class="string">"true"</span>);</span><br><span class="line">        p.setProperty(<span class="string">"rowBoundsWithCount"</span>, <span class="string">"true"</span>);</span><br><span class="line">        p.setProperty(<span class="string">"reasonable"</span>, <span class="string">"true"</span>);</span><br><span class="line">        pageHelper.setProperties(p);</span><br><span class="line">        <span class="keyword">return</span> pageHelper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DynamicDataSourcePlugin <span class="title">dynamicDataSourcePlugin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DynamicDataSourcePlugin();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-MVC-java-config&quot;&gt;&lt;a href=&quot;#spring-MVC-java-config&quot; class=&quot;headerlink&quot; title=&quot;spring MVC java config&quot;&gt;&lt;/a&gt;spring MVC java conf
      
    
    </summary>
    
    
      <category term="spring MVC java config" scheme="https://lirawx.me/tags/spring-MVC-java-config/"/>
    
  </entry>
  
  <entry>
    <title>vue vuex vue-router 项目搭建</title>
    <link href="https://lirawx.me/2017/11/vue-vuex-vue-router.html"/>
    <id>https://lirawx.me/2017/11/vue-vuex-vue-router.html</id>
    <published>2017-11-01T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>node v6.11.2</li><li>vue v2.5.2</li><li>vue-router v3.0.1</li><li>vuex v3.0.1</li><li>wepack v3.6.0<br>…</li></ul><a id="more"></a><h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><p>基于cnode的api 初步搭建vue全家桶的单页应用.</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://ooo.0o0.ooo/2017/11/18/5a1013106434a.png" alt=""></p><h2 id="主要实现"><a href="#主要实现" class="headerlink" title="主要实现"></a>主要实现</h2><ul><li><p>vue-router的单页导航</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">主要基于<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">""</span><span class="attr">....</span>&gt;</span> 和$router.push 实现路由的导航</span><br></pre></td></tr></table></figure></li><li><p>vuex 存储用户登陆信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vuex配合sessionStorage 存储用户信息,方便管理.</span><br></pre></td></tr></table></figure></li><li><p>ajax请求封装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ajax运用 axios promise 封装. 处理错误信息.</span><br></pre></td></tr></table></figure></li></ul><h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p><img src="https://i.loli.net/2017/11/18/5a10141eb5195.png" alt=""></p><h2 id="github-地址"><a href="#github-地址" class="headerlink" title="github 地址"></a>github 地址</h2><p><a href="https://github.com/lirawx/Crazy_FED/tree/master/vue/cnode" target="_blank" rel="noopener">cnode</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;node v6.11.2&lt;/li&gt;
&lt;li&gt;vue v2.5.2&lt;/li&gt;
&lt;li&gt;vue-router v3.0.1&lt;/li&gt;
&lt;li&gt;vuex v3.0.1&lt;/li&gt;
&lt;li&gt;wepack v3.6.0&lt;br&gt;…&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="vue vuex vue-router" scheme="https://lirawx.me/tags/vue-vuex-vue-router/"/>
    
  </entry>
  
  <entry>
    <title>ES5 学习笔记</title>
    <link href="https://lirawx.me/2017/10/22/ES5(01).html"/>
    <id>https://lirawx.me/2017/10/22/ES5(01).html</id>
    <published>2017-10-22T10:01:22.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Template-Strings"><a href="#Template-Strings" class="headerlink" title="Template Strings"></a>Template Strings</h2><p>模板语言魔法糖</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Basic literal string creation</span></span><br><span class="line"><span class="string">`This is a pretty little template string.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Multiline strings</span></span><br><span class="line"><span class="string">`In ES5 this is</span></span><br><span class="line"><span class="string"> not legal.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Interpolate variable bindings</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Unescaped template strings</span></span><br><span class="line"><span class="built_in">String</span>.raw<span class="string">`In ES5 "\n" is a line-feed.`</span></span><br></pre></td></tr></table></figure><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p>异步编程库</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">duration = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(resolve, duration);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = timeout(<span class="number">1000</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"hmm"</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all([timeout(<span class="number">100</span>), timeout(<span class="number">200</span>)]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>模块化</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib/math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.141593</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">"lib/math"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2π = "</span> + math.sum(math.pi, math.pi));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Template-Strings&quot;&gt;&lt;a href=&quot;#Template-Strings&quot; class=&quot;headerlink&quot; title=&quot;Template Strings&quot;&gt;&lt;/a&gt;Template Strings&lt;/h2&gt;&lt;p&gt;模板语言魔法糖&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="es5 javascript" scheme="https://lirawx.me/tags/es5-javascript/"/>
    
  </entry>
  
  <entry>
    <title>mysql 日期零错误处理</title>
    <link href="https://lirawx.me/2017/10/13/2017-10-13-msyql-zero.html"/>
    <id>https://lirawx.me/2017/10/13/2017-10-13-msyql-zero.html</id>
    <published>2017-10-13T10:01:22.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="情景简介"><a href="#情景简介" class="headerlink" title="情景简介"></a>情景简介</h2><p>当我们从低版本数据库向高版本的数据库转入数据时经常性的会遇到不能为零的错误提示<br>比如5.6 到 5.7.</p><p>5.7 默认启用了strict mode,不支持‘0000-00-00：00:00:00’的日期类型的插入添加.</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li>1.java 或者其他语言链接时加参数</li></ul><p>连接数据库转化为对象出错的解决办法为在数据库连接后面加上参数zeroDateTimeBehavior=convertToNull 这样如果碰到 ‘0000-00-00：00:00:00’的日期类型时，将会转化为null值.</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.jdbcurl=jdbc:mysql://192.168.1.52:3306/db?characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span><br></pre></td></tr></table></figure><ul><li>2.针对数据插入数据‘0000-00-00：00:00:00’ 数据本身不接受的解决办法为</li></ul><p>  1、首先查询出数据库现有的模式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select @@sql_mode;</span><br></pre></td></tr></table></figure><pre><code>2、把NO_ZERO_IN_DATE,NO_ZERO_DATE去掉，然后重新设置</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET GLOBAL sql_mode = &apos;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;情景简介&quot;&gt;&lt;a href=&quot;#情景简介&quot; class=&quot;headerlink&quot; title=&quot;情景简介&quot;&gt;&lt;/a&gt;情景简介&lt;/h2&gt;&lt;p&gt;当我们从低版本数据库向高版本的数据库转入数据时经常性的会遇到不能为零的错误提示&lt;br&gt;比如5.6 到 5.7.&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://lirawx.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>svn 命令行的使用</title>
    <link href="https://lirawx.me/2017/10/12/2017-10-12-svn.html"/>
    <id>https://lirawx.me/2017/10/12/2017-10-12-svn.html</id>
    <published>2017-10-12T10:01:22.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>svn 是公司比较正式和熟练的版本控制软件系统.所以熟练使用svn是必要的,win下的话tortiseSVN基本就够了,跟eclipse插件Subversion也很搭.虽然很卡,凑合用把.同时作为一个程序员,不免要在linux下操作svn,本文是svn客户端的使用.</code></pre><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>centos 7</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y subversion</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="svn-import"><a href="#svn-import" class="headerlink" title="svn import"></a>svn import</h3><p>常用于第一次提交</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">svn import Armatrue http://192.168.0.249/svn/ninjiaSourceCode/trunk/Armatrue --username=xiaohuang --password=123456 -m &quot;import new project&quot;</span><br></pre></td></tr></table></figure><h3 id="svn-checkout"><a href="#svn-checkout" class="headerlink" title="svn checkout"></a>svn checkout</h3><p>svn checkout path（path是服务器上的目录）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：svn checkout svn://192.168.1.1/pro/domain</span><br><span class="line">简写：svn co</span><br></pre></td></tr></table></figure></p><h3 id="svn-commit"><a href="#svn-commit" class="headerlink" title="svn commit"></a>svn commit</h3><p>svn commit -m “LogMessage“ [-N] [–no-unlock] PATH　(如果选择了保持锁，就使用–no-unlock开关)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">　　svn commit -m “add test file for my test“ test.php</span><br><span class="line"> 简写：</span><br><span class="line">　　svn ci</span><br></pre></td></tr></table></figure></p><h3 id="svn-clean-up"><a href="#svn-clean-up" class="headerlink" title="svn clean up"></a>svn clean up</h3><p>可以解除lock状态</p><h3 id="svn-update"><a href="#svn-update" class="headerlink" title="svn update"></a>svn update</h3><p>更新服务器版本</p><h3 id="svn-ignore"><a href="#svn-ignore" class="headerlink" title="svn ignore"></a>svn ignore</h3><p>若想创建了一个文件夹，并且把它加入版本控制，但忽略文件夹中的所有文件的内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">svn mkdir spool</span><br><span class="line">svn propset svn:ignore &apos;*&apos; spool</span><br><span class="line">svn ci -m &apos;Adding &quot;spool&quot; and ignoring its contents.&apos;</span><br></pre></td></tr></table></figure><p>若想创建一个文件夹，但不加入版本控制，即忽略这个文件夹：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir spool</span><br><span class="line">svn propset svn:ignore &apos;spool&apos; .</span><br><span class="line">svn ci -m &apos;Ignoring a directory called &quot;spool&quot;.&apos;</span><br></pre></td></tr></table></figure><p>若已经创建了文件夹，并加入了版本控制，现在想忽略这个文件夹，但要保持文件夹的内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">svn export spool spool-tmp</span><br><span class="line">svn rm spool</span><br><span class="line">svn ci -m &apos;Removing inadvertently added directory &quot;spool&quot;.&apos;</span><br><span class="line">mv spool-tmp spool</span><br><span class="line">svn propset svn:ignore &apos;spool&apos; .</span><br><span class="line">svn ci -m &apos;Ignoring a directory called &quot;spool&quot;.&apos;</span><br></pre></td></tr></table></figure><h2 id="svn添加所有新添加的文件"><a href="#svn添加所有新添加的文件" class="headerlink" title="svn添加所有新添加的文件"></a>svn添加所有新添加的文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">svn st | grep &apos;^\?&apos; | tr &apos;^\?&apos; &apos; &apos; | sed &apos;s/[ ]*//&apos; | sed &apos;s/[ ]/\\ /g&apos; | xargs svn add</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">svn st | awk &apos;&#123;if ( $1 == &quot;?&quot;) &#123; print $2&#125;&#125;&apos; | xargs svn add</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;svn 是公司比较正式和熟练的版本控制软件系统.所以熟练使用svn是必要的,win下的话tortiseSVN基本就够了,跟e
      
    
    </summary>
    
    
      <category term="svn" scheme="https://lirawx.me/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>travis ci 持续集成</title>
    <link href="https://lirawx.me/2017/10/01/2017-10-01-travis%20ci%20%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90.html"/>
    <id>https://lirawx.me/2017/10/01/2017-10-01-travis ci 持续集成.html</id>
    <published>2017-10-01T16:42:18.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事故起因"><a href="#事故起因" class="headerlink" title="事故起因"></a>事故起因</h2><p>我想再github pages 上发布hexo博客.然后自己又很懒,不想每次都再hexo -g; hexo -d等命令.然后又想再issues上写博客,真的很方便.虽然别人可以自由无线评论,但是世界本来就是开放的,这样也无可厚非.</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>travis 可以又nodejs的环境.所有我就打算用nodejs脚本,根据github的api,获取到issues.然后手动下载到./source/_posts目录下.然后通过一系列命令,发布到gh-pages上.</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="下载issues的主要js代码"><a href="#下载issues的主要js代码" class="headerlink" title="下载issues的主要js代码."></a>下载issues的主要js代码.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request(options, function (error, response, body) &#123;</span><br><span class="line">    if (!error &amp;&amp; response.statusCode == 200) &#123;</span><br><span class="line">        var data = JSON.parse(body);</span><br><span class="line">        for (iss in data)&#123;</span><br><span class="line">            if(data[iss].state==&apos;open&apos;)&#123;</span><br><span class="line"></span><br><span class="line">                var article = &apos;&apos;;</span><br><span class="line">                article+=&apos;---\n&apos;;</span><br><span class="line">                article+=&apos;layout: post\n&apos;;</span><br><span class="line">                article+=&apos;tags: &apos;+getTags(data[iss].labels)+&apos;\n&apos;;</span><br><span class="line">                article+=&apos;title: &apos;+data[iss].title+&apos;\n&apos;;</span><br><span class="line">                article+=&apos;date: &apos;+data[iss].created_at+&apos;\n&apos;;</span><br><span class="line">                article+=&apos;---\n\n&apos;;</span><br><span class="line">                article+=data[iss].body;</span><br><span class="line">                var fN = getFileName(data[iss].created_at,data[iss].title);</span><br><span class="line">                var filePath =calFilePath(data[iss].created_at,fN);</span><br><span class="line">                if(!fsExistsSync(filePath))&#123;</span><br><span class="line"></span><br><span class="line">                   mkdirsSync(filePath);</span><br><span class="line">                    var out = fs.createWriteStream(filePath+fN,&#123;encoding:&apos;utf-8&apos;,&apos;flag&apos;: &apos;a&apos;&#125;);</span><br><span class="line">                    out.write(article);</span><br><span class="line">                    out.end();</span><br><span class="line">                    console.log(fN+&apos;----- 已经写入&apos;);</span><br><span class="line">                &#125;else if(!fsExistsSync(filePath+fN))&#123;</span><br><span class="line">                    var outs = fs.createWriteStream(filePath+fN,&#123;encoding:&apos;utf-8&apos;,&apos;flag&apos;: &apos;a&apos;&#125;);</span><br><span class="line">                    outs.write(article);</span><br><span class="line">                    outs.end();</span><br><span class="line">                    console.log(fN+&apos;----- 已经写入&apos;);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    console.log(fN+&apos;----- 已经存在&apos;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中request的option 如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var options = &#123;</span><br><span class="line">    url: &apos;https://api.github.com/repos/lirawx/mirror/issues&apos;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36&apos;,</span><br><span class="line">        &apos;Host&apos;:&apos;api.github.com&apos;,</span><br><span class="line">        &apos;DNT&apos;:&apos;1&apos;,</span><br><span class="line">        &apos;If-None-Match&apos;:&apos;W/&quot;074817d16634c58050520f5c85690abf&quot;&apos;,</span><br><span class="line">        &apos;Upgrade-Insecure-Requests&apos;:&apos;1&apos;,</span><br><span class="line">        &apos;Cache-Control&apos;:&apos;0&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>可以参考,具体请前往<a href="https://developer.github.com/v3/repos/" target="_blank" rel="noopener">https://developer.github.com/v3/repos/</a></p></blockquote><h2 id="travis-ci-配置文件"><a href="#travis-ci-配置文件" class="headerlink" title="travis ci 配置文件"></a>travis ci 配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js: stable</span><br><span class="line"></span><br><span class="line"># S: Build Lifecycle</span><br><span class="line">install:</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#before_script:</span><br><span class="line"> # - npm install -g gulp</span><br><span class="line">#node genmd.js</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - node genmd.js</span><br><span class="line">  - hexo g</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  - cd ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name &quot;xxxx&quot;</span><br><span class="line">  - git config user.email &quot;xxxx@xxxx.xxxx&quot;</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -a -m &quot;Update posts&quot;</span><br><span class="line">  - git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:xxxxx</span><br><span class="line">  - cd ..</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name &quot;xxxxx&quot;</span><br><span class="line">  - git config user.email &quot;xxxx@xxxx.com&quot;</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -a -m &quot;Update source&quot;</span><br><span class="line">  - git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:xxxxx</span><br><span class="line"># E: Build LifeCycle</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - xxxxx</span><br><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   - GH_REF: github.com/xxxx/xxxx.git</span><br></pre></td></tr></table></figure><blockquote><p>注意我是一个git仓库,两个不同的分支,一个source分支, 一个master分支,source方源代码,master放gh-pages.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事故起因&quot;&gt;&lt;a href=&quot;#事故起因&quot; class=&quot;headerlink&quot; title=&quot;事故起因&quot;&gt;&lt;/a&gt;事故起因&lt;/h2&gt;&lt;p&gt;我想再github pages 上发布hexo博客.然后自己又很懒,不想每次都再hexo -g; hexo -d等命令.然后
      
    
    </summary>
    
    
      <category term="gh-pages git nodejs Travis CI" scheme="https://lirawx.me/tags/gh-pages-git-nodejs-Travis-CI/"/>
    
  </entry>
  
  <entry>
    <title>centos 下php拓展的安装</title>
    <link href="https://lirawx.me/2017/10/php-extension.html"/>
    <id>https://lirawx.me/2017/10/php-extension.html</id>
    <published>2017-10-01T10:01:22.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>php 安装目录 /usr/local/php<br>php 源码目录  /home/xxx/php-5.6.22<br>OS centos 7</p><h2 id="phpize-编译安装拓展"><a href="#phpize-编译安装拓展" class="headerlink" title="phpize 编译安装拓展"></a>phpize 编译安装拓展</h2><p>phpize 需要进入php源码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /home/xxx/php-5.6.22/ext/openssl</span><br></pre></td></tr></table></figure><p>然后运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/php/bin/phpize</span><br></pre></td></tr></table></figure></p><p>此时会生成configure文件</p><p>然后执行安装配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --with-php-config=/usr/local/php/bin/php-config --with-openssl</span><br></pre></td></tr></table></figure></p><p>这边注意php-config位置路径</p><p>最后<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><h2 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><p>php -m</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;p&gt;php 安装目录 /usr/local/php&lt;br&gt;php 源码目录  /home/xxx/php-5.6.22&lt;br&gt;O
      
    
    </summary>
    
    
      <category term="centos php openssl" scheme="https://lirawx.me/tags/centos-php-openssl/"/>
    
  </entry>
  
  <entry>
    <title>记阿里云上线php项目</title>
    <link href="https://lirawx.me/2017/10/01.html"/>
    <id>https://lirawx.me/2017/10/01.html</id>
    <published>2017-10-01T10:01:22.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>阿里云ESC<br>2G 4M<br>centos 7</p><h2 id="搭建lamp"><a href="#搭建lamp" class="headerlink" title="搭建lamp"></a>搭建lamp</h2><p>这里使用脚本编译安装</p><p> 安装LNMP执行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -c http://soft.vpser.net/lnmp/lnmp1.3-full.tar.gz &amp;&amp; tar zxf lnmp1.3-full.tar.gz &amp;&amp; cd lnmp1.3-full &amp;&amp; ./install.sh lamp</span><br></pre></td></tr></table></figure></p><p>默认安装lnmp可不写，如需要安装LNMPA或LAMP，将./install.sh 后面的参数替换为lnmpa或lnmp即可。</p><h2 id="安装选项"><a href="#安装选项" class="headerlink" title="安装选项"></a>安装选项</h2><p>因项目需要其中安装选项:</p><ul><li>1.设置mysql密码</li><li><ol><li>安装InnoDB 最好安装</li></ol></li><li>3.Mysql 版本选择5.6</li><li>4.php选择5.6.22</li><li>5.Memory Allocator,我没有安装</li><li>6.Administrator Email 选填</li><li>7.apache 选2.2</li></ul><p>然后脚本会自动运行.</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>如果显示 Nginx: OK，MySQL: OK，PHP: OK<br>那么就成功了.最后脚本默认会修改防火墙,我这边貌似会有问题.我自己把它的删掉了,替换成我自己的.</p><h2 id="etc-sysconfig-iptables"><a href="#etc-sysconfig-iptables" class="headerlink" title="/etc/sysconfig/iptables"></a>/etc/sysconfig/iptables</h2><p>如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:INPUT DROP [5:1411]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [72:10550]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 3306 -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 6379 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 3690 -j ACCEPT</span><br></pre></td></tr></table></figure></p><h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p>这个最重要的一步,我就是这一步没有重视,导致我重新装了一遍.头的大了.</p><blockquote></blockquote><p>1.项目需要安装一些php拓展</p><ol><li>将目录权限改为www<br>chown www:www -R /path/to/dir 对网站目录进行权限设置</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建环境&quot;&gt;&lt;a href=&quot;#搭建环境&quot; class=&quot;headerlink&quot; title=&quot;搭建环境&quot;&gt;&lt;/a&gt;搭建环境&lt;/h2&gt;&lt;p&gt;阿里云ESC&lt;br&gt;2G 4M&lt;br&gt;centos 7&lt;/p&gt;
&lt;h2 id=&quot;搭建lamp&quot;&gt;&lt;a href=&quot;#搭建la
      
    
    </summary>
    
    
      <category term="centos lamp cms" scheme="https://lirawx.me/tags/centos-lamp-cms/"/>
    
  </entry>
  
  <entry>
    <title>java SSM框架的搭建</title>
    <link href="https://lirawx.me/2017/08/05/2017-08-05-java%20SSM%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA.html"/>
    <id>https://lirawx.me/2017/08/05/2017-08-05-java SSM框架的搭建.html</id>
    <published>2017-08-05T13:27:50.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构:"></a>目录结构:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├─src</span><br><span class="line">│  │  applicationContext.xml</span><br><span class="line">│  │  jdbc.properties</span><br><span class="line">│  │  springmvc.xml</span><br><span class="line">│  │  sqlMapConfig.xml</span><br><span class="line">│  │  </span><br><span class="line">│  ├─controller</span><br><span class="line">│  │      UserController.java</span><br><span class="line">│  │      </span><br><span class="line">│  ├─mapper</span><br><span class="line">│  │      UserMapper.java</span><br><span class="line">│  │      </span><br><span class="line">│  ├─pojo</span><br><span class="line">│  │      User.java</span><br><span class="line">│  │      UserMapper.xml</span><br><span class="line">│  │      </span><br><span class="line">│  └─service</span><br><span class="line">│          UserService.java</span><br><span class="line">│          UserServiceImpl.java</span><br><span class="line">│          </span><br><span class="line">└─WebContent</span><br><span class="line">    │  index.jsp</span><br><span class="line">    │  </span><br><span class="line">    ├─META-INF</span><br><span class="line">    │      MANIFEST.MF</span><br><span class="line">    │      </span><br><span class="line">    └─WEB-INF</span><br><span class="line">        │  userList.jsp</span><br><span class="line">        │  web.xml</span><br><span class="line">        │  </span><br><span class="line">        └─lib</span><br><span class="line">                aopalliance-1.0.jar</span><br><span class="line">                asm-3.3.1.jar</span><br><span class="line">                c3p0-0.9.0.jar</span><br><span class="line">                cglib-2.2.2.jar</span><br><span class="line">                com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</span><br><span class="line">                commons-fileupload-1.2.2.jar</span><br><span class="line">                commons-io-2.0.1.jar</span><br><span class="line">                commons-logging-1.1.1.jar</span><br><span class="line">                ehcache-core-2.6.5.jar</span><br><span class="line">                javassist-3.17.1-GA.jar</span><br><span class="line">                jstl-1.2.jar</span><br><span class="line">                junit-4.9.jar</span><br><span class="line">                log4j-1.2.17.jar</span><br><span class="line">                mybatis-3.2.2.jar</span><br><span class="line">                mybatis-ehcache-1.0.2.jar</span><br><span class="line">                mybatis-spring-1.2.0.jar</span><br><span class="line">                mysql-connector-java-5.1.28-bin.jar</span><br><span class="line">                ojdbc6-11.1.0.7.0.jar</span><br><span class="line">                slf4j-api-1.7.5.jar</span><br><span class="line">                slf4j-log4j12-1.7.5.jar</span><br><span class="line">                spring-aop-3.2.3.RELEASE.jar</span><br><span class="line">                spring-aspects-3.2.3.RELEASE.jar</span><br><span class="line">                spring-beans-3.2.3.RELEASE.jar</span><br><span class="line">                spring-context-3.2.3.RELEASE.jar</span><br><span class="line">                spring-context-support-3.2.3.RELEASE.jar</span><br><span class="line">                spring-core-3.2.3.RELEASE.jar</span><br><span class="line">                spring-expression-3.2.3.RELEASE.jar</span><br><span class="line">                spring-jdbc-3.2.3.RELEASE.jar</span><br><span class="line">                spring-test-3.2.3.RELEASE.jar</span><br><span class="line">                spring-tx-3.2.3.RELEASE.jar</span><br><span class="line">                spring-web-3.2.3.RELEASE.jar</span><br><span class="line">                spring-webmvc-3.2.3.RELEASE.jar</span><br></pre></td></tr></table></figure><h2 id="主要配置文件为"><a href="#主要配置文件为" class="headerlink" title="主要配置文件为:"></a>主要配置文件为:</h2><ul><li>sqlMapConfig.xml  mybatis配置</li><li>springmvc.xml springMVC配置</li><li>applicationContext.xml spring容器配置</li><li>jdbc.properties   数据相关配置<blockquote><p>当然为了调试方便,可以加入log4j配置,输出debug信息<br>log4j.properties</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG, Console</span><br><span class="line">#Console</span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n</span><br><span class="line">log4j.logger.java.sql.ResultSet=INFO</span><br><span class="line">log4j.logger.org.apache=INFO</span><br><span class="line">log4j.logger.java.sql.Connection=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构:&quot;&gt;&lt;/a&gt;目录结构:&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="Mybatis Spring SpringMVC SSM" scheme="https://lirawx.me/tags/Mybatis-Spring-SpringMVC-SSM/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu使用dnsmasq作本地DNS缓存</title>
    <link href="https://lirawx.me/2017/07/23/2017-07-23-Ubuntu%E4%BD%BF%E7%94%A8dnsmasq%E4%BD%9C%E6%9C%AC%E5%9C%B0DNS%E7%BC%93%E5%AD%98.html"/>
    <id>https://lirawx.me/2017/07/23/2017-07-23-Ubuntu使用dnsmasq作本地DNS缓存.html</id>
    <published>2017-07-23T02:06:56.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>使用dnsmasq解决dns劫持，dns污染等问题</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install dnsmasq</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="修改-etc-resolv-conf文件"><a href="#修改-etc-resolv-conf文件" class="headerlink" title="修改/etc/resolv.conf文件"></a>修改/etc/resolv.conf文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>将原有的内容全部注释，然后在第一行写上<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nameserver 127.0.0.1</span><br></pre></td></tr></table></figure></p><h3 id="在-etc目录下新建resolv-dnsmasq文件"><a href="#在-etc目录下新建resolv-dnsmasq文件" class="headerlink" title="在/etc目录下新建resolv.dnsmasq文件"></a>在/etc目录下新建resolv.dnsmasq文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#local</span><br><span class="line">nameserver 127.0.0.1</span><br><span class="line">#pbulic+</span><br><span class="line">nameserver 119.29.29.29</span><br><span class="line">#v2ex</span><br><span class="line">nameserver 178.79.131.110</span><br><span class="line">#alibaba</span><br><span class="line">nameserver 223.5.5.5</span><br><span class="line">#onedns</span><br><span class="line">nameserver 112.124.47.27</span><br><span class="line">#dnspod dns+</span><br><span class="line">nameserver 182.254.116.116</span><br><span class="line">#114</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">#google2</span><br><span class="line">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure><h3 id="编辑“-etc-dnsmasq-conf”文件"><a href="#编辑“-etc-dnsmasq-conf”文件" class="headerlink" title="编辑“/etc/dnsmasq.conf”文件"></a>编辑“/etc/dnsmasq.conf”文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/dnsmasq.conf</span><br></pre></td></tr></table></figure><p>将resolv-file=放开注释<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resolv-file=/etc/resolv.dnsmasq</span><br></pre></td></tr></table></figure></p><h3 id="编辑-etc-dhcp-dhclient-conf"><a href="#编辑-etc-dhcp-dhclient-conf" class="headerlink" title="编辑 /etc/dhcp/dhclient.conf"></a>编辑 /etc/dhcp/dhclient.conf</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/dhcp3/dhclient.conf</span><br></pre></td></tr></table></figure><blockquote><p>找到下面这一项 #prepend domain-name-servers 127.0.0.1将前面的“#”删除。这么做的目的是为了在使用自动连接时，能在/etc/resolv.conf文件的第一行添加上“nameserver 127.0.0.1”，这样，dns缓存依然有效。</p></blockquote><h3 id="编辑-etc-default-dnsmasq"><a href="#编辑-etc-default-dnsmasq" class="headerlink" title="编辑 etc/default/dnsmasq"></a>编辑 etc/default/dnsmasq</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/default/dnsmasq</span><br></pre></td></tr></table></figure><blockquote><p> 找到IGNORE_RESOLVCONF=yes，这一条要删除注释，删掉#号</p></blockquote><h2 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service dnsmasq restart</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果:"></a>测试结果:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dig google.com</span><br></pre></td></tr></table></figure><blockquote><p>两次返回结果的时间不一样，第二次一般是0ms；多试几个网址，证明成功了。</p></blockquote><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>ubuntu 16.04.<br>Raspberry Pi 2 B+</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用dnsmasq解决dns劫持，dns污染等问题&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="https://lirawx.me/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>初爱</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-%E5%88%9D%E7%88%B1.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-初爱.html</id>
    <published>2017-07-05T05:13:30.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>阶前初见，也似重逢。<br>  粉罗裙，青丝绾，<br>  眉眼情浓，<br>  羞脸粉红生。<br>  长街长，短亭短，<br>  细语呢哝娇做嗔，<br>  膝枕春风稍歇。<br>  梦呓酒醒空屏，<br>  飞雨沾湿罗衣。</p></blockquote><h5 id="2016-04-20"><a href="#2016-04-20" class="headerlink" title="2016-04-20"></a>2016-04-20</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;阶前初见，也似重逢。&lt;br&gt;  粉罗裙，青丝绾，&lt;br&gt;  眉眼情浓，&lt;br&gt;  羞脸粉红生。&lt;br&gt;  长街长，短亭短，&lt;br&gt;  细语呢哝娇做嗔，&lt;br&gt;  膝枕春风稍歇。&lt;br&gt;  梦呓酒醒空屏，&lt;br&gt;  飞雨沾湿罗衣。&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
    
      <category term="2B青年 poem 文艺" scheme="https://lirawx.me/tags/2B%E9%9D%92%E5%B9%B4-poem-%E6%96%87%E8%89%BA/"/>
    
  </entry>
  
  <entry>
    <title>关山月</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-%E5%85%B3%E5%B1%B1%E6%9C%88.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-关山月.html</id>
    <published>2017-07-05T05:12:16.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>去年此门中，<br>  庭榭旧时，<br>  春光三月老，<br>  人面何处？<br>  一时蝶儿舞，<br>  尽付深情，<br>  挽袖荷花香，<br>  半塘婷婷，<br>  信步闲庭晚，<br>  鸣婵炎炎，<br>  将心与你心，<br>  盈盈笑语，<br>  几多情许卿？<br>  怎堪回首，<br>  别时敬亭山，<br> 《关山月》同。</p></blockquote><h5 id="2016-03-13"><a href="#2016-03-13" class="headerlink" title="2016-03-13"></a>2016-03-13</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;去年此门中，&lt;br&gt;  庭榭旧时，&lt;br&gt;  春光三月老，&lt;br&gt;  人面何处？&lt;br&gt;  一时蝶儿舞，&lt;br&gt;  尽付深情，&lt;br&gt;  挽袖荷花香，&lt;br&gt;  半塘婷婷，&lt;br&gt;  信步闲庭晚，&lt;br&gt;  鸣婵炎炎，&lt;br&gt;  将心与你心，&lt;br
      
    
    </summary>
    
    
      <category term="2B青年 poem 文艺" scheme="https://lirawx.me/tags/2B%E9%9D%92%E5%B9%B4-poem-%E6%96%87%E8%89%BA/"/>
    
  </entry>
  
  <entry>
    <title>雪中歌</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-%E9%9B%AA%E4%B8%AD%E6%AD%8C.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-雪中歌.html</id>
    <published>2017-07-05T05:11:05.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>雪一场，梦呓回，听歌几时，欲听还休，欲听还休，再从头，列表循环，又一年，<br>人在，情在，有歌有诗，有美酒，一切都是最好的安排。</p></blockquote><h5 id="2016-01-14"><a href="#2016-01-14" class="headerlink" title="2016-01-14"></a>2016-01-14</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;雪一场，梦呓回，听歌几时，欲听还休，欲听还休，再从头，列表循环，又一年，&lt;br&gt;人在，情在，有歌有诗，有美酒，一切都是最好的安排。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;2016-01-14&quot;&gt;&lt;a href=&quot;#2016-01-14
      
    
    </summary>
    
    
      <category term="2B青年 poem 文艺" scheme="https://lirawx.me/tags/2B%E9%9D%92%E5%B9%B4-poem-%E6%96%87%E8%89%BA/"/>
    
  </entry>
  
  <entry>
    <title>对未来的思考</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-%E5%AF%B9%E6%9C%AA%E6%9D%A5%E7%9A%84%E6%80%9D%E8%80%83.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-对未来的思考.html</id>
    <published>2017-07-05T05:10:32.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>怪我多喝一包咖啡，到现在都没有睡着，想了很多，很少有这时候独自思考这么多了，或许不曾孤独如此良久。我再想以后我到底会怎么样，有什么爱好，有什么工作，又怎么样过好自己的生活，说不定单身一直，也说不定已经携伊人的手了。<a id="more"></a>仔细的回想了以前的以前，久到小学可能，一直喜欢笛子啊，之类的，特别中意武侠，手持一支笛子，背负一把长剑，帅气。可能是自己身为中国人深深的继承了中国古老的传统也不一定。或许我以后应该学着吹下笛子，小时候直到现在都不知道自己喜欢什么，会做什么，很多都是凭感觉，觉得挺好就挺好，太过随意了现在觉得。太过飘忽不定，我觉得起码现在我应该要确定以及肯定一下自己以后的发展道路了。<br>或许是分手之后长长的空虚寂寞区间，让我也反思了许多。身在21世纪，我却许多次想摆脱这个浮华的世纪带快我的脚步，拒绝微信，拒绝qq，拒绝淘宝之类过激的举动，现在一一妥协，慢慢融入自己的生活，当然问题当然不是变与不变，与加速度一样，身在这个社会怎么可能逃过物理法则。我想说的是这些过快的浮华和过多的诱惑导致我如今不知道该如何是好，一路走来，磕磕绊绊，迷雾重重，会掩盖本来的面目。想来我已经谈了三次主要的恋爱，第一次记住了一个名字，第二次记住了一个qq号，第三次记住了一个电话号码，三次都不能释怀，三次让我也成长了不少。曾经看过读者，记得有一篇文章写，幸福需要等，不要急着去寻找。三次我都以为是上天给我的暗示，我成功的把握住了，期间我也体会到了什么事爱，爱一个人的感觉无论隔着多远，多久，心总是充满热量，激动愉悦，面对所爱的人，那一刻你觉得世界那么美好，美好到今生只为遇见你。然而第二个女友问我：当激情褪去，你还会爱她么？我竟然无言以对，或许只是头脑里激素的一阵悸动，分泌失调。我这样逃避自己和她。我意识到自己善变到了精神都不正常的地步，经常强迫自己还有别人跟自己头脑里的印象重合，每个人都必须和自己投影是一致的，不一致要修正，感觉自己就是上帝一样，谁都是有罪的，都必须向自己赎罪。所以我要告诉自己要保持谦卑，要保持好奇心，要懂得尊敬，要保持希望，要永远乐观，还要一直学习新的东西，最后最重要的要坚持下去。<br>我觉得父母给我最好的教育就是没有限制我的可能性，我也表现的很懂事，当然现在远在家外，我也很少联系他们，但是我知道我是爱他们的，家庭给我最大的最好的就是要读书，我一直保持着对读书的渴望，不读书总会有一种莫名的愧疚感。我觉得这一生都无法改变这一习惯。这一切都来自我的家庭教育。上高中之前可以说是为父母他们读书，那么上大学必须要为自己读书了，大一我确定是为自己读书，尝试了很多不同的东西，然而还是被自己的原则全都否决了，退掉所有社团，推掉所有的责任，一个人独自的玩耍，导致大二被大学上了一年。大三我觉得我要吧大学上一遍才行。<br>我想了想自己的计划，我想看书时必要的，其次还得练字，行书吧，楷书已经不适合我了。保留自己文艺气息，保持自己的审美。大学毕业不要马上工作，我想去外面走走，见见除开景区以外的世界。比如台湾，比如苏州，比如日本。可以打工换食宿在国内，其他的就只能攒钱了。我想以后要开一家不一样的书店，可以加上现代的科技，互联网之类的元素。先想到这里吧。</p><h4 id="2015-10-25"><a href="#2015-10-25" class="headerlink" title="2015-10-25"></a>2015-10-25</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;怪我多喝一包咖啡，到现在都没有睡着，想了很多，很少有这时候独自思考这么多了，或许不曾孤独如此良久。我再想以后我到底会怎么样，有什么爱好，有什么工作，又怎么样过好自己的生活，说不定单身一直，也说不定已经携伊人的手了。
    
    </summary>
    
    
      <category term="日记" scheme="https://lirawx.me/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>谁说的青春无悔</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-%E8%B0%81%E8%AF%B4%E7%9A%84%E9%9D%92%E6%98%A5%E6%97%A0%E6%82%94.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-谁说的青春无悔.html</id>
    <published>2017-07-05T05:09:48.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>谁说的青春无悔，我怎么天天都在回望昨日一往情深，不懂什么是爱，现在已经麻木了，何人还爱，何人敢爱，又有谁来爱我。口口声声不悔不回头，渐渐的丢失了底线，<a id="more"></a>然而周围已经没有了可以将心托付的人了，以前可能还有，暧昧多于友谊，然而只能是友谊，不懂为什么她答应又拒绝，或许她比我懂得多，那时我竟然不懂，不明白，原因，太多话没有说明，太多情没有诉尽，太多人还不了债。想来这便是人生？我不懂，我也不知道我怎么去选择，我想让时间划过，但我又想阻延时间，却抓不住，时间在风中溜走。或许我便是矛盾的一生，我期待一个英雄驾着云彩，携我出周身荆棘缠绕，世界一片光明。</p><h5 id="2015-10-20"><a href="#2015-10-20" class="headerlink" title="2015-10-20"></a>2015-10-20</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;谁说的青春无悔，我怎么天天都在回望昨日一往情深，不懂什么是爱，现在已经麻木了，何人还爱，何人敢爱，又有谁来爱我。口口声声不悔不回头，渐渐的丢失了底线，
    
    </summary>
    
    
      <category term="日记" scheme="https://lirawx.me/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>江上有感</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-%E6%B1%9F%E4%B8%8A%E6%9C%89%E6%84%9F.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-江上有感.html</id>
    <published>2017-07-05T05:08:59.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>江岸郎情，前朝栏杆，不能拍，<br>河堤妾意，妖娆柳腰，不堪抚，<br>余辉仍在，故人已远，不曾想，<br>晚风轻抚，多情离别，不甚伤。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;江岸郎情，前朝栏杆，不能拍，&lt;br&gt;河堤妾意，妖娆柳腰，不堪抚，&lt;br&gt;余辉仍在，故人已远，不曾想，&lt;br&gt;晚风轻抚，多情离别，不甚伤。&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="2B青年 poem 文艺" scheme="https://lirawx.me/tags/2B%E9%9D%92%E5%B9%B4-poem-%E6%96%87%E8%89%BA/"/>
    
  </entry>
  
  <entry>
    <title>生活，需要一些仪式感</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-%E7%94%9F%E6%B4%BB%EF%BC%8C%E9%9C%80%E8%A6%81%E4%B8%80%E4%BA%9B%E4%BB%AA%E5%BC%8F%E6%84%9F.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-生活，需要一些仪式感.html</id>
    <published>2017-07-05T05:07:31.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>最近读了一篇文章，题目是<a href="http://mp.weixin.qq.com/s?__biz=MjM5MTAzNDQ4MA==&amp;mid=209447537&amp;idx=1&amp;sn=560ce94e71b7c2b37efd3f4817986bcd&amp;scene=0#rd" target="_blank" rel="noopener">生活，需要一些仪式感</a>我引用一下特有感觉的话：</p><a id="more"></a><p>我向来觉得生活是需要一些仪式感的，这跟矫情无关，而是关于你对生活的热爱，对幸福的敏感，乃至有时候它是一种结束，也是一种开始。</p><p>今天的中国人的生活方式似乎少了一些情趣，生活节奏越来越匆忙，生命中越来越缺乏仪式感，而没有仪式感，人生就不庄严，心就不安静。</p><p>人人都爱蒂凡尼的早餐，可是却鲜少有人扭头看看自己在生活里，仪式感有多么匮乏。</p><p>我仔细的将这些句子在口舌咽喉之间来回可以说是像牛一样反刍，一字一句，我虔诚的像基督徒一样，我认为之前我有罪，没有一丝一毫的仪式感，感到空虚，之前的生活突然觉得没有任何意义，我感到莫大的罪孽，我深深的忏悔，我告诫我自己，要给自己一点点的仪式感，如同刷牙洗脸一样将仪式终身进行下去。</p><p>我重拾咖啡，将咖啡放入马克杯，再倒入沸水，一切都是那样的充满敬意，神圣无犯，我知道，这是一种仪式，未来我每天都要进行的仪式。我的心在陶瓷勺搅拌之中随着咖啡粉末融化了，那一刻我从心底里觉得我得到了救赎。像极了肖生克越狱成功后的喜悦。</p><p>我不能劝导所有人都要喝咖啡，或者喝茶。我想说的是我同意作者的看法，我遵循仪式，我保持我对仪式的虔诚，坚定我的信仰，我以此来慰借我的罪恶灵魂，一杯咖啡喝完，世间那么的美好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近读了一篇文章，题目是&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MTAzNDQ4MA==&amp;amp;mid=209447537&amp;amp;idx=1&amp;amp;sn=560ce94e71b7c2b37efd3f4817986bcd&amp;amp;scene=0#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;生活，需要一些仪式感&lt;/a&gt;我引用一下特有感觉的话：&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记 读书笔记" scheme="https://lirawx.me/tags/%E6%97%A5%E8%AE%B0-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2015-09-08-反思</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-2015-09-08-%E5%8F%8D%E6%80%9D.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-2015-09-08-反思.html</id>
    <published>2017-07-05T05:06:45.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>突然觉得有必要找一个地方写写，想想，说说，无关他人，只是自己，不悲伤，不欢喜，只是静静的谈谈自己。以前说过总有一个时候一个人会回过头来看看身后，身后的脚印也好，石头磕绊也好，必须有一个时辰拿来检讨自己。或许他人不知道，但是自己，自己的良善会知道。<a id="more"></a><br>必须要承认自己的过错，比如很容易激动，听不下去别人的言语，尤其是自己不喜欢，不感兴趣，不符合自己的价值观，针对自己的等等。还比如自己现在的随意，满不在乎的样子，其实我也不知道自己以后会在意什么，但是，我觉得这个状态持续下去不太好。<br>听别人的故事，会流着自己的泪，那么这个泪是否有一部分是为自己而流的呢。很多时候告诉自己不后悔，其实经常会回想自己与她人的点点滴滴。医生中总有那么一个人，会给你不一样的体验，终生难忘。尽管不是时时刻刻，但是几乎每天空下来的时候总会无端想起，不知道这是否是后悔的一种表现呢，可是依然要表现出不在乎的样子。放下就会好过许多，真的是这样的放下么？真的就这样么？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然觉得有必要找一个地方写写，想想，说说，无关他人，只是自己，不悲伤，不欢喜，只是静静的谈谈自己。以前说过总有一个时候一个人会回过头来看看身后，身后的脚印也好，石头磕绊也好，必须有一个时辰拿来检讨自己。或许他人不知道，但是自己，自己的良善会知道。
    
    </summary>
    
    
      <category term="日记" scheme="https://lirawx.me/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python之pyenv版本控制</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-python%E4%B9%8Bpyenv%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-python之pyenv版本控制.html</id>
    <published>2017-07-05T05:05:46.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>当需要多个python共存时，pyenv提供了解决知道</p><p>#####安装pyenv<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/yyuu/pyenv.git ~/.pyenv</span><br><span class="line">echo &apos;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &apos;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class="line">exec $SHELL -l</span><br></pre></td></tr></table></figure><p>#####用pyenv安装python</p><p>查看可安装的版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure><p>#####安装指定版本(3.4.0为例)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv install 3.4.0 -v</span><br></pre></td></tr></table></figure><p>#####安装之后要对数据库进行更新</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv rehash</span><br></pre></td></tr></table></figure><p>#####设置全局python版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv global 3.4.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当需要多个python共存时，pyenv提供了解决知道&lt;/p&gt;
&lt;p&gt;#####安装pyenv&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://lirawx.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>git 安装与使用</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-git%20%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-git 安装与使用.html</id>
    <published>2017-07-05T05:04:34.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>###一、git基本环境配置</p><p>1.首先去<a href="http://www.github.com上注册帐号" target="_blank" rel="noopener">www.github.com上注册帐号</a></p><p>2.本机安装git.   sudo apt-get install git</p><p>3.给本机注册SSH，请移步<a href="https://help.github.com/articles/generating-ssh-keys" target="_blank" rel="noopener">https://help.github.com/articles/generating-ssh-keys</a>，注册SSH后就默认可以在本机上传代码之类，不用在输入用户名密码…</p><p>4.配置Git的配置文件，username和email<br>   git config –global user.name “your name”   //配置用户名<br>   git config –global user.email “your email”    //配置email<br>配置这个每次commit都会通过email去关联github账户<br><a id="more"></a></p><p>###二、git基本命令</p><p>1.git clone 命令将远程的Git版本库在本地克隆一份，然后就可以用git对该目录下的文件进行版本控制。并且此时会默认生成一个文件夹，文件夹名字是远程仓库名字，cd进去之后，git remote -v发现存在远程仓库，其地址是clone的地址，名字是orgin。<br>比如  (git clone git://github.com/1292765944/ACM.git)    或者    (git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:1292765944/ACM.git)但不要用https协议</p><p>2.git init  你可以在本地创建了一个工作目录，然后进入这个目录，使用’git init’命令进行初始化，那么git以后就会对该目录下的文件进行版本控制。</p><p>这个命令应用比较简单，先cd到目标文件夹，然后git init即可。</p><p>3.git remote 通过这个命令我们可以建立和远程仓库的联系。</p><p>比如  git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:1292765944/ACM.git   我们就把<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:1292765944/ACM.git这个远程仓库取了origin别名，以后我们再访问的时候可以直接使用别名。</p><p>git remote -v 查看远程仓库</p><p>git remote rm [name] 删除远程仓库</p><p>git pull [remoteName] [localBranchName]拉取远程仓库。比如git pull origin master</p><p>git push [remoteName] [localBranchName]更新远程仓库，注意在更新之前要先pul。比如git push origin master</p><p>4.git add 该命令当前更改或者新增的文件加入到本地仓库中 git add 后面可以加文件名/目录，还有一中写法git add .会自动判断添加哪些文件然后把这个添加提交到本地的仓库</p><p>5.git rm 该命令删除本地仓库中的一些文件。git rm 后面可以直接接文件名，但要删除目录时，要加-r</p><p>6.git commit 提交你之前做的rm和add操作并必须要提交附加信息。比如 git commit -m “acm_template”</p><p>###三、使用git从本地上传github举例</p><p>第一步： 进入要所要上传文件的目录输入命令 “git init”<br>第二步： 创建一个远程仓库origin，使用命令 “git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:1292765944/ACM.git”，其中1292765944是你的GitHub的用户名，ACM是你要上传到GitHub的仓库<br>第三步：比如你要添加一个文件xxx到本地仓库，使用命令 “git add xxx”，可以使用“git add .”自动判断添加哪些文件，然后把这个添加提交到本地的仓库，使用命令 ”git commit -m ”说明这次的提交“，最后把本地仓库origin提交到远程的GitHub仓库，使用命令 ”git push origin master“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###一、git基本环境配置&lt;/p&gt;
&lt;p&gt;1.首先去&lt;a href=&quot;http://www.github.com上注册帐号&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.github.com上注册帐号&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.本机安装git.   sudo apt-get install git&lt;/p&gt;
&lt;p&gt;3.给本机注册SSH，请移步&lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://help.github.com/articles/generating-ssh-keys&lt;/a&gt;，注册SSH后就默认可以在本机上传代码之类，不用在输入用户名密码…&lt;/p&gt;
&lt;p&gt;4.配置Git的配置文件，username和email&lt;br&gt;   git config –global user.name “your name”   //配置用户名&lt;br&gt;   git config –global user.email “your email”    //配置email&lt;br&gt;配置这个每次commit都会通过email去关联github账户&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://lirawx.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>基于 Promise 的 HTTP 请求客户端，axios</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-%E5%9F%BA%E4%BA%8E%20Promise%20%E7%9A%84%20HTTP%20%E8%AF%B7%E6%B1%82%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8Caxios.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-基于 Promise 的 HTTP 请求客户端，axios.html</id>
    <published>2017-07-05T05:03:27.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用</p><a id="more"></a><h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><ul><li>在浏览器中发送 XMLHttpRequests 请求</li><li>在 node.js 中发送 http请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>自动转换 JSON 数据</li><li>客户端支持保护安全免受 XSRF 攻击<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><img src="https://saucelabs.com/browser-matrix/axios.svg" alt=""></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 bower:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower install axios</span><br></pre></td></tr></table></figure></p><h2 id="使用-npm"><a href="#使用-npm" class="headerlink" title="使用 npm:"></a>使用 npm:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>发送一个 GET 请求<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Make a request for a user with a given ID</span><br><span class="line">axios.get(&apos;/user?ID=12345&apos;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">// Optionally the request above could also be done as</span><br><span class="line">axios.get(&apos;/user&apos;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>发送一个 POST 请求<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axios.post(&apos;/user&apos;, &#123;</span><br><span class="line">    firstName: &apos;Fred&apos;,</span><br><span class="line">    lastName: &apos;Flintstone&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>发送多个并发请求<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getUserAccount() &#123;</span><br><span class="line">  return axios.get(&apos;/user/12345&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">  return axios.get(&apos;/user/12345/permissions&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    // Both requests are now complete</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="axios javascript nodejs promise" scheme="https://lirawx.me/tags/axios-javascript-nodejs-promise/"/>
    
  </entry>
  
  <entry>
    <title>前端开发，从草根到英雄(总结)</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%8C%E4%BB%8E%E8%8D%89%E6%A0%B9%E5%88%B0%E8%8B%B1%E9%9B%84(%E6%80%BB%E7%BB%93).html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-前端开发，从草根到英雄(总结).html</id>
    <published>2017-07-05T05:02:13.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章信息："><a href="#文章信息：" class="headerlink" title="文章信息："></a>文章信息：</h2><p>原文：</p><ul><li><a href="https://medium.freecodecamp.com/from-zero-to-front-end-hero-part-1-7d4f7f0bff02#.tk79nj5v4" target="_blank" rel="noopener">zero to front-end hero</a></li><li><a href="https://medium.freecodecamp.com/from-zero-to-front-end-hero-part-2-adfa4824da9b#.whk80zqzt" target="_blank" rel="noopener">From Zero to Front-end Hero (Part 2)</a></li></ul><p>作者：<a href="https://medium.freecodecamp.com/@JonathanZWhite" target="_blank" rel="noopener">@Jonathan Z. White</a></p><p>翻译：</p><ul><li><a href="http://jieniu.me/2016/11/11/zero-hero/" target="_blank" rel="noopener">前端开发，从草根到英雄（第一部分）</a></li><li><a href="http://jieniu.me/2016/11/12/zero-hero-2/" target="_blank" rel="noopener">前端开发，从草根到英雄（第二部分）</a></li></ul><p>译者：<a href="http://jieniu.me/" target="_blank" rel="noopener">jieniu</a></p><a id="more"></a><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="HTML-CSS基础练习"><a href="#HTML-CSS基础练习" class="headerlink" title="HTML CSS基础练习"></a>HTML CSS基础练习</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li><a href="http://codepen.io/" target="_blank" rel="noopener">CodePen</a></li><li><a href="https://dribbble.com/" target="_blank" rel="noopener">Dribbble</a></li></ul><p>练习使用html，css，包裹google字体的api和google字体的css技巧，当然还有排版。要将注意力放在html，css在一起时如何工作的。然后再dribble这个网站上寻找灵感，在codepen上编写代码。</p><h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><ul><li>语义标记</li><li>css命名约定</li><li>css重置</li><li>跨浏览器支持</li><li>css预处理器和后处理器</li><li>网格系统和响应式</li></ul><p>最后要保持更新，从一个又一个例子中学习。</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h4><h5 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h5><ul><li>语法和类型</li><li>控制流河错误处理</li><li>循环和遍历</li><li>函数</li></ul><h5 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h5><p>文档对象模型（DOM）</p><ul><li>什么是DOM？</li><li>如何查询元素？</li><li>如何添加事件监听者？</li><li>如何合适的改变DOM节点属性？</li></ul><h5 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h5><p>调试JavaScript</p><h4 id="进阶知识"><a href="#进阶知识" class="headerlink" title="进阶知识"></a>进阶知识</h4><h5 id="语言-1"><a href="#语言-1" class="headerlink" title="语言"></a>语言</h5><ul><li>强化原型</li><li>作用域</li><li>闭包</li><li>事件循环</li><li>事件通知</li><li>请求、调用和绑定</li><li>回调和承诺</li><li>变量及函数挂起</li><li>Currying</li></ul><h5 id="Imperative-vs-Declarative"><a href="#Imperative-vs-Declarative" class="headerlink" title="Imperative vs. Declarative"></a>Imperative vs. Declarative</h5><p>JavaScript和DOM如何交互，有两种方法：imperative和declarative，一方面，declarative程序专注于what，另一方面，imperative程序专注于how。<br>Jquery是imperative方法，然后才是Angular和React库declarative方法</p><h5 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h5><p>新的浏览器请求标准是Fetch</p><h5 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h5><p>jQuery不是唯一的imperative DOM操作解决方案，PlainJS和You Might Not Need jQuery是两个很好的资源，他们会告诉你和jQuery一样的频繁使用的JavaScript函数。</p><h5 id="ES5-vs-ES6"><a href="#ES5-vs-ES6" class="headerlink" title="ES5 vs. ES6"></a>ES5 vs. ES6</h5><p>有必要知道你今天看到的应用，要么使用ES5，要么使用ES6。ES5，ES6，ES2016，ES.Next: JavaScript版本到底怎么了和Dan Wahlins的ES6入门——下一代JavaScript是很好的ES6介绍。接着你可以在ES6功能列表查看ES5到ES6的变化。如果你还想了解更多，去Github代码库获得更多ES6功能信息。</p><h5 id="JavaScript框架"><a href="#JavaScript框架" class="headerlink" title="JavaScript框架"></a>JavaScript框架</h5><p>Angular，React + Flux，Ember，Aurelia，Vue，和Meteor。你不需要学习所有的框架，选一个学习即可，不要追赶框架的潮流，取而代之的是，你需要理解框架程序底下的原则和哲学。</p><h5 id="架构模型"><a href="#架构模型" class="headerlink" title="架构模型"></a>架构模型</h5><p>MVC MVVM</p><p>与其让HTML保留应用状态，还不如用一个JavaScript对象——通常被称为Model——来存储状态。</p><h5 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h5><ul><li>装饰者模式</li><li>工厂模式</li><li>单件模式</li><li>Revealing module</li><li>外观模式</li><li>观察者模式</li></ul><h5 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h5><p>AngularJS是一个JavaScript MVC框架，有时也是一个MVVM框架，它由google维护，并在2010年初次发布时给JavaScript社区带来了一场风暴</p><h5 id="React-Flux"><a href="#React-Flux" class="headerlink" title="React + Flux"></a>React + Flux</h5><p>Angular很好解决了程序员在构建复杂系统时所面对的问题，另一个流行的工具是React，它是一个创建用户接口的库，你可以把它想象成MVC中的V。由于React只是一个库，所以它会经常伴随着一个框架Flux</p><h5 id="风格指南"><a href="#风格指南" class="headerlink" title="风格指南"></a>风格指南</h5><p>JavaScript风格指南是一组代码规范，它会帮助你设计具有可读性和可维护性高的代码。</p><ul><li>AirBnB的编码规范</li><li>常用的JavaScript原则</li><li>Node编码规范</li><li>MDN编码规范</li></ul><h5 id="编码基础"><a href="#编码基础" class="headerlink" title="编码基础"></a>编码基础</h5><p>我已经无法形容读好代码给我带来的帮助到底有多大，一旦当你想读新的好代码时，可以上Github上找</p><ul><li>Lodash</li><li>Underscore</li><li>Babel</li><li>Ghost</li><li>NodeBB</li><li>KeystoneJS</li></ul><hr><p>许多时候，人在做，天在看。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文章信息：&quot;&gt;&lt;a href=&quot;#文章信息：&quot; class=&quot;headerlink&quot; title=&quot;文章信息：&quot;&gt;&lt;/a&gt;文章信息：&lt;/h2&gt;&lt;p&gt;原文：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.com/from-zero-to-front-end-hero-part-1-7d4f7f0bff02#.tk79nj5v4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zero to front-end hero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.com/from-zero-to-front-end-hero-part-2-adfa4824da9b#.whk80zqzt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;From Zero to Front-end Hero (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://medium.freecodecamp.com/@JonathanZWhite&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@Jonathan Z. White&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;翻译：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jieniu.me/2016/11/11/zero-hero/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前端开发，从草根到英雄（第一部分）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jieniu.me/2016/11/12/zero-hero-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前端开发，从草根到英雄（第二部分）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;译者：&lt;a href=&quot;http://jieniu.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jieniu&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="css html javascript" scheme="https://lirawx.me/tags/css-html-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 入门</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-Webpack%20%E5%85%A5%E9%97%A8.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-Webpack 入门.html</id>
    <published>2017-07-05T05:00:27.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p> Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。<br><a id="more"></a></p><h3 id="打包js"><a href="#打包js" class="headerlink" title="打包js"></a>打包js</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app/runoob1.js 文件</span><br><span class="line">document.write(require(&quot;./runoob2.js&quot;));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack runoob1.js bundle.js</span><br></pre></td></tr></table></figure><p> webpack 根据模块的依赖关系进行静态分析，这些文件(模块)会被包含到 bundle.js 文件中。Webpack 会给每个模块分配一个唯一的 id 并通过这个 id 索引和访问模块。 在页面启动时，会先执行 runoob1.js 中的代码，其它模块会在运行 require 的时候再执行。</p><h2 id="LOADER"><a href="#LOADER" class="headerlink" title="LOADER"></a>LOADER</h2><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。<br>所以如果我们需要在应用中添加 css 文件，就需要使用到 css-loader 和 style-loader，他们做两件不同的事情，css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们，style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中。</p><p>app/runoob1.js 文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&quot;!style!css!./style.css&quot;);</span><br><span class="line">document.write(require(&quot;./runoob2.js&quot;));</span><br></pre></td></tr></table></figure></p><p>require CSS 文件的时候都要写 loader 前缀 !style!css!，当然我们可以根据模块类型（扩展名）来自动绑定需要的 loader。 将 runoob1.js 中的 require(“!style!css!./style.css”) 修改为 require(“./style.css”) ：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app/runoob1.js 文件</span><br><span class="line">require(&quot;./style.css&quot;);</span><br><span class="line">document.write(require(&quot;./runoob2.js&quot;));</span><br></pre></td></tr></table></figure></p><p>然后执行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack runoob1.js bundle.js --module-bind &apos;css=style!css&apos;</span><br></pre></td></tr></table></figure></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>我们可以将一些编译选项放在配置文件中，以便于统一管理：<br>创建 webpack.config.js 文件，代码如下所示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app/webpack.config.js 文件</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &quot;./runoob1.js&quot;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: &quot;bundle.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; test: /\.css$/, loader: &quot;style!css&quot; &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接下来我们只需要执行 webpack 命令即可生成 bundle.js 文件。webpack 命令执行后，会默认载入当前目录的 webpack.config.js 文件。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>插件在 webpack 的配置信息 plugins 选项中指定，用于完成一些 loader 不能完成的工。<br>webpack 自带一些插件，你可以可以通过 cnpm 安装一些插件。<br>使用内置插件需要通过以下命令来安装：<br>cnpm install webpack –save-dev<br>比如我们可以安装内置的 BannerPlugin 插件，用于在文件头部输出一些注释信息。<br>修改 webpack.config.js，代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app/webpack.config.js 文件</span><br><span class="line">var webpack=require(&apos;webpack&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &quot;./runoob1.js&quot;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: &quot;bundle.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; test: /\.css$/, loader: &quot;style!css&quot; &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">    new webpack.BannerPlugin(&apos;菜鸟教程 webpack 实例&apos;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后运行 webpack，打开 bundle.js，可以看到文件头部出现了我们指定的注释信息。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>当项目逐渐变大，webpack 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$webpack --progress --colors</span><br></pre></td></tr></table></figure></p><p>如果不想每次修改模块后都重新编译，那么可以启动监听模式。开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack --progress --colors --watch</span><br></pre></td></tr></table></figure></p><p>当然，我们可以使用 webpack-dev-server 开发服务，这样我们就能通过 localhost:8080 启动一个 express 静态资源 web 服务器，并且会以监听模式自动运行 webpack，在浏览器打开 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 或 <a href="http://localhost:8080/webpack-dev-server/" target="_blank" rel="noopener">http://localhost:8080/webpack-dev-server/</a> 可以浏览项目中的页面和编译后的资源输出，并且通过一个 socket.io 服务实时监听它们的变化并自动刷新页面。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">cnpm install webpack-dev-server -g</span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">webpack-dev-server --progress --colors</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。&lt;br&gt;
    
    </summary>
    
    
      <category term="Webpack" scheme="https://lirawx.me/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue全面介绍--全家桶（vue笔记一）</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-vue%E5%85%A8%E9%9D%A2%E4%BB%8B%E7%BB%8D--%E5%85%A8%E5%AE%B6%E6%A1%B6%EF%BC%88vue%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%89.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-vue全面介绍--全家桶（vue笔记一）.html</id>
    <published>2017-07-05T04:58:48.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  “简单却不失优雅，小巧而不乏大匠”。<br>Vue.js 是一个JavaScriptMVVM库，是一套构建用户界面的渐进式框架。它是以数据驱动和组件化的思想构建的，采用自底向上增量开发的设计。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js；同时比起 React + Redux 相对复杂的架构，Vue.js 更加轻量级也更加容易上手，是初创项目的首选前端框架。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。并且作者是华人的关系，Vue拥有着对华人开发者最友好的api文档和官方教程。<br><a id="more"></a></p><h2 id="vue、React、Angular1对比"><a href="#vue、React、Angular1对比" class="headerlink" title="vue、React、Angular1对比"></a>vue、React、Angular1对比</h2><p>在Angular1中，在scope作用域中每一次数据变化，会触发watcher的重新计算，angular对常用的dom事件，xhr事件等做了封装， 在里面触发进入angular的digest流程。在digest流程里面，会从rootscope开始遍历， 检查所有的watcher。并且，如果一些 watcher 触发另一个更新，脏检查循环（digest cycle）可能要运行多次。Vue则没有这个问题，因为它使用基于依赖追踪的观察系统并且异步队列更新，数据的变化都是独立处罚的，除非数据之间有明确的依赖关系。<br>vue官方宣称vue的渲染性能优于react。为了有理有据让人信服，vue开发团队建立了一个简单的对比性能的项目（<a href="https://github.com/chrisvfritz/vue-render-performance-comparisons），它负责渲染10000个列表项100次。Vue官方将每一个参照项目都分别运行" target="_blank" rel="noopener">https://github.com/chrisvfritz/vue-render-performance-comparisons），它负责渲染10000个列表项100次。Vue官方将每一个参照项目都分别运行</a> 20 次并取最好的结果结果如下图：<br><img src="http://img.blog.csdn.net/20170328173227286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhlbmdoYW8zNTc5MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>由此可见，Vue的性能是远好于Angular1，并且稍微优于React的。</p><h2 id="社区拓展对比"><a href="#社区拓展对比" class="headerlink" title="社区拓展对比"></a>社区拓展对比</h2><p>Angular1的背后是Google，所以社区基础是不需要担心的，从Tutorial到StackOverflow的问题数量都可以反映出生态系统很完整。Vue和React都有强大的社区支持。React有状态管理库Flux、ReduxVue，相应的，Vue有vuex。Vue 和 React 都提供了强大的路由库来应对大型应用。然而Vue的路由库和状态管理库都是由官方维护支持的。React 则是选择把这些问题交给社区维护，因此创建了一个更分散的生态系统。但相对的，React 的生态系统相比 Vue 更加繁荣。此外，Vue 提供了Vue-cli 脚手架，包括了Webpack，Browserify，甚至路由库，能让你非常容易地构建项目。</p><h2 id="学习陡峭度对比"><a href="#学习陡峭度对比" class="headerlink" title="学习陡峭度对比"></a>学习陡峭度对比</h2><p>在指令与组件方面，Vue中将指令和组件分得更清晰。指令只封装 DOM 操作，而组件代表一个自给自足的独立单元，有自己的视图和数据逻辑。在 Angular1 中两者有不少相混的地方。在API与框架设计方面，angular1都比vue要复杂的多。就个人感觉而言，angular1和React的学习曲线会相对陡峭一些，而vue的编码方式会更趋近于前端开发者的编程习惯。<br>因为vue的作者是中国人，vue的官方网站、教程和api肯定是最完善、最易懂的。此外，每次大版本的发布，都会伴随着详尽的迁移说明文档，包含了很多详尽的阐述以及许多迁移的例子，甚至还有迁移工具。</p><h2 id="vue的缺点"><a href="#vue的缺点" class="headerlink" title="vue的缺点"></a>vue的缺点</h2><p>Vue就这么好，难道没有缺点吗？当然有，vue虽然在16年非常火爆，但是相比于angular和react，不论是成熟度还是社区活跃度都还不是对手。此外，Vue明确声明了自己放弃了对IE8的支持。再看看现在的招聘网站上，有多少写了需要有angular经验，而又有多少写了需要vue经验，就可见vue的影响力相比于angular和react还差的很远。</p><h2 id="vue全家桶及项目架构"><a href="#vue全家桶及项目架构" class="headerlink" title="vue全家桶及项目架构"></a>vue全家桶及项目架构</h2><p>Vue有著名的全家桶系列，包含了vue-router（<a href="http://router.vuejs.org），vuex（http://vuex.vuejs.org），" target="_blank" rel="noopener">http://router.vuejs.org），vuex（http://vuex.vuejs.org），</a> vue-resource（<a href="https://github.com/pagekit/vue-resource）。再加上构建工具vue-cli，就是一个完整的vue项目的核心构成。" target="_blank" rel="noopener">https://github.com/pagekit/vue-resource）。再加上构建工具vue-cli，就是一个完整的vue项目的核心构成。</a></p><h3 id="vue-router路由"><a href="#vue-router路由" class="headerlink" title="vue-router路由"></a>vue-router路由</h3><p>推荐使用npm工具来安装vue-router<br>npm install vue-router<br>通过import导入并定义Vue模块、vue-router模块和需要使用的组件，在本例中，分别是Goods、Ratings和Seller组件。最后，如果在一个模块化工程中使用它，必须要通过 Vue.use() 明确地安装路由功能。<br>import Vue from’vue’<br>importRouter from’vue-router’</p><p>import Goods from ‘@/components/goods/goods’;<br>import Ratings from ‘@/components/ratings/ratings’;<br>import Seller from ‘@/components/seller/seller’;</p><p>Vue.use(Router); // 需要import Vue和Router，不然会报错undefined<br>通过const router= new VueRouter（）来定义一个路由，并传入对应的配置，包括路径path和组件components。</p><h3 id="vuex状态管理"><a href="#vuex状态管理" class="headerlink" title="vuex状态管理"></a>vuex状态管理</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。如前面所提到的，Vuex 已经集成到 Vue 的官方调试工具vue Devtools，可以轻松的查看项目中的Vuex状态变化情况。<br>假设有这样一个场景：我们的项目规模比较大，有多个父组件，每个父组件同时又包含多个子组件。如何保持对所有时间的追踪将变得很困难。到底哪个事件是哪个组件派发的，哪个组件该监听哪个事件？父组件将变得和子组件耦合越来越严重，因为它需要明确的派发和监听子组件的某些事件。项目逻辑分散在各个组件当中，很容易导致逻辑的混乱，不利于我们项目的维护。<br>这就是 Vuex 用来解决的问题。 Vuex 的四个核心概念分别是：<br>The state tree：Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。至此它便作为一个『唯一数据源(SSOT)』而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。<br>Getters：用来从 store 获取 Vue 组件数据。<br>Mutators：事件处理器用来驱动状态的变化。<br>Actions：可以给组件使用的函数，以此用来驱动事件处理器 mutations<br>Vuex和简单的全局对象是不同的，当Vuex从store中读取状态值的时候，若状态发生了变化，那么相应的组件也会高效的更新。并且，改变store中状态的唯一途径就是提交commit mutations。这样便于我们跟踪每一次状态的变化。只要发生了状态的变化，一定伴随着mutation的提交。</p><h3 id="vue-resource介绍"><a href="#vue-resource介绍" class="headerlink" title="vue-resource介绍"></a>vue-resource介绍</h3><p>Vue-resource有体积小，支持IE9以上的浏览器，支持promise特性的特点。同样推荐使用npm来安装Vue-resource。<br>$ npm install vue-resource<br>在安装并引入vue-resource后，可以基于全局的Vue对象使用http，也可以基于某个Vue实例使用http。<br>在发送请求后，使用then方法来处理响应结果，then方法有两个参数，第一个参数是响应成功时的回调函数，第二个参数是响应失败时的回调函数。<br>vue-resource的请求API是按照REST风格设计的，它提供了7种请求API：<br>· get(url,[options])<br>· head(url,[options])<br>· delete(url,[options])<br>· jsonp(url,[options])<br>· post(url,[body], [options])<br>· put(url, [body],[options])<br>· patch(url,[body], [options])</p><h3 id="vue工程目录结构"><a href="#vue工程目录结构" class="headerlink" title="vue工程目录结构"></a>vue工程目录结构</h3><p><img src="http://img.blog.csdn.net/20170328173526370?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhlbmdoYW8zNTc5MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>components/文件夹用来存放Vue 组件。个人建议，把每一个组件中使用到的image图片放置到对应的组件子文件目录下，便于统一的管理<br>Node_modules/npm安装的该项目的依赖库<br>vuex/文件夹存放的是和 Vuex store 相关的东西（state对象，actions，mutations)<br>router/文件夹存放的是跟vue-router相关的路由配置项<br>build/文件是 webpack 的打包编译配置文件<br>static/文件夹存放一些静态的、较少变动的image或者css文件<br>config/文件夹存放的是一些配置项，比如服务器访问的端口配置等<br>dist/该文件夹一开始是不存在，在我们的项目经过 build 之后才会产出<br>App.vue根组件，所有的子组件都将在这里被引用<br>index.html整个项目的入口文件，将会引用我们的根组件 App.vue<br>main.js入口文件的 js 逻辑，在webpack 打包之后将被注入到 index.html 中</p><h2 id="Vue核心功能"><a href="#Vue核心功能" class="headerlink" title="Vue核心功能"></a>Vue核心功能</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>假设有如下的购物车结算场景，用户选中商品的总金额是根据商品数量、选中商品种类数<br>和商品单价来变化的。然而，数量、选中种类数量和单价这几个对象都是根据用户选择而动态变化的，如果在前端模版中为了计算最终商品总额，放入这几个动态变化的变量（商品数量、商品单价、选中商品种类），会让这个逻辑变得复杂难以维护。在这种情况下，模版便不再简洁清晰。Vue给出了此种场景的解决方案，在任何复杂的逻辑，vue都推荐使用计算属性。</p><h4 id="computed-vs-method"><a href="#computed-vs-method" class="headerlink" title="computed vs method"></a>computed vs method</h4><p>也许会有疑问，这个计算属性和定义一个method方法不是差不多么？这两者最大的区别是计算属性是基于它的依赖进行缓存的。计算属性只有在它的相关依赖发生变化时才会重新计算求值。在本例中，只有当选择商品的价格price和数量count发生变化时，这个计算属性totalPrice才会重新计算新的值。这就意味着，只要totalPrice这个值没有发生变化，多次访问该计算属性会立即返回之前的计算结果，而不必再次执行计算。</p><h3 id="模版语法"><a href="#模版语法" class="headerlink" title="模版语法"></a>模版语法</h3><p>Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。Vue的模版语法包括了使用双大括号插入文本、使用v-html插入纯HTML内容、使用v-bind插入对象、类似angular的v-if、v-show、v-for指令、以及过滤器等等。</p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>组件（Component）是 Vue.js 最强大的功能。组件可以封装可重用的代码，通过传入对象的不同，实现组件的复用。<br>举一个简单的组建例子，我们首先编写一个star组件，它就是一个普通的star.vue文件。它的作用就是简单实现了一个五角星。<br>如何在其他的vue文件中使用这个star组件呢？如下图所示，首先通过import引入star组件对象，并在想使用star组件的vue文件中声明注册star组件。现在就可以愉快的通过标签来在该vue文件中任意地方使用star组件了。在你想展示一个五角星的地方，使用一个star标签，就可以轻松完成这个功能。<br>组件实例的作用域是孤立的。这意味着不能在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，我们需要通过子组件的props选项。如本例所示，子组件star要显式的使用props选项声明它期待获得的数据。在这里就是指的“size”和“score”两个变量。我们可以通过父级给子组件star传入大小和数值这两个对象，来实现对子组件的定制化。</p><h3 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h3><p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果，可以用简单的几行代码实现酷炫的过渡效果。Vue 提供了 transition 的封装组件，在使用v-if、v-show等方法使得transition内部dom元素发生变化时，可以给任何元素和组件添加 entering/leaving 过渡。<br>当v-show中内容发生变化时，transition组件中的元素会发生状态的改变，在应用了transition封装后，Vue会自动识别目标元素是否应用了CSS过渡效果动画，如果有，会在合适的时机添加 entering/leaving的class来实现该过渡效果。<br>下图所示是一个简单的过渡效果的例子，需要将想实现过渡效果的元素放在transition标签中包裹，通过name=“slide-fade”来声明过渡效果名称，并在对应的vue文件中添加过渡效果<br>的css样式，这样就可以简单的完成该元素的过渡效果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据不完全统计，包括饿了么、稀土掘金、苏宁易购、美团、天猫、荔枝FM、房多多、Laravel、htmlBurger等国内外知名大公司都在使用vue进行新项目的开发和旧项目的前端重构工作。<br>此外，vue + vuex+ vue-resource + vue-router + webpack + es6 + less的项目架构成为了越来越多大公司的第一选择。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;  “简单却不失优雅，小巧而不乏大匠”。&lt;br&gt;Vue.js 是一个JavaScriptMVVM库，是一套构建用户界面的渐进式框架。它是以数据驱动和组件化的思想构建的，采用自底向上增量开发的设计。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js；同时比起 React + Redux 相对复杂的架构，Vue.js 更加轻量级也更加容易上手，是初创项目的首选前端框架。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。并且作者是华人的关系，Vue拥有着对华人开发者最友好的api文档和官方教程。&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://lirawx.me/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>姜文的一步之遥</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-%E5%A7%9C%E6%96%87%E7%9A%84%E4%B8%80%E6%AD%A5%E4%B9%8B%E9%81%A5.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-姜文的一步之遥.html</id>
    <published>2017-07-05T04:58:08.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来对姜文的电影有种从心底里的欢喜，这个不同于其他国人导演的拍片风格，很是吸引人。从<br>让子弹飞到一步之遥，都是民国风，个人对民国也有着文青的特殊向往，那个军阀混战的年代，<a id="more"></a>人民<br>开始追求时尚，追求自由，追求知识，科学等等，一切皆有可能的年代。</p><p>姜文谱写了一步之遥，借此讽今，开篇从泡沫出场，预示着本片的电影基调，深刻的批判了当下中国<br>电影的泡沫，终将破灭。To be or not to be. 这便是这部电影的伟大之处，偏要在上映两周年的<br>今天才能读懂的深意。</p><p>主角马走日，性格鲜明。电影中买通不成，便冲动行凶。如果马走日，真的想杀王天王，那他可以事<br>先谋划，这并不难。但，他却选择在众目睽睽下，挥拳上台“殴打”对方。这足以体现马走日的孩子气，<br>幼稚的可笑，无论老少都是孩子，用孩子的眼光看待人事。</p><p>为解一时之气，宁愿坐牢宁愿被枪毙。</p><p>理由很简单，仅为了死去的完颜英的颜面。</p><p>傻不傻？<br><img src="http://mmbiz.qpic.cn/mmbiz_png/oAzUiaO96O8aXHExRibrChqAsa6ruUvcjLAa79lGHFicpSW2HyrQY8hIV8gET2fyx8lFuRKPn3UwKHFMnW2dTGxLg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p><p>李安说过，周星驰拍的，都是小孩子的东西。</p><p>那么《一步之遥》，我给它的定义，就是一部“成人童话”。</p><p>它的主题有两个：</p><p>讽刺自命成熟者、讽刺自命成熟的社会。</p><p>是的，以一个小孩子的视角。</p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/oAzUiaO96O8a5JjO1iamBzny1frOELkYic9nYLS58vicqD2Nseb4DsP5g1yCLGibaibmaxmEZ2b0WYdeicSguHmXKwsCA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p><p>《一步之遥》表面上是部民国题材电影。</p><p>但实际上，它一直都在假借历史，讽刺假大空的、诛心吃人的社会。</p><p>青卢和白狐，为了争夺花国总统，费尽心思编排出百老汇级别的精彩表演。</p><p>我有一个文青朋友，当年她和我说，只看这段歌舞，就已经值回电影票价了。</p><p><img src="http://mmbiz.qpic.cn/mmbiz_gif/oAzUiaO96O8a5JjO1iamBzny1frOELkYic9ELCVlC3pic1QZBribGB3Zxu3FuyEenn4GHu919LLg9kH35PTSDCCiblsQ/0?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p><p>《一步之遥》的结局，极不符合普通国产片中惯用的套路。</p><p>从头到尾，死掉的只有马走日、完颜英，以及半死不活的武六。</p><p>其余的人，看客依旧是看客，军阀依旧是军阀，伪艺术家依旧是伪艺术家。</p><p>他们依旧挥舞着武器，只不过有的武器是枪，有的武器是目光，有的武器是镜头。</p><p>以上灵感来自<a href="http://mp.weixin.qq.com/s?__biz=MjM5MTIwNTYwMg==&amp;mid=2654584840&amp;idx=2&amp;sn=3d3ae46b056a8bfffd7c45b3529f7064&amp;chksm=bd7471858a03f8938774bd6b82ce6ba76f566c2ede19767a1fcc804f7af3410dff6c6e427bbd&amp;mpshare=1&amp;scene=23&amp;srcid=1227pGKdyNI5TlF1CdmgbIXk#rd" target="_blank" rel="noopener">毒舌电影</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来对姜文的电影有种从心底里的欢喜，这个不同于其他国人导演的拍片风格，很是吸引人。从&lt;br&gt;让子弹飞到一步之遥，都是民国风，个人对民国也有着文青的特殊向往，那个军阀混战的年代，
    
    </summary>
    
    
      <category term="电影" scheme="https://lirawx.me/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>CoffeeScript 基础知识</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-CoffeeScript%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-CoffeeScript 基础知识.html</id>
    <published>2017-07-05T04:57:25.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CoffeeScript</strong> 是一门编译到 JavaScript 的小巧语言. 在 Java 般笨拙的外表下, JavaScript 其实有着一颗华丽的心脏. CoffeeScript 尝试用简洁的方式展示 JavaScript 优秀的部分.</p><p>CoffeeScript 的指导原则是: “<strong>她仅仅是 JavaScript</strong>“. 代码一一对应地编译到 JS, 不会在编译过程中进行解释. 已有的 JavaScript 类库可以无缝地和 CoffeeScript 搭配使用, 反之亦然. 编译后的代码是可读的, 且经过美化, 能在所有 JavaScript 环境中运行, 并且应该和对应手写的 JavaScript 一样快或者更快.<br><a id="more"></a></p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>CoffeeScript 编译器本身是 CoffeeScript 写的, 使用了 Jison parser generator. 命令行版本的 coffee 是一个实用的 Node.js 工具. 不过编译器并不依赖 Node, 而是能运行于任何 JavaScript 执行环境, 比如说在浏览器里(看上边的”试一试 CoffeeScript”).</p><p>安装前你需要最新稳定版 Node.js, 和 npm (Node Package Manager). 借助 npm 可以安装 CoffeeScript:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g coffee-script</span><br></pre></td></tr></table></figure></p><h2 id="语言手册"><a href="#语言手册" class="headerlink" title="语言手册"></a>语言手册</h2><p>一些基础, CoffeeScript 使用显式的空白来区分代码块. 你不需要使用分号 ; 来关闭表达式, 在一行的结尾换行就可以了(尽管分号依然可以用来把多行的表达式简写到一行里). 不需要再用花括号来 { } 包裹代码快, 在 函数, if 表达式, switch, 和 try/catch 当中使用缩进.</p><p>传入参数的时候, 你不需要再使用圆括号来表明函数被执行. 隐式的函数调用的作用范围一直到行尾或者一个块级表达式.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log sys.inspect object → console.log(sys.inspect(object));</span><br></pre></td></tr></table></figure></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数通过一组可选的圆括号包裹的参数, 一个箭头, 一个函数体来定义. 一个空的函数像是这样:  -&gt;</p><p>coffeeScript</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">square = (x) -&gt; x * x</span><br><span class="line">cube   = (x) -&gt; square(x) * x</span><br></pre></td></tr></table></figure><p>JavaScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cube, square;</span><br><span class="line"></span><br><span class="line">square = function(x) &#123;</span><br><span class="line">  return x * x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cube = function(x) &#123;</span><br><span class="line">  return square(x) * x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="对象和数组"><a href="#对象和数组" class="headerlink" title="对象和数组"></a>对象和数组</h2><p>CoffeeScript 中对象和数组的字面量看起来很像在 JavaScript 中的写法. 如果单个属性被写在自己的一行里, 那么逗号是可以省略的. 和 YAML 类似, 对象可以用缩进替代花括号来声明.</p><p>coffeeScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">song = [&quot;do&quot;, &quot;re&quot;, &quot;mi&quot;, &quot;fa&quot;, &quot;so&quot;]</span><br><span class="line"></span><br><span class="line">singers = &#123;Jagger: &quot;Rock&quot;, Elvis: &quot;Roll&quot;&#125;</span><br><span class="line"></span><br><span class="line">bitlist = [</span><br><span class="line">  1, 0, 1</span><br><span class="line">  0, 0, 1</span><br><span class="line">  1, 1, 0</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">kids =</span><br><span class="line">  brother:</span><br><span class="line">    name: &quot;Max&quot;</span><br><span class="line">    age:  11</span><br><span class="line">  sister:</span><br><span class="line">    name: &quot;Ida&quot;</span><br><span class="line">    age:  9</span><br></pre></td></tr></table></figure></p><p>JavaScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bitlist, kids, singers, song;</span><br><span class="line"></span><br><span class="line">song = [&quot;do&quot;, &quot;re&quot;, &quot;mi&quot;, &quot;fa&quot;, &quot;so&quot;];</span><br><span class="line"></span><br><span class="line">singers = &#123;</span><br><span class="line">  Jagger: &quot;Rock&quot;,</span><br><span class="line">  Elvis: &quot;Roll&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bitlist = [1, 0, 1, 0, 0, 1, 1, 1, 0];</span><br><span class="line"></span><br><span class="line">kids = &#123;</span><br><span class="line">  brother: &#123;</span><br><span class="line">    name: &quot;Max&quot;,</span><br><span class="line">    age: 11</span><br><span class="line">  &#125;,</span><br><span class="line">  sister: &#123;</span><br><span class="line">    name: &quot;Ida&quot;,</span><br><span class="line">    age: 9</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="词法作用域和变量安全"><a href="#词法作用域和变量安全" class="headerlink" title="词法作用域和变量安全"></a>词法作用域和变量安全</h2><p>CoffeeScript 编译器会考虑所有变量, 保证每个变量都在词法域里适当地被定义 — 你永远不需要自己去写 var.</p><p>CoffeeScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">outer = 1</span><br><span class="line">changeNumbers = -&gt;</span><br><span class="line">  inner = -1</span><br><span class="line">  outer = 10</span><br><span class="line">inner = changeNumbers()</span><br></pre></td></tr></table></figure></p><p>JavaScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var changeNumbers, inner, outer;</span><br><span class="line"></span><br><span class="line">outer = 1;</span><br><span class="line"></span><br><span class="line">changeNumbers = function() &#123;</span><br><span class="line">  var inner;</span><br><span class="line">  inner = -1;</span><br><span class="line">  return outer = 10;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">inner = changeNumbers();</span><br></pre></td></tr></table></figure></p><blockquote><p>注意所有变量的定义都被推到相关的顶层作用域, 也就是第一次出现的位置. outer 在内层的函数里没有被重新定义, 因为它已经存在于作用域当中了. 同时, 内层函数里的 inner 不应该改变外部的同名的变量, 所以在这里有自己的声明.</p></blockquote><h2 id="循环和推导式"><a href="#循环和推导式" class="headerlink" title="循环和推导式"></a>循环和推导式</h2><p>你可以使用CoffeeScript将大多数的循环写成基于数组、对象或范围的推导式(comprehensions)。 推导式替代（编译为）for循环，并且可以使用可选的子句和数组索引值。 不同于for循环，数组的推导式是表达式，可以被返回和赋值。</p><p>CoffeeScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 吃午饭.</span><br><span class="line">eat food for food in [&apos;toast&apos;, &apos;cheese&apos;, &apos;wine&apos;]</span><br><span class="line"></span><br><span class="line"># 精致的五道菜.</span><br><span class="line">courses = [&apos;greens&apos;, &apos;caviar&apos;, &apos;truffles&apos;, &apos;roast&apos;, &apos;cake&apos;]</span><br><span class="line">menu i + 1, dish for dish, i in courses</span><br><span class="line"></span><br><span class="line"># 注重健康的一餐.</span><br><span class="line">foods = [&apos;broccoli&apos;, &apos;spinach&apos;, &apos;chocolate&apos;]</span><br><span class="line">eat food for food in foods when food isnt &apos;chocolate&apos;</span><br></pre></td></tr></table></figure></p><p>JavaScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var courses, dish, food, foods, i, _i, _j, _k, _len, _len1, _len2, _ref;</span><br><span class="line"></span><br><span class="line">_ref = [&apos;toast&apos;, &apos;cheese&apos;, &apos;wine&apos;];</span><br><span class="line">for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) &#123;</span><br><span class="line">  food = _ref[_i];</span><br><span class="line">  eat(food);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">courses = [&apos;greens&apos;, &apos;caviar&apos;, &apos;truffles&apos;, &apos;roast&apos;, &apos;cake&apos;];</span><br><span class="line"></span><br><span class="line">for (i = _j = 0, _len1 = courses.length; _j &lt; _len1; i = ++_j) &#123;</span><br><span class="line">  dish = courses[i];</span><br><span class="line">  menu(i + 1, dish);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foods = [&apos;broccoli&apos;, &apos;spinach&apos;, &apos;chocolate&apos;];</span><br><span class="line"></span><br><span class="line">for (_k = 0, _len2 = foods.length; _k &lt; _len2; _k++) &#123;</span><br><span class="line">  food = foods[_k];</span><br><span class="line">  if (food !== &apos;chocolate&apos;) &#123;</span><br><span class="line">    eat(food);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="操作符和-aliase"><a href="#操作符和-aliase" class="headerlink" title="操作符和 aliase"></a>操作符和 aliase</h2><p>由于操作符 == 常常带来不准确的约束, 不容易达到效果, 而且跟其他语言当中意思不一致, CoffeeScript 会把 == 编译为 ===, 把 != 变异为 !==. 此外, is 编译为 ===, 而 isnt 编译为 !==.</p><p>not 可以作为 ! 的 alias 使用.</p><p>逻辑操作方面, and 编译为 &amp;&amp;, 而 or 编译为 ||.</p><p>在 while, if/else, switch/when 的语句当中,  then 可以被用来分隔判断条件跟表达式, 这样就不用强制写换行或者分号了.</p><p>就像 YAML, on 和 yes 跟 true 是一样的, 而 off 和 no 是布尔值 false.</p><p>unless 可以认为是 if 相反的版本.</p><p>this.property 简短的写法可以用 @property.</p><p>可以用 in 判断数据在数组中是否出现, 而 of 可以探测 JavaScript 对象的属性是否存在.</p><p>为了简化数学表达式, ** 可以用来表示乘方, // 表示整除, %% 提供数学的模运算(译注: true mathematical modulo?).</p><p>完整的列表:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CoffeeScriptJavaScript</span><br><span class="line">is           ===</span><br><span class="line">isnt         !==</span><br><span class="line">not            !</span><br><span class="line">and           &amp;&amp;</span><br><span class="line">or             ||</span><br><span class="line">true, yes, on  true</span><br><span class="line">false, no, offfalse</span><br><span class="line">@, this        this</span><br><span class="line">of           in</span><br><span class="line">in         no JS equivalent</span><br><span class="line">a ** b     Math.pow(a, b)</span><br><span class="line">a // b     Math.floor(a / b)</span><br><span class="line">a %% b       (a % b + b) % b</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CoffeeScript&lt;/strong&gt; 是一门编译到 JavaScript 的小巧语言. 在 Java 般笨拙的外表下, JavaScript 其实有着一颗华丽的心脏. CoffeeScript 尝试用简洁的方式展示 JavaScript 优秀的部分.&lt;/p&gt;
&lt;p&gt;CoffeeScript 的指导原则是: “&lt;strong&gt;她仅仅是 JavaScript&lt;/strong&gt;“. 代码一一对应地编译到 JS, 不会在编译过程中进行解释. 已有的 JavaScript 类库可以无缝地和 CoffeeScript 搭配使用, 反之亦然. 编译后的代码是可读的, 且经过美化, 能在所有 JavaScript 环境中运行, 并且应该和对应手写的 JavaScript 一样快或者更快.&lt;br&gt;
    
    </summary>
    
    
      <category term="coffeeScript" scheme="https://lirawx.me/tags/coffeeScript/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装BTSync</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-Ubuntu%E5%AE%89%E8%A3%85BTSync.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-Ubuntu安装BTSync.html</id>
    <published>2017-07-05T04:56:56.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>BTSync是多台电脑之间同步文件的利器，很好用。</p><p>在Ubuntu上安装BTSync的步骤：</p><h2 id="添加btsync官方的Repository"><a href="#添加btsync官方的Repository" class="headerlink" title="添加btsync官方的Repository"></a>添加btsync官方的Repository</h2><p>以下命令新建一个 /etc/apt/sources.list.d/btsync.list 文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh -c &apos;echo &quot;deb http://linux-packages.getsync.com/btsync/deb btsync non-free&quot; &gt; /etc/apt/sources.list.d/btsync.list&apos;</span><br></pre></td></tr></table></figure><h2 id="安装BTSync的Public-key"><a href="#安装BTSync的Public-key" class="headerlink" title="安装BTSync的Public key"></a>安装BTSync的Public key</h2><a id="more"></a><p>使Ubuntu信任此BTSync提供的Repository。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -qO - http://linux-packages.getsync.com/btsync/key.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>接下来就能用apt-get安装BTSync了，需要先update一下。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install btsync</span><br></pre></td></tr></table></figure><h2 id="创建用于同步的目录"><a href="#创建用于同步的目录" class="headerlink" title="创建用于同步的目录"></a>创建用于同步的目录</h2><p>安装默认创建了一个btsync用户，可以创建一个新目录并授权给btsync用户，以后同步的内容就放在这个目录下。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir /home/btsync</span><br><span class="line">sudo chown btsync /home/btsync</span><br></pre></td></tr></table></figure><h2 id="使BTSync自动启动"><a href="#使BTSync自动启动" class="headerlink" title="使BTSync自动启动"></a>使BTSync自动启动</h2><p>默认启动服务的用户是btsync<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable btsync</span><br></pre></td></tr></table></figure></p><p>除了enable，systemctl命令还可以带disable、start、stop、status等参数。</p><h2 id="通过web设置BTSync"><a href="#通过web设置BTSync" class="headerlink" title="通过web设置BTSync"></a>通过web设置BTSync</h2><p>在本地用浏览器访问localhost:8888即可。</p><p>如果是VPS或Ubuntu server等没有图形界面的系统，可以编辑BTSync的配置文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/btsync/config.json</span><br></pre></td></tr></table></figure><p>找到下面内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;webui&quot; :</span><br><span class="line">&#123;</span><br><span class="line">    &quot;listen&quot; : &quot;127.0.0.1:8888&quot;</span><br><span class="line">    //&quot;listen&quot; : &quot;0.0.0.0:8888&quot;, 外网访问</span><br><span class="line">    &quot;login&quot; : &quot;yourusername&quot;,</span><br><span class="line">    &quot;password&quot; : &quot;yourpassword&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 “127.0.0.1:8888” 修改为 “0.0.0.0:8888” ，保存退出。重启BTSync。<br>然后就能用其他机器的浏览器访问 “Ubuntu_IP:8888” 来设置BTSync。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BTSync是多台电脑之间同步文件的利器，很好用。&lt;/p&gt;
&lt;p&gt;在Ubuntu上安装BTSync的步骤：&lt;/p&gt;
&lt;h2 id=&quot;添加btsync官方的Repository&quot;&gt;&lt;a href=&quot;#添加btsync官方的Repository&quot; class=&quot;headerlink&quot; title=&quot;添加btsync官方的Repository&quot;&gt;&lt;/a&gt;添加btsync官方的Repository&lt;/h2&gt;&lt;p&gt;以下命令新建一个 /etc/apt/sources.list.d/btsync.list 文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo sh -c &amp;apos;echo &amp;quot;deb http://linux-packages.getsync.com/btsync/deb btsync non-free&amp;quot; &amp;gt; /etc/apt/sources.list.d/btsync.list&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装BTSync的Public-key&quot;&gt;&lt;a href=&quot;#安装BTSync的Public-key&quot; class=&quot;headerlink&quot; title=&quot;安装BTSync的Public key&quot;&gt;&lt;/a&gt;安装BTSync的Public key&lt;/h2&gt;
    
    </summary>
    
    
      <category term="linux ubuntu" scheme="https://lirawx.me/tags/linux-ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Oracle 与 MySql 区别(笔记)</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-Oracle%20%E4%B8%8E%20MySql%20%E5%8C%BA%E5%88%AB(%E7%AC%94%E8%AE%B0).html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-Oracle 与 MySql 区别(笔记).html</id>
    <published>2017-07-05T04:55:41.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、并发性"><a href="#一、并发性" class="headerlink" title="一、并发性"></a>一、并发性</h2><p>并发性是oltp数据库最重要的特性，但并发涉及到资源的获取、共享与锁定。</p><p>mysql:<br>mysql以表级锁为主，对资源锁定的粒度很大，如果一个session对一个表加锁时间过长，会让其他session无法更新此表中的数据。<br>虽然InnoDB引擎的表可以用行级锁，但这个行级锁的机制依赖于表的索引，如果表没有索引，或者sql语句没有使用索引，那么仍然使用表级锁。<br><a id="more"></a><br>oracle:<br>oracle使用行级锁，对资源锁定的粒度要小很多，只是锁定sql需要的资源，并且加锁是在数据库中的数据行上，不依赖与索引。所以oracle对并发性的支持要好很多。</p><h2 id="二、一致性"><a href="#二、一致性" class="headerlink" title="二、一致性"></a>二、一致性</h2><p>oracle:<br>oracle支持serializable的隔离级别，可以实现最高级别的读一致性。每个session提交后其他session才能看到提交的更改。oracle通过在undo表空间中构造多版本数据块来实现读一致性，<br>每个session查询时，如果对应的数据块发生变化，oracle会在undo表空间中为这个session构造它查询时的旧的数据块。</p><p>mysql:<br>mysql没有类似oracle的构造多版本数据块的机制，只支持read commited的隔离级别。一个session读取数据时，其他session不能更改数据，但可以在表最后插入数据。<br>session更新数据时，要加上排它锁，其他session无法访问数据。</p><h2 id="三、事务"><a href="#三、事务" class="headerlink" title="三、事务"></a>三、事务</h2><p>oracle很早就完全支持事务。</p><p>mysql在innodb存储引擎的行级锁的情况下才支持事务。</p><h2 id="四、数据持久性"><a href="#四、数据持久性" class="headerlink" title="四、数据持久性"></a>四、数据持久性</h2><p>oracle<br>保证提交的数据均可恢复，因为oracle把提交的sql操作线写入了在线联机日志文件中，保持到了磁盘上，<br>如果出现数据库或主机异常重启，重启后oracle可以考联机在线日志恢复客户提交的数据。<br>mysql:<br>默认提交sql语句，但如果更新过程中出现db或主机重启的问题，也许会丢失数据。</p><h2 id="五、提交方式"><a href="#五、提交方式" class="headerlink" title="五、提交方式"></a>五、提交方式</h2><p>oracle默认不自动提交，需要用户手动提交。<br>mysql默认是自动提交。</p><h2 id="六、逻辑备份"><a href="#六、逻辑备份" class="headerlink" title="六、逻辑备份"></a>六、逻辑备份</h2><p>oracle逻辑备份时不锁定数据，且备份的数据是一致的。</p><p>mysql逻辑备份时要锁定数据，才能保证备份的数据是一致的，影响业务正常的dml使用。</p><h2 id="七、热备份"><a href="#七、热备份" class="headerlink" title="七、热备份"></a>七、热备份</h2><p>oracle有成熟的热备工具rman，热备时，不影响用户使用数据库。即使备份的数据库不一致，也可以在恢复时通过归档日志和联机重做日志进行一致的回复。<br>mysql:<br>myisam的引擎，用mysql自带的mysqlhostcopy热备时，需要给表加读锁，影响dml操作。<br>innodb的引擎，它会备份innodb的表和索引，但是不会备份.frm文件。用ibbackup备份时，会有一个日志文件记录备份期间的数据变化，因此可以不用锁表，不影响其他用户使用数据库。但此工具是收费的。<br>innobackup是结合ibbackup使用的一个脚本，他会协助对.frm文件的备份。</p><h2 id="八、sql语句的扩展和灵活性"><a href="#八、sql语句的扩展和灵活性" class="headerlink" title="八、sql语句的扩展和灵活性"></a>八、sql语句的扩展和灵活性</h2><p>mysql对sql语句有很多非常实用而方便的扩展，比如limit功能，insert可以一次插入多行数据，select某些管理数据可以不加from。<br>oracle在这方面感觉更加稳重传统一些。</p><h2 id="九、复制"><a href="#九、复制" class="headerlink" title="九、复制"></a>九、复制</h2><p>oracle:既有推或拉式的传统数据复制，也有dataguard的双机或多机容灾机制，主库出现问题是，可以自动切换备库到主库，但配置管理较复杂。<br>mysql:复制服务器配置简单，但主库出问题时，丛库有可能丢失一定的数据。且需要手工切换丛库到主库。</p><h2 id="十、性能诊断"><a href="#十、性能诊断" class="headerlink" title="十、性能诊断"></a>十、性能诊断</h2><p>oracle有各种成熟的性能诊断调优工具，能实现很多自动分析、诊断功能。比如awr、addm、sqltrace、tkproof等<br>mysql的诊断调优方法较少，主要有慢查询日志。</p><h2 id="十一、权限与安全"><a href="#十一、权限与安全" class="headerlink" title="十一、权限与安全"></a>十一、权限与安全</h2><p>mysql的用户与主机有关，感觉没有什么意义，另外更容易被仿冒主机及ip有可乘之机。<br>oracle的权限与安全概念比较传统，中规中矩。</p><h2 id="十二、分区表和分区索引"><a href="#十二、分区表和分区索引" class="headerlink" title="十二、分区表和分区索引"></a>十二、分区表和分区索引</h2><p>oracle的分区表和分区索引功能很成熟，可以提高用户访问db的体验。<br>mysql的分区表还不太成熟稳定。</p><h2 id="十三、管理工具"><a href="#十三、管理工具" class="headerlink" title="十三、管理工具"></a>十三、管理工具</h2><p>oracle有多种成熟的命令行、图形界面、web管理工具，还有很多第三方的管理工具，管理极其方便高效。<br>mysql管理工具较少，在linux下的管理工具的安装有时要安装额外的包（phpmyadmin， etc)，有一定复杂性。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、并发性&quot;&gt;&lt;a href=&quot;#一、并发性&quot; class=&quot;headerlink&quot; title=&quot;一、并发性&quot;&gt;&lt;/a&gt;一、并发性&lt;/h2&gt;&lt;p&gt;并发性是oltp数据库最重要的特性，但并发涉及到资源的获取、共享与锁定。&lt;/p&gt;
&lt;p&gt;mysql:&lt;br&gt;mysql以表级锁为主，对资源锁定的粒度很大，如果一个session对一个表加锁时间过长，会让其他session无法更新此表中的数据。&lt;br&gt;虽然InnoDB引擎的表可以用行级锁，但这个行级锁的机制依赖于表的索引，如果表没有索引，或者sql语句没有使用索引，那么仍然使用表级锁。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://lirawx.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java基础知识笔记（2）</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-java基础知识笔记（2）.html</id>
    <published>2017-07-05T04:55:02.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h2><ol><li>接口不能用于实例化对象</li><li>接口没有构造函数</li><li>接口的所有方法必须是抽象方法</li><li>接口不能包括成员变量，除 static final 修饰外</li><li>接口不能被类继承，只能被类实现</li><li>接口可以多重继承<blockquote><p>接口的方法只能是 public abstract 修饰，变量只能public static final修饰</p></blockquote></li></ol><a id="more"></a><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><ul><li>接口： 代表集合的抽象数据类型</li><li>实现(类)：集合接口的具体实现</li><li>算法:实现集合接口的对象里的方法，执行一些相关计算<br><img src="http://www.runoob.com/wp-content/uploads/2014/01/java-coll.png" alt=""></li></ul><h3 id="set-和list的区别"><a href="#set-和list的区别" class="headerlink" title="set 和list的区别"></a>set 和list的区别</h3><ol><li><p>set接口实例存储无序且不重复数据</p><p>list存储有序且数据可重复</p></li><li>set效率低下，删除插入效率高</li><li>list和数组一样可以动态增长，查找效率高</li></ol><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="方法的重写规则"><a href="#方法的重写规则" class="headerlink" title="方法的重写规则"></a>方法的重写规则</h3><ul><li>参数列表必须完全与被重写方法的相同；</li><li>返回类型必须完全与被重写方法的返回类型相同；</li><li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。</li><li>父类的成员方法只能被它的子类重写。</li><li>声明为final的方法不能被重写。</li><li>声明为static的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明- - 为public和protected的非final方法。</li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li><li>构造方法不能被重写。</li><li>如果不能继承一个方法，则不能重写这个方法。</li></ul><h3 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h3><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。<br>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。<br>最常用的地方就是构造器的重载。<br>重载规则</p><ul><li>被重载的方法必须改变参数列表(参数个数或类型或顺序不一样)；</li><li>被重载的方法可以改变返回类型；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法可以声明新的或更广的检查异常；</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><h3 id="多态存在的三个必要条件"><a href="#多态存在的三个必要条件" class="headerlink" title="多态存在的三个必要条件"></a>多态存在的三个必要条件</h3><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象</li></ul><h3 id="抽象类总结规定"><a href="#抽象类总结规定" class="headerlink" title="抽象类总结规定"></a>抽象类总结规定</h3><ol><li>抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。</li><li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li><li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。</li><li>构造方法，类方法（用static修饰的方法）不能声明为抽象方法。</li><li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</li></ol><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>在面向对象程式设计方法中，封装（英语：Encapsulation）是指一种将抽象性函式接口的实现细节部份包装、隐藏起来的方法。<br>封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。<br>要访问该类的代码和数据，必须通过严格的接口控制。<br>封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。<br>适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。<br>封装的优点</p><ol><li>良好的封装能够减少耦合。</li><li>类内部的结构可以自由修改。</li><li>可以对成员变量进行更精确的控制。</li><li>隐藏信息，实现细节。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;接口-interface&quot;&gt;&lt;a href=&quot;#接口-interface&quot; class=&quot;headerlink&quot; title=&quot;接口(interface)&quot;&gt;&lt;/a&gt;接口(interface)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;接口不能用于实例化对象&lt;/li&gt;
&lt;li&gt;接口没有构造函数&lt;/li&gt;
&lt;li&gt;接口的所有方法必须是抽象方法&lt;/li&gt;
&lt;li&gt;接口不能包括成员变量，除 static final 修饰外&lt;/li&gt;
&lt;li&gt;接口不能被类继承，只能被类实现&lt;/li&gt;
&lt;li&gt;接口可以多重继承&lt;blockquote&gt;
&lt;p&gt;接口的方法只能是 public abstract 修饰，变量只能public static final修饰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://lirawx.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java基础知识笔记（1）</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-java基础知识笔记（1）.html</id>
    <published>2017-07-05T04:54:25.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先确定以下概念："><a href="#首先确定以下概念：" class="headerlink" title="首先确定以下概念："></a>首先确定以下概念：</h2><ul><li><strong>对象</strong>：对象是一个类的实例</li><li><strong>类</strong>：类是一个模块，它描述一类对象的行为和状态</li><li><strong>方法</strong>：方法就是行为，逻辑运算，数据修改，所有动作都是在方法中完成的</li><li><strong>实例变量</strong>：每个对象都有独特的实例变量，用于保存对象的状态。</li></ul><a id="more"></a><h2 id="类型变量"><a href="#类型变量" class="headerlink" title="类型变量"></a>类型变量</h2><ul><li>局部变量 ： 声明和初始化都在方法中</li><li>成员变量： 定义在类中，方法体外</li><li>类变量： static 修饰</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>内置数据类型:<ul><li>byte(-2^7 ~ 2^7-1)</li><li>short(-2^15 ~ 2^15-1)</li><li>int(-2^31 ~ 2^31-1)</li><li>log(-2^63 ~ 2^63-1)</li><li>float(0.0f 32位)</li><li>double(0.0d 64位)</li><li>boolean</li><li>char(\u0000 ~ \uffff)</li></ul></li><li><p>引用类型：</p><p>引用类型指向一个对象，指向对象的变量就是引用变量。如site</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Site site = new Site(&quot;http://lirawx.cn&quot;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h2><ul><li>转换顺序<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">byte,short,char -&gt; int -&gt; long -&gt; float -&gt; double</span><br></pre></td></tr></table></figure></li></ul><ol><li>不能对boolean转换</li><li>不能把对象转成不相关的类</li><li>容量大的转换成小的，转换过程总会溢出或损失精度<pre><code>int i = 128;byte b = (byte)i;</code></pre>   byte最大127，会溢出</li><li>浮点数到整数，会舍弃小数，不是简单的四舍五入<pre><code>(int)12.7 == 12(int)-25.89f == -45</code></pre></li></ol><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">当前类</th><th style="text-align:left">同一包内</th><th style="text-align:left">子孙类</th><th style="text-align:left">其他内</th></tr></thead><tbody><tr><td style="text-align:left">public</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td></tr><tr><td style="text-align:left">protected</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">default</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">private</td><td style="text-align:left">可以访问</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr></tbody></table><blockquote><p>不使用任何关键字：对同一包内可见，接口变量隐式的声明为 public static final，接口里的方法默认情况访问权限为public。</p></blockquote><h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><ul><li>static：独立于对象的静态变量，类变量，切静态变量只有一份拷贝</li><li>final：修饰的类不能继承，修饰的方法不能被继承类重新定义，变量不可修改</li><li>abstract：创建抽象类和抽象方法</li><li>synchronized/volatile： 用于线程</li><li>transient : 修饰短暂属性</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;首先确定以下概念：&quot;&gt;&lt;a href=&quot;#首先确定以下概念：&quot; class=&quot;headerlink&quot; title=&quot;首先确定以下概念：&quot;&gt;&lt;/a&gt;首先确定以下概念：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对象&lt;/strong&gt;：对象是一个类的实例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类&lt;/strong&gt;：类是一个模块，它描述一类对象的行为和状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法&lt;/strong&gt;：方法就是行为，逻辑运算，数据修改，所有动作都是在方法中完成的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实例变量&lt;/strong&gt;：每个对象都有独特的实例变量，用于保存对象的状态。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://lirawx.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2017-05-19-总结</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-2017-05-19-%E6%80%BB%E7%BB%93.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-2017-05-19-总结.html</id>
    <published>2017-07-05T04:53:26.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不是你上了大学，而是你被大学上了</p></blockquote><p>首先写这篇总结的原因，从5月初开始我投了大量的简历，然而其结果都是被干掉，我归结出几个原因：</p><ul><li>大学太过平庸</li></ul><p>大学里我一直宅在宿舍里，至少是大一到到大二都是这样，自己刚刚接触到大学这个庞大的团体，每天都有新的事物吸引着我的注意力，而我始终都没有明确自己的理想与目标，我一直以为同学都差不多，其实差很多，当我在召唤师峡谷里欲仙欲死的时候有的同学在看专业书籍准备考研，有的在准备面试暑期实习生，有的甚至在看雅思，托付，等等一些高大上的书籍，准备考证。而我或者我们这一类人都嗤之以鼻，很不屑，”<strong>大学不是来玩的么</strong>“，这句话高中老师肯定多对我们说过，很遗憾，我们上课知识点没记住，却记住了这个最坑爹的一句话。我只想说你玩得起吗？你爸是李刚？你家族很庞大？你已经身家过亿？<br><a id="more"></a></p><ul><li>缺乏自主性和计划性</li></ul><p>大学每天除了上课，就是在宿舍上网或者打游戏，这是常态，但是我很遗憾的告诉你，人生不是这么过的，一旦你陷入了享乐主义的恶性循环你会发现你的人生一团糟。你刚刚起床，考研的同学已经吃好早饭，到自习室或者图书馆自习了，而当你在床上玩着手机，自以为生活就是该这么悠闲，大学真好玩的时候，自学做技术的人已经完成了项目的一个模块了。当你中午起床的时候，你觉得一天才刚刚开始，然后你打开电脑，发现很无聊，点开了LOL，然后和队友互怼，你觉得很生气，然后你继续下一把，发现这把还行，。。。。。。n局后，唉，怎么天都黑了，然后你继续躺上床，捧着KINDLE，装着文艺，看着玄幻爽文，我去，猪脚帅的跟我一样，放技能都是恐怖如斯！。。。。N day 过去，你混着日子过完春夏秋冬，突然就毕业了，人家要么考清华北大，而你只能家里蹲，要么就是拿到大厂的OFFER，而你却说不急，我慢慢找（找你妹啊！！）。</p><ul><li>缺乏清醒的自我认识</li></ul><p>每个人考到大学，都觉得自己很牛逼，把电脑装饰linux，然后进入字符界面， sudo apt get install cmatrix ，运行之后，哇，这不是黑客帝国吗，我好牛逼，然后就没有然后了，一点也没有深入理解其中运行原理。这样的例子还有很多，每个人都觉得自己了不起，吧自己的身段放的老高，忘了自己应届生的身份，找工作的时候，发现好难，校招的题目都做不出来，去社招面试，结果一点项目经验都没有，over，一遍一遍始终都摆不正自己的身份，没有什么是应该的，你不会就是不会，没有什么可以狡辩的，copy再多，自己也写不出一行代码，悲哀。</p><ul><li>缺乏对职业的认识</li></ul><p>职业是什么，说白了就是你将来用来养家糊口的工具手段，当一个人温饱都成问题的时候，哪有什么职业可言，你必须要计划自己将来5到10年你想做什么，而不是等着老师给你布置 “找工作”的作业，职业是使命，你得为之付出青春和汗水，而不能丝毫怀疑，同时你还要学习，不断的学习，职业随着时间的延长，会不断进化发展，会需要很多的技能，你没有掌握就会被时代遗弃，简单来说你会丢掉饭碗。所以你要努力的保护自己的饭碗。当然有了职业，并不是说你所有的心思都必须放在它上面，你得学会分清主次，工作的时候要认真负责，休息的时候可以和同事交流分享经验，与人相处也是职业成功的必备要素。同时你还有有减轻自己工作压力的方法，比如打篮球，钓鱼，打保龄球等等之类的休闲活动。劳逸结合才能走得更远更舒畅。</p><ul><li>学校培养人才和社会需要严重脱节</li></ul><p>21世纪，科技发展迅速，职业素养要求越来越高，学校里的课程只能教授一些基本的知识，无法实际应用于社会生产，导致了很大一部分同学很被动，也很悲哀，被夹在当中，很无奈，没法找到理想的工作，也没有健全自己的道德素养体系，缺乏对自我的认识，没有自主性。种种原因导致了现阶段的一系列问题。</p><p>以上是个人浅见，或者说牢骚，慎重翻阅！！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不是你上了大学，而是你被大学上了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先写这篇总结的原因，从5月初开始我投了大量的简历，然而其结果都是被干掉，我归结出几个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大学太过平庸&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大学里我一直宅在宿舍里，至少是大一到到大二都是这样，自己刚刚接触到大学这个庞大的团体，每天都有新的事物吸引着我的注意力，而我始终都没有明确自己的理想与目标，我一直以为同学都差不多，其实差很多，当我在召唤师峡谷里欲仙欲死的时候有的同学在看专业书籍准备考研，有的在准备面试暑期实习生，有的甚至在看雅思，托付，等等一些高大上的书籍，准备考证。而我或者我们这一类人都嗤之以鼻，很不屑，”&lt;strong&gt;大学不是来玩的么&lt;/strong&gt;“，这句话高中老师肯定多对我们说过，很遗憾，我们上课知识点没记住，却记住了这个最坑爹的一句话。我只想说你玩得起吗？你爸是李刚？你家族很庞大？你已经身家过亿？&lt;br&gt;
    
    </summary>
    
    
      <category term="日记" scheme="https://lirawx.me/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>热爱工作热爱生活</title>
    <link href="https://lirawx.me/2017/07/05/2017-07-05-%E7%83%AD%E7%88%B1%E5%B7%A5%E4%BD%9C%E7%83%AD%E7%88%B1%E7%94%9F%E6%B4%BB.html"/>
    <id>https://lirawx.me/2017/07/05/2017-07-05-热爱工作热爱生活.html</id>
    <published>2017-07-05T04:00:29.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>每个人在开始工作初期，树立远大理想，追求一个卓越的人生。但最终，人追求的是快乐。现阶段的社会，过于急功近利，大多数的人都淹没在了欲望的海洋里，最终忘记了最初的梦想，沦为平庸。当然有的人会认为有很多钱才能快乐，被别人认可也会感到快乐，但是如果一直重复着平庸琐碎的工作，你一定不会快乐。所以我们要追求快乐，在追求快乐的过程中，或许你的荷包会越来越鼓，你的名声越来越大，但请不要忘记，这只是追求快乐的过程中所带来的附加产品。我提供两个建议：</p><ul><li>不要害怕失败</li><li>制定自己的计划</li></ul><h2 id="软件是一门生意"><a href="#软件是一门生意" class="headerlink" title="软件是一门生意"></a>软件是一门生意</h2><p>软件是一门生意，程序员是一个生意人。把职业想象成一个产品的生命周期，主要有四个方面用于职业发展。<br><a id="more"></a></p><h3 id="选择市场"><a href="#选择市场" class="headerlink" title="选择市场"></a>选择市场</h3><p>在市场的选择上，有很多要考虑的因素，比如技术的稳定性，技术的发展前景，还有技术人员的供需关系，当你确定之后你要努力的了解你工作的公司所处的行业，只有你熟悉你所在行业，才能更好的完成产品。同时你也要努力发展自身，你不需要成为一名专家，你得成为一名通才，你必须理解程序运行的过程，编译原理，还要预计会出现什么问题，解决这个问题需要什么样的技术？然后是否值得花费时间去接触和学习，对自己未来有什么帮助。一个产品发布的同时，要学会分享，分享给同事，经理等等。。</p><h3 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h3><p>要做一个机会主义者，抓住身边的机会，努力提高自己，拓展自己的知识面，接触不同的行业，明白每个行业的盈利模式，学习软件开发的步骤。这个过程可能会需要一个老师，这个老师不是传统意义上的老师，他只是这一个行业的标杆，你向他看齐学习这个行业的一切。最后只要不断的练习，练习，练习。</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>执行是对自己行为的一种定义，简单来说要低调。你必须要有一颗雄心，但不必路人皆。你可以适当从一些字里行间或交谈间了解到经理或者客户需要什么样的功能，然后如果可以就去完成它，说不定将来经理会提出开发这个功能，而你已经做完了。同时要给自己制定计划，每天都要写日志，每周都有总结，每个月都有目标，每年都会规划好发展道路。最后你必须专注现在的工作，因为这让你离未来的目标更近，同时每天都要思考怎么把手头的工作做好。</p><p>要明白自己的价值所在，每天都可以问自己我今天创造了多少价值。价值的多少跟时间没有什么太大的关联，每天8小时激情燃烧，就已经最大限度的创造价值了，时间再长也只是浪费自己宝贵的时间而已。在工作中必须保持紧迫感，因为没有人是无可替代的，当你的创造出的产值远远小于公司对你的投资，你就要走人了。当然紧迫不是慌乱，要纵览全局，把握自己的位置，每天都要取得一定的进步。取得进步的有效方法是失败和模仿。<strong>好的艺术家会抄袭，而巨匠会偷–毕加索</strong>，寻求现有的解决方案来解决自己问题这不可耻，但你必须深刻理解解决方案的原理，并从中学习积累到相关经验。</p><h3 id="推销-。。。不仅仅是迎合"><a href="#推销-。。。不仅仅是迎合" class="headerlink" title="推销 。。。不仅仅是迎合"></a>推销 。。。不仅仅是迎合</h3><p>首先我们来讲一个古老的心理学问题：如果森林里的一棵大树倒下了，却没有人听到它倒下的声音，那么它倒下的时候到底有没有发出声响？正确答案是：“谁会在意这个？”</p><p>树倒下可能会制造出了声响，但并没有人听到它倒下的声音，那么树倒下去制造声响的这一事实是无关紧要的。</p><p>工作也一样，如果你非常出色，但没有人知道，那你真的优秀吗?谁会在意？</p><p>而且人与人之间的评价都是主观的，公司里的绩效考评也是主观的，别人都不知道你，怎么可能会给你高的评价，所以沟通能力很重要，程序员关门敲代码的时代造就过去式了，这个社会，程序员必须要具备一定的沟通能力，写作能力，因为程序员会与经理，客户，同事等等一些人有交流的必要。要成为一个卓越的人。卓越是什么意思，卓越就是值得被关注。你得在别人心里留下好的印象，才能说你优秀甚至卓越。</p><h3 id="保持技术领先"><a href="#保持技术领先" class="headerlink" title="保持技术领先"></a>保持技术领先</h3><p>现在这个社会发展很快，技术更新，淘汰也很快，需要时刻保持警惕，说不定第二天就失去了工作，要与时俱进。关注一些技术达人，学习他们所关注的一些技术，每天都进步一点。</p><p>同时要学会绘制一张职业蓝图，包括自己所经历过的职业，所学过的技能。罗列出职业发展时间表。</p><p>职业发展道路中，树立远大目标，但在实现过程中，需要根据实际情况不断进行更正，从实践中学习，不断改变自己的目标。同时要学着独立，不依赖于他人去解决问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;每个人在开始工作初期，树立远大理想，追求一个卓越的人生。但最终，人追求的是快乐。现阶段的社会，过于急功近利，大多数的人都淹没在了欲望的海洋里，最终忘记了最初的梦想，沦为平庸。当然有的人会认为有很多钱才能快乐，被别人认可也会感到快乐，但是如果一直重复着平庸琐碎的工作，你一定不会快乐。所以我们要追求快乐，在追求快乐的过程中，或许你的荷包会越来越鼓，你的名声越来越大，但请不要忘记，这只是追求快乐的过程中所带来的附加产品。我提供两个建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要害怕失败&lt;/li&gt;
&lt;li&gt;制定自己的计划&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;软件是一门生意&quot;&gt;&lt;a href=&quot;#软件是一门生意&quot; class=&quot;headerlink&quot; title=&quot;软件是一门生意&quot;&gt;&lt;/a&gt;软件是一门生意&lt;/h2&gt;&lt;p&gt;软件是一门生意，程序员是一个生意人。把职业想象成一个产品的生命周期，主要有四个方面用于职业发展。&lt;br&gt;
    
    </summary>
    
    
      <category term="日记" scheme="https://lirawx.me/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装BTSync</title>
    <link href="https://lirawx.me/2015/linux/ubuntu-btsync.html"/>
    <id>https://lirawx.me/2015/linux/ubuntu-btsync.html</id>
    <published>2017-05-25T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>BTSync是多台电脑之间同步文件的利器，很好用。</p><p>在Ubuntu上安装BTSync的步骤：</p><h2 id="添加btsync官方的Repository"><a href="#添加btsync官方的Repository" class="headerlink" title="添加btsync官方的Repository"></a>添加btsync官方的Repository</h2><p>以下命令新建一个 /etc/apt/sources.list.d/btsync.list 文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh -c &apos;echo &quot;deb http://linux-packages.getsync.com/btsync/deb btsync non-free&quot; &gt; /etc/apt/sources.list.d/btsync.list&apos;</span><br></pre></td></tr></table></figure><h2 id="安装BTSync的Public-key"><a href="#安装BTSync的Public-key" class="headerlink" title="安装BTSync的Public key"></a>安装BTSync的Public key</h2><a id="more"></a><p>使Ubuntu信任此BTSync提供的Repository。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -qO - http://linux-packages.getsync.com/btsync/key.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>接下来就能用apt-get安装BTSync了，需要先update一下。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install btsync</span><br></pre></td></tr></table></figure><h2 id="创建用于同步的目录"><a href="#创建用于同步的目录" class="headerlink" title="创建用于同步的目录"></a>创建用于同步的目录</h2><p>安装默认创建了一个btsync用户，可以创建一个新目录并授权给btsync用户，以后同步的内容就放在这个目录下。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir /home/btsync</span><br><span class="line">sudo chown btsync /home/btsync</span><br></pre></td></tr></table></figure><h2 id="使BTSync自动启动"><a href="#使BTSync自动启动" class="headerlink" title="使BTSync自动启动"></a>使BTSync自动启动</h2><p>默认启动服务的用户是btsync<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable btsync</span><br></pre></td></tr></table></figure></p><p>除了enable，systemctl命令还可以带disable、start、stop、status等参数。</p><h2 id="通过web设置BTSync"><a href="#通过web设置BTSync" class="headerlink" title="通过web设置BTSync"></a>通过web设置BTSync</h2><p>在本地用浏览器访问localhost:8888即可。</p><p>如果是VPS或Ubuntu server等没有图形界面的系统，可以编辑BTSync的配置文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/btsync/config.json</span><br></pre></td></tr></table></figure><p>找到下面内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;webui&quot; :</span><br><span class="line">&#123;</span><br><span class="line">    &quot;listen&quot; : &quot;127.0.0.1:8888&quot;</span><br><span class="line">    //&quot;listen&quot; : &quot;0.0.0.0:8888&quot;, 外网访问</span><br><span class="line">    &quot;login&quot; : &quot;yourusername&quot;,</span><br><span class="line">    &quot;password&quot; : &quot;yourpassword&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 “127.0.0.1:8888” 修改为 “0.0.0.0:8888” ，保存退出。重启BTSync。<br>然后就能用其他机器的浏览器访问 “Ubuntu_IP:8888” 来设置BTSync。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BTSync是多台电脑之间同步文件的利器，很好用。&lt;/p&gt;
&lt;p&gt;在Ubuntu上安装BTSync的步骤：&lt;/p&gt;
&lt;h2 id=&quot;添加btsync官方的Repository&quot;&gt;&lt;a href=&quot;#添加btsync官方的Repository&quot; class=&quot;headerlink&quot; title=&quot;添加btsync官方的Repository&quot;&gt;&lt;/a&gt;添加btsync官方的Repository&lt;/h2&gt;&lt;p&gt;以下命令新建一个 /etc/apt/sources.list.d/btsync.list 文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo sh -c &amp;apos;echo &amp;quot;deb http://linux-packages.getsync.com/btsync/deb btsync non-free&amp;quot; &amp;gt; /etc/apt/sources.list.d/btsync.list&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装BTSync的Public-key&quot;&gt;&lt;a href=&quot;#安装BTSync的Public-key&quot; class=&quot;headerlink&quot; title=&quot;安装BTSync的Public key&quot;&gt;&lt;/a&gt;安装BTSync的Public key&lt;/h2&gt;
    
    </summary>
    
    
      <category term="btsync ubuntu" scheme="https://lirawx.me/tags/btsync-ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>程序员职业规划</title>
    <link href="https://lirawx.me/2016/engineer/careerPlanning.html"/>
    <id>https://lirawx.me/2016/engineer/careerPlanning.html</id>
    <published>2017-05-21T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>热爱工作热爱生活</p></blockquote><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>每个人在开始工作初期，树立远大理想，追求一个卓越的人生。但最终，人追求的是快乐。现阶段的社会，过于急功近利，大多数的人都淹没在了欲望的海洋里，最终忘记了最初的梦想，沦为平庸。当然有的人会认为有很多钱才能快乐，被别人认可也会感到快乐，但是如果一直重复着平庸琐碎的工作，你一定不会快乐。所以我们要追求快乐，在追求快乐的过程中，或许你的荷包会越来越鼓，你的名声越来越大，但请不要忘记，这只是追求快乐的过程中所带来的附加产品。我提供两个建议：</p><ul><li>不要害怕失败</li><li>制定自己的计划</li></ul><h2 id="软件是一门生意"><a href="#软件是一门生意" class="headerlink" title="软件是一门生意"></a>软件是一门生意</h2><p>软件是一门生意，程序员是一个生意人。把职业想象成一个产品的生命周期，主要有四个方面用于职业发展。<br><a id="more"></a></p><h3 id="选择市场"><a href="#选择市场" class="headerlink" title="选择市场"></a>选择市场</h3><p>在市场的选择上，有很多要考虑的因素，比如技术的稳定性，技术的发展前景，还有技术人员的供需关系，当你确定之后你要努力的了解你工作的公司所处的行业，只有你熟悉你所在行业，才能更好的完成产品。同时你也要努力发展自身，你不需要成为一名专家，你得成为一名通才，你必须理解程序运行的过程，编译原理，还要预计会出现什么问题，解决这个问题需要什么样的技术？然后是否值得花费时间去接触和学习，对自己未来有什么帮助。一个产品发布的同时，要学会分享，分享给同事，经理等等。。</p><h3 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h3><p>要做一个机会主义者，抓住身边的机会，努力提高自己，拓展自己的知识面，接触不同的行业，明白每个行业的盈利模式，学习软件开发的步骤。这个过程可能会需要一个老师，这个老师不是传统意义上的老师，他只是这一个行业的标杆，你向他看齐学习这个行业的一切。最后只要不断的练习，练习，练习。</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>执行是对自己行为的一种定义，简单来说要低调。你必须要有一颗雄心，但不必路人皆。你可以适当从一些字里行间或交谈间了解到经理或者客户需要什么样的功能，然后如果可以就去完成它，说不定将来经理会提出开发这个功能，而你已经做完了。同时要给自己制定计划，每天都要写日志，每周都有总结，每个月都有目标，每年都会规划好发展道路。最后你必须专注现在的工作，因为这让你离未来的目标更近，同时每天都要思考怎么把手头的工作做好。</p><p>要明白自己的价值所在，每天都可以问自己我今天创造了多少价值。价值的多少跟时间没有什么太大的关联，每天8小时激情燃烧，就已经最大限度的创造价值了，时间再长也只是浪费自己宝贵的时间而已。在工作中必须保持紧迫感，因为没有人是无可替代的，当你的创造出的产值远远小于公司对你的投资，你就要走人了。当然紧迫不是慌乱，要纵览全局，把握自己的位置，每天都要取得一定的进步。取得进步的有效方法是失败和模仿。<strong>好的艺术家会抄袭，而巨匠会偷–毕加索</strong>，寻求现有的解决方案来解决自己问题这不可耻，但你必须深刻理解解决方案的原理，并从中学习积累到相关经验。</p><h3 id="推销-。。。不仅仅是迎合"><a href="#推销-。。。不仅仅是迎合" class="headerlink" title="推销 。。。不仅仅是迎合"></a>推销 。。。不仅仅是迎合</h3><p>首先我们来讲一个古老的心理学问题：如果森林里的一棵大树倒下了，却没有人听到它倒下的声音，那么它倒下的时候到底有没有发出声响？正确答案是：“谁会在意这个？”</p><p>树倒下可能会制造出了声响，但并没有人听到它倒下的声音，那么树倒下去制造声响的这一事实是无关紧要的。</p><p>工作也一样，如果你非常出色，但没有人知道，那你真的优秀吗?谁会在意？</p><p>而且人与人之间的评价都是主观的，公司里的绩效考评也是主观的，别人都不知道你，怎么可能会给你高的评价，所以沟通能力很重要，程序员关门敲代码的时代造就过去式了，这个社会，程序员必须要具备一定的沟通能力，写作能力，因为程序员会与经理，客户，同事等等一些人有交流的必要。要成为一个卓越的人。卓越是什么意思，卓越就是值得被关注。你得在别人心里留下好的印象，才能说你优秀甚至卓越。</p><h3 id="保持技术领先"><a href="#保持技术领先" class="headerlink" title="保持技术领先"></a>保持技术领先</h3><p>现在这个社会发展很快，技术更新，淘汰也很快，需要时刻保持警惕，说不定第二天就失去了工作，要与时俱进。关注一些技术达人，学习他们所关注的一些技术，每天都进步一点。</p><p>同时要学会绘制一张职业蓝图，包括自己所经历过的职业，所学过的技能。罗列出职业发展时间表。</p><p>职业发展道路中，树立远大目标，但在实现过程中，需要根据实际情况不断进行更正，从实践中学习，不断改变自己的目标。同时要学着独立，不依赖于他人去解决问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;热爱工作热爱生活&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;每个人在开始工作初期，树立远大理想，追求一个卓越的人生。但最终，人追求的是快乐。现阶段的社会，过于急功近利，大多数的人都淹没在了欲望的海洋里，最终忘记了最初的梦想，沦为平庸。当然有的人会认为有很多钱才能快乐，被别人认可也会感到快乐，但是如果一直重复着平庸琐碎的工作，你一定不会快乐。所以我们要追求快乐，在追求快乐的过程中，或许你的荷包会越来越鼓，你的名声越来越大，但请不要忘记，这只是追求快乐的过程中所带来的附加产品。我提供两个建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要害怕失败&lt;/li&gt;
&lt;li&gt;制定自己的计划&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;软件是一门生意&quot;&gt;&lt;a href=&quot;#软件是一门生意&quot; class=&quot;headerlink&quot; title=&quot;软件是一门生意&quot;&gt;&lt;/a&gt;软件是一门生意&lt;/h2&gt;&lt;p&gt;软件是一门生意，程序员是一个生意人。把职业想象成一个产品的生命周期，主要有四个方面用于职业发展。&lt;br&gt;
    
    </summary>
    
    
      <category term="career engineer" scheme="https://lirawx.me/tags/career-engineer/"/>
    
  </entry>
  
  <entry>
    <title>java基础知识笔记（1）</title>
    <link href="https://lirawx.me/2016/diary/2017/05/20/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0(1).html"/>
    <id>https://lirawx.me/2016/diary/2017/05/20/java基础知识笔记(1).html</id>
    <published>2017-05-20T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先确定以下概念："><a href="#首先确定以下概念：" class="headerlink" title="首先确定以下概念："></a>首先确定以下概念：</h2><ul><li><strong>对象</strong>：对象是一个类的实例</li><li><strong>类</strong>：类是一个模块，它描述一类对象的行为和状态</li><li><strong>方法</strong>：方法就是行为，逻辑运算，数据修改，所有动作都是在方法中完成的</li><li><strong>实例变量</strong>：每个对象都有独特的实例变量，用于保存对象的状态。</li></ul><a id="more"></a><h2 id="类型变量"><a href="#类型变量" class="headerlink" title="类型变量"></a>类型变量</h2><ul><li>局部变量 ： 声明和初始化都在方法中</li><li>成员变量： 定义在类中，方法体外</li><li>类变量： static 修饰</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>内置数据类型:<ul><li>byte(-2^7 ~ 2^7-1)</li><li>short(-2^15 ~ 2^15-1)</li><li>int(-2^31 ~ 2^31-1)</li><li>log(-2^63 ~ 2^63-1)</li><li>float(0.0f 32位)</li><li>double(0.0d 64位)</li><li>boolean</li><li>char(\u0000 ~ \uffff)</li></ul></li><li><p>引用类型：</p><p>引用类型指向一个对象，指向对象的变量就是引用变量。如site</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Site site = new Site(&quot;http://lirawx.cn&quot;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h2><ul><li>转换顺序<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">byte,short,char -&gt; int -&gt; long -&gt; float -&gt; double</span><br></pre></td></tr></table></figure></li></ul><ol><li>不能对boolean转换</li><li>不能把对象转成不相关的类</li><li>容量大的转换成小的，转换过程总会溢出或损失精度<pre><code>int i = 128;byte b = (byte)i;</code></pre>   byte最大127，会溢出</li><li>浮点数到整数，会舍弃小数，不是简单的四舍五入<pre><code>(int)12.7 == 12(int)-25.89f == -45</code></pre></li></ol><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">当前类</th><th style="text-align:left">同一包内</th><th style="text-align:left">子孙类</th><th style="text-align:left">其他内</th></tr></thead><tbody><tr><td style="text-align:left">public</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td></tr><tr><td style="text-align:left">protected</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">default</td><td style="text-align:left">可以访问</td><td style="text-align:left">可以访问</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">private</td><td style="text-align:left">可以访问</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr></tbody></table><blockquote><p>不使用任何关键字：对同一包内可见，接口变量隐式的声明为 public static final，接口里的方法默认情况访问权限为public。</p></blockquote><h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><ul><li>static：独立于对象的静态变量，类变量，切静态变量只有一份拷贝</li><li>final：修饰的类不能继承，修饰的方法不能被继承类重新定义，变量不可修改</li><li>abstract：创建抽象类和抽象方法</li><li>synchronized/volatile： 用于线程</li><li>transient : 修饰短暂属性</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;首先确定以下概念：&quot;&gt;&lt;a href=&quot;#首先确定以下概念：&quot; class=&quot;headerlink&quot; title=&quot;首先确定以下概念：&quot;&gt;&lt;/a&gt;首先确定以下概念：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对象&lt;/strong&gt;：对象是一个类的实例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类&lt;/strong&gt;：类是一个模块，它描述一类对象的行为和状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法&lt;/strong&gt;：方法就是行为，逻辑运算，数据修改，所有动作都是在方法中完成的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实例变量&lt;/strong&gt;：每个对象都有独特的实例变量，用于保存对象的状态。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://lirawx.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Oracle 与 MySql 区别(笔记)</title>
    <link href="https://lirawx.me/2016/diary/2017/05/20/Oracle%20%E4%B8%8E%20MySql%20%E5%8C%BA%E5%88%AB.html"/>
    <id>https://lirawx.me/2016/diary/2017/05/20/Oracle 与 MySql 区别.html</id>
    <published>2017-05-20T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、并发性"><a href="#一、并发性" class="headerlink" title="一、并发性"></a>一、并发性</h2><p>并发性是oltp数据库最重要的特性，但并发涉及到资源的获取、共享与锁定。</p><p>mysql:<br>mysql以表级锁为主，对资源锁定的粒度很大，如果一个session对一个表加锁时间过长，会让其他session无法更新此表中的数据。<br>虽然InnoDB引擎的表可以用行级锁，但这个行级锁的机制依赖于表的索引，如果表没有索引，或者sql语句没有使用索引，那么仍然使用表级锁。<br><a id="more"></a><br>oracle:<br>oracle使用行级锁，对资源锁定的粒度要小很多，只是锁定sql需要的资源，并且加锁是在数据库中的数据行上，不依赖与索引。所以oracle对并发性的支持要好很多。</p><h2 id="二、一致性"><a href="#二、一致性" class="headerlink" title="二、一致性"></a>二、一致性</h2><p>oracle:<br>oracle支持serializable的隔离级别，可以实现最高级别的读一致性。每个session提交后其他session才能看到提交的更改。oracle通过在undo表空间中构造多版本数据块来实现读一致性，<br>每个session查询时，如果对应的数据块发生变化，oracle会在undo表空间中为这个session构造它查询时的旧的数据块。</p><p>mysql:<br>mysql没有类似oracle的构造多版本数据块的机制，只支持read commited的隔离级别。一个session读取数据时，其他session不能更改数据，但可以在表最后插入数据。<br>session更新数据时，要加上排它锁，其他session无法访问数据。</p><h2 id="三、事务"><a href="#三、事务" class="headerlink" title="三、事务"></a>三、事务</h2><p>oracle很早就完全支持事务。</p><p>mysql在innodb存储引擎的行级锁的情况下才支持事务。</p><h2 id="四、数据持久性"><a href="#四、数据持久性" class="headerlink" title="四、数据持久性"></a>四、数据持久性</h2><p>oracle<br>保证提交的数据均可恢复，因为oracle把提交的sql操作线写入了在线联机日志文件中，保持到了磁盘上，<br>如果出现数据库或主机异常重启，重启后oracle可以考联机在线日志恢复客户提交的数据。<br>mysql:<br>默认提交sql语句，但如果更新过程中出现db或主机重启的问题，也许会丢失数据。</p><h2 id="五、提交方式"><a href="#五、提交方式" class="headerlink" title="五、提交方式"></a>五、提交方式</h2><p>oracle默认不自动提交，需要用户手动提交。<br>mysql默认是自动提交。</p><h2 id="六、逻辑备份"><a href="#六、逻辑备份" class="headerlink" title="六、逻辑备份"></a>六、逻辑备份</h2><p>oracle逻辑备份时不锁定数据，且备份的数据是一致的。</p><p>mysql逻辑备份时要锁定数据，才能保证备份的数据是一致的，影响业务正常的dml使用。</p><h2 id="七、热备份"><a href="#七、热备份" class="headerlink" title="七、热备份"></a>七、热备份</h2><p>oracle有成熟的热备工具rman，热备时，不影响用户使用数据库。即使备份的数据库不一致，也可以在恢复时通过归档日志和联机重做日志进行一致的回复。<br>mysql:<br>myisam的引擎，用mysql自带的mysqlhostcopy热备时，需要给表加读锁，影响dml操作。<br>innodb的引擎，它会备份innodb的表和索引，但是不会备份.frm文件。用ibbackup备份时，会有一个日志文件记录备份期间的数据变化，因此可以不用锁表，不影响其他用户使用数据库。但此工具是收费的。<br>innobackup是结合ibbackup使用的一个脚本，他会协助对.frm文件的备份。</p><h2 id="八、sql语句的扩展和灵活性"><a href="#八、sql语句的扩展和灵活性" class="headerlink" title="八、sql语句的扩展和灵活性"></a>八、sql语句的扩展和灵活性</h2><p>mysql对sql语句有很多非常实用而方便的扩展，比如limit功能，insert可以一次插入多行数据，select某些管理数据可以不加from。<br>oracle在这方面感觉更加稳重传统一些。</p><h2 id="九、复制"><a href="#九、复制" class="headerlink" title="九、复制"></a>九、复制</h2><p>oracle:既有推或拉式的传统数据复制，也有dataguard的双机或多机容灾机制，主库出现问题是，可以自动切换备库到主库，但配置管理较复杂。<br>mysql:复制服务器配置简单，但主库出问题时，丛库有可能丢失一定的数据。且需要手工切换丛库到主库。</p><h2 id="十、性能诊断"><a href="#十、性能诊断" class="headerlink" title="十、性能诊断"></a>十、性能诊断</h2><p>oracle有各种成熟的性能诊断调优工具，能实现很多自动分析、诊断功能。比如awr、addm、sqltrace、tkproof等<br>mysql的诊断调优方法较少，主要有慢查询日志。</p><h2 id="十一、权限与安全"><a href="#十一、权限与安全" class="headerlink" title="十一、权限与安全"></a>十一、权限与安全</h2><p>mysql的用户与主机有关，感觉没有什么意义，另外更容易被仿冒主机及ip有可乘之机。<br>oracle的权限与安全概念比较传统，中规中矩。</p><h2 id="十二、分区表和分区索引"><a href="#十二、分区表和分区索引" class="headerlink" title="十二、分区表和分区索引"></a>十二、分区表和分区索引</h2><p>oracle的分区表和分区索引功能很成熟，可以提高用户访问db的体验。<br>mysql的分区表还不太成熟稳定。</p><h2 id="十三、管理工具"><a href="#十三、管理工具" class="headerlink" title="十三、管理工具"></a>十三、管理工具</h2><p>oracle有多种成熟的命令行、图形界面、web管理工具，还有很多第三方的管理工具，管理极其方便高效。<br>mysql管理工具较少，在linux下的管理工具的安装有时要安装额外的包（phpmyadmin， etc)，有一定复杂性。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、并发性&quot;&gt;&lt;a href=&quot;#一、并发性&quot; class=&quot;headerlink&quot; title=&quot;一、并发性&quot;&gt;&lt;/a&gt;一、并发性&lt;/h2&gt;&lt;p&gt;并发性是oltp数据库最重要的特性，但并发涉及到资源的获取、共享与锁定。&lt;/p&gt;
&lt;p&gt;mysql:&lt;br&gt;mysql以表级锁为主，对资源锁定的粒度很大，如果一个session对一个表加锁时间过长，会让其他session无法更新此表中的数据。&lt;br&gt;虽然InnoDB引擎的表可以用行级锁，但这个行级锁的机制依赖于表的索引，如果表没有索引，或者sql语句没有使用索引，那么仍然使用表级锁。&lt;br&gt;
    
    </summary>
    
    
      <category term="Oracle MySql" scheme="https://lirawx.me/tags/Oracle-MySql/"/>
    
  </entry>
  
  <entry>
    <title>java基础知识笔记（2）</title>
    <link href="https://lirawx.me/2016/diary/2017/05/20/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0(2).html"/>
    <id>https://lirawx.me/2016/diary/2017/05/20/java基础知识笔记(2).html</id>
    <published>2017-05-20T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h2><ol><li>接口不能用于实例化对象</li><li>接口没有构造函数</li><li>接口的所有方法必须是抽象方法</li><li>接口不能包括成员变量，除 static final 修饰外</li><li>接口不能被类继承，只能被类实现</li><li>接口可以多重继承<blockquote><p>接口的方法只能是 public abstract 修饰，变量只能public static final修饰</p></blockquote></li></ol><a id="more"></a><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><ul><li>接口： 代表集合的抽象数据类型</li><li>实现(类)：集合接口的具体实现</li><li>算法:实现集合接口的对象里的方法，执行一些相关计算<br><img src="http://www.runoob.com/wp-content/uploads/2014/01/java-coll.png" alt=""></li></ul><h3 id="set-和list的区别"><a href="#set-和list的区别" class="headerlink" title="set 和list的区别"></a>set 和list的区别</h3><ol><li><p>set接口实例存储无序且不重复数据</p><p>list存储有序且数据可重复</p></li><li>set效率低下，删除插入效率高</li><li>list和数组一样可以动态增长，查找效率高</li></ol><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="方法的重写规则"><a href="#方法的重写规则" class="headerlink" title="方法的重写规则"></a>方法的重写规则</h3><ul><li>参数列表必须完全与被重写方法的相同；</li><li>返回类型必须完全与被重写方法的返回类型相同；</li><li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。</li><li>父类的成员方法只能被它的子类重写。</li><li>声明为final的方法不能被重写。</li><li>声明为static的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明- - 为public和protected的非final方法。</li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li><li>构造方法不能被重写。</li><li>如果不能继承一个方法，则不能重写这个方法。</li></ul><h3 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h3><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。<br>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。<br>最常用的地方就是构造器的重载。<br>重载规则</p><ul><li>被重载的方法必须改变参数列表(参数个数或类型或顺序不一样)；</li><li>被重载的方法可以改变返回类型；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法可以声明新的或更广的检查异常；</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><h3 id="多态存在的三个必要条件"><a href="#多态存在的三个必要条件" class="headerlink" title="多态存在的三个必要条件"></a>多态存在的三个必要条件</h3><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象</li></ul><h3 id="抽象类总结规定"><a href="#抽象类总结规定" class="headerlink" title="抽象类总结规定"></a>抽象类总结规定</h3><ol><li>抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。</li><li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li><li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。</li><li>构造方法，类方法（用static修饰的方法）不能声明为抽象方法。</li><li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</li></ol><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>在面向对象程式设计方法中，封装（英语：Encapsulation）是指一种将抽象性函式接口的实现细节部份包装、隐藏起来的方法。<br>封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。<br>要访问该类的代码和数据，必须通过严格的接口控制。<br>封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。<br>适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。<br>封装的优点</p><ol><li>良好的封装能够减少耦合。</li><li>类内部的结构可以自由修改。</li><li>可以对成员变量进行更精确的控制。</li><li>隐藏信息，实现细节。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;接口-interface&quot;&gt;&lt;a href=&quot;#接口-interface&quot; class=&quot;headerlink&quot; title=&quot;接口(interface)&quot;&gt;&lt;/a&gt;接口(interface)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;接口不能用于实例化对象&lt;/li&gt;
&lt;li&gt;接口没有构造函数&lt;/li&gt;
&lt;li&gt;接口的所有方法必须是抽象方法&lt;/li&gt;
&lt;li&gt;接口不能包括成员变量，除 static final 修饰外&lt;/li&gt;
&lt;li&gt;接口不能被类继承，只能被类实现&lt;/li&gt;
&lt;li&gt;接口可以多重继承&lt;blockquote&gt;
&lt;p&gt;接口的方法只能是 public abstract 修饰，变量只能public static final修饰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://lirawx.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>大四这一年</title>
    <link href="https://lirawx.me/2016/diary/2017/05/19/%E6%80%BB%E7%BB%93.html"/>
    <id>https://lirawx.me/2016/diary/2017/05/19/总结.html</id>
    <published>2017-05-19T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不是你上了大学，而是你被大学上了</p></blockquote><p>首先写这篇总结的原因，从5月初开始我投了大量的简历，然而其结果都是被干掉，我归结出几个原因：</p><ul><li>大学太过平庸</li></ul><p>大学里我一直宅在宿舍里，至少是大一到到大二都是这样，自己刚刚接触到大学这个庞大的团体，每天都有新的事物吸引着我的注意力，而我始终都没有明确自己的理想与目标，我一直以为同学都差不多，其实差很多，当我在召唤师峡谷里欲仙欲死的时候有的同学在看专业书籍准备考研，有的在准备面试暑期实习生，有的甚至在看雅思，托付，等等一些高大上的书籍，准备考证。而我或者我们这一类人都嗤之以鼻，很不屑，”<strong>大学不是来玩的么</strong>“，这句话高中老师肯定多对我们说过，很遗憾，我们上课知识点没记住，却记住了这个最坑爹的一句话。我只想说你玩得起吗？你爸是李刚？你家族很庞大？你已经身家过亿？<br><a id="more"></a></p><ul><li>缺乏自主性和计划性</li></ul><p>大学每天除了上课，就是在宿舍上网或者打游戏，这是常态，但是我很遗憾的告诉你，人生不是这么过的，一旦你陷入了享乐主义的恶性循环你会发现你的人生一团糟。你刚刚起床，考研的同学已经吃好早饭，到自习室或者图书馆自习了，而当你在床上玩着手机，自以为生活就是该这么悠闲，大学真好玩的时候，自学做技术的人已经完成了项目的一个模块了。当你中午起床的时候，你觉得一天才刚刚开始，然后你打开电脑，发现很无聊，点开了LOL，然后和队友互怼，你觉得很生气，然后你继续下一把，发现这把还行，。。。。。。n局后，唉，怎么天都黑了，然后你继续躺上床，捧着KINDLE，装着文艺，看着玄幻爽文，我去，猪脚帅的跟我一样，放技能都是恐怖如斯！。。。。N day 过去，你混着日子过完春夏秋冬，突然就毕业了，人家要么考清华北大，而你只能家里蹲，要么就是拿到大厂的OFFER，而你却说不急，我慢慢找（找你妹啊！！）。</p><ul><li>缺乏清醒的自我认识</li></ul><p>每个人考到大学，都觉得自己很牛逼，把电脑装饰linux，然后进入字符界面， sudo apt get install cmatrix ，运行之后，哇，这不是黑客帝国吗，我好牛逼，然后就没有然后了，一点也没有深入理解其中运行原理。这样的例子还有很多，每个人都觉得自己了不起，吧自己的身段放的老高，忘了自己应届生的身份，找工作的时候，发现好难，校招的题目都做不出来，去社招面试，结果一点项目经验都没有，over，一遍一遍始终都摆不正自己的身份，没有什么是应该的，你不会就是不会，没有什么可以狡辩的，copy再多，自己也写不出一行代码，悲哀。</p><ul><li>缺乏对职业的认识</li></ul><p>职业是什么，说白了就是你将来用来养家糊口的工具手段，当一个人温饱都成问题的时候，哪有什么职业可言，你必须要计划自己将来5到10年你想做什么，而不是等着老师给你布置 “找工作”的作业，职业是使命，你得为之付出青春和汗水，而不能丝毫怀疑，同时你还要学习，不断的学习，职业随着时间的延长，会不断进化发展，会需要很多的技能，你没有掌握就会被时代遗弃，简单来说你会丢掉饭碗。所以你要努力的保护自己的饭碗。当然有了职业，并不是说你所有的心思都必须放在它上面，你得学会分清主次，工作的时候要认真负责，休息的时候可以和同事交流分享经验，与人相处也是职业成功的必备要素。同时你还有有减轻自己工作压力的方法，比如打篮球，钓鱼，打保龄球等等之类的休闲活动。劳逸结合才能走得更远更舒畅。</p><ul><li>学校培养人才和社会需要严重脱节</li></ul><p>21世纪，科技发展迅速，职业素养要求越来越高，学校里的课程只能教授一些基本的知识，无法实际应用于社会生产，导致了很大一部分同学很被动，也很悲哀，被夹在当中，很无奈，没法找到理想的工作，也没有健全自己的道德素养体系，缺乏对自我的认识，没有自主性。种种原因导致了现阶段的一系列问题。</p><p>以上是个人浅见，或者说牢骚，慎重翻阅！！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不是你上了大学，而是你被大学上了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先写这篇总结的原因，从5月初开始我投了大量的简历，然而其结果都是被干掉，我归结出几个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大学太过平庸&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大学里我一直宅在宿舍里，至少是大一到到大二都是这样，自己刚刚接触到大学这个庞大的团体，每天都有新的事物吸引着我的注意力，而我始终都没有明确自己的理想与目标，我一直以为同学都差不多，其实差很多，当我在召唤师峡谷里欲仙欲死的时候有的同学在看专业书籍准备考研，有的在准备面试暑期实习生，有的甚至在看雅思，托付，等等一些高大上的书籍，准备考证。而我或者我们这一类人都嗤之以鼻，很不屑，”&lt;strong&gt;大学不是来玩的么&lt;/strong&gt;“，这句话高中老师肯定多对我们说过，很遗憾，我们上课知识点没记住，却记住了这个最坑爹的一句话。我只想说你玩得起吗？你爸是李刚？你家族很庞大？你已经身家过亿？&lt;br&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://lirawx.me/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>CoffeeScript 基础知识</title>
    <link href="https://lirawx.me/2016/javascript/2017-05-15-coffescript.html"/>
    <id>https://lirawx.me/2016/javascript/2017-05-15-coffescript.html</id>
    <published>2017-05-16T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CoffeeScript</strong> 是一门编译到 JavaScript 的小巧语言. 在 Java 般笨拙的外表下, JavaScript 其实有着一颗华丽的心脏. CoffeeScript 尝试用简洁的方式展示 JavaScript 优秀的部分.</p><p>CoffeeScript 的指导原则是: “<strong>她仅仅是 JavaScript</strong>“. 代码一一对应地编译到 JS, 不会在编译过程中进行解释. 已有的 JavaScript 类库可以无缝地和 CoffeeScript 搭配使用, 反之亦然. 编译后的代码是可读的, 且经过美化, 能在所有 JavaScript 环境中运行, 并且应该和对应手写的 JavaScript 一样快或者更快.<br><a id="more"></a></p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>CoffeeScript 编译器本身是 CoffeeScript 写的, 使用了 Jison parser generator. 命令行版本的 coffee 是一个实用的 Node.js 工具. 不过编译器并不依赖 Node, 而是能运行于任何 JavaScript 执行环境, 比如说在浏览器里(看上边的”试一试 CoffeeScript”).</p><p>安装前你需要最新稳定版 Node.js, 和 npm (Node Package Manager). 借助 npm 可以安装 CoffeeScript:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g coffee-script</span><br></pre></td></tr></table></figure></p><h2 id="语言手册"><a href="#语言手册" class="headerlink" title="语言手册"></a>语言手册</h2><p>一些基础, CoffeeScript 使用显式的空白来区分代码块. 你不需要使用分号 ; 来关闭表达式, 在一行的结尾换行就可以了(尽管分号依然可以用来把多行的表达式简写到一行里). 不需要再用花括号来 { } 包裹代码快, 在 函数, if 表达式, switch, 和 try/catch 当中使用缩进.</p><p>传入参数的时候, 你不需要再使用圆括号来表明函数被执行. 隐式的函数调用的作用范围一直到行尾或者一个块级表达式.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log sys.inspect object → console.log(sys.inspect(object));</span><br></pre></td></tr></table></figure></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数通过一组可选的圆括号包裹的参数, 一个箭头, 一个函数体来定义. 一个空的函数像是这样:  -&gt;</p><p>coffeeScript</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">square = (x) -&gt; x * x</span><br><span class="line">cube   = (x) -&gt; square(x) * x</span><br></pre></td></tr></table></figure><p>JavaScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cube, square;</span><br><span class="line"></span><br><span class="line">square = function(x) &#123;</span><br><span class="line">  return x * x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cube = function(x) &#123;</span><br><span class="line">  return square(x) * x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="对象和数组"><a href="#对象和数组" class="headerlink" title="对象和数组"></a>对象和数组</h2><p>CoffeeScript 中对象和数组的字面量看起来很像在 JavaScript 中的写法. 如果单个属性被写在自己的一行里, 那么逗号是可以省略的. 和 YAML 类似, 对象可以用缩进替代花括号来声明.</p><p>coffeeScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">song = [&quot;do&quot;, &quot;re&quot;, &quot;mi&quot;, &quot;fa&quot;, &quot;so&quot;]</span><br><span class="line"></span><br><span class="line">singers = &#123;Jagger: &quot;Rock&quot;, Elvis: &quot;Roll&quot;&#125;</span><br><span class="line"></span><br><span class="line">bitlist = [</span><br><span class="line">  1, 0, 1</span><br><span class="line">  0, 0, 1</span><br><span class="line">  1, 1, 0</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">kids =</span><br><span class="line">  brother:</span><br><span class="line">    name: &quot;Max&quot;</span><br><span class="line">    age:  11</span><br><span class="line">  sister:</span><br><span class="line">    name: &quot;Ida&quot;</span><br><span class="line">    age:  9</span><br></pre></td></tr></table></figure></p><p>JavaScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bitlist, kids, singers, song;</span><br><span class="line"></span><br><span class="line">song = [&quot;do&quot;, &quot;re&quot;, &quot;mi&quot;, &quot;fa&quot;, &quot;so&quot;];</span><br><span class="line"></span><br><span class="line">singers = &#123;</span><br><span class="line">  Jagger: &quot;Rock&quot;,</span><br><span class="line">  Elvis: &quot;Roll&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bitlist = [1, 0, 1, 0, 0, 1, 1, 1, 0];</span><br><span class="line"></span><br><span class="line">kids = &#123;</span><br><span class="line">  brother: &#123;</span><br><span class="line">    name: &quot;Max&quot;,</span><br><span class="line">    age: 11</span><br><span class="line">  &#125;,</span><br><span class="line">  sister: &#123;</span><br><span class="line">    name: &quot;Ida&quot;,</span><br><span class="line">    age: 9</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="词法作用域和变量安全"><a href="#词法作用域和变量安全" class="headerlink" title="词法作用域和变量安全"></a>词法作用域和变量安全</h2><p>CoffeeScript 编译器会考虑所有变量, 保证每个变量都在词法域里适当地被定义 — 你永远不需要自己去写 var.</p><p>CoffeeScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">outer = 1</span><br><span class="line">changeNumbers = -&gt;</span><br><span class="line">  inner = -1</span><br><span class="line">  outer = 10</span><br><span class="line">inner = changeNumbers()</span><br></pre></td></tr></table></figure></p><p>JavaScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var changeNumbers, inner, outer;</span><br><span class="line"></span><br><span class="line">outer = 1;</span><br><span class="line"></span><br><span class="line">changeNumbers = function() &#123;</span><br><span class="line">  var inner;</span><br><span class="line">  inner = -1;</span><br><span class="line">  return outer = 10;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">inner = changeNumbers();</span><br></pre></td></tr></table></figure></p><blockquote><p>注意所有变量的定义都被推到相关的顶层作用域, 也就是第一次出现的位置. outer 在内层的函数里没有被重新定义, 因为它已经存在于作用域当中了. 同时, 内层函数里的 inner 不应该改变外部的同名的变量, 所以在这里有自己的声明.</p></blockquote><h2 id="循环和推导式"><a href="#循环和推导式" class="headerlink" title="循环和推导式"></a>循环和推导式</h2><p>你可以使用CoffeeScript将大多数的循环写成基于数组、对象或范围的推导式(comprehensions)。 推导式替代（编译为）for循环，并且可以使用可选的子句和数组索引值。 不同于for循环，数组的推导式是表达式，可以被返回和赋值。</p><p>CoffeeScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 吃午饭.</span><br><span class="line">eat food for food in [&apos;toast&apos;, &apos;cheese&apos;, &apos;wine&apos;]</span><br><span class="line"></span><br><span class="line"># 精致的五道菜.</span><br><span class="line">courses = [&apos;greens&apos;, &apos;caviar&apos;, &apos;truffles&apos;, &apos;roast&apos;, &apos;cake&apos;]</span><br><span class="line">menu i + 1, dish for dish, i in courses</span><br><span class="line"></span><br><span class="line"># 注重健康的一餐.</span><br><span class="line">foods = [&apos;broccoli&apos;, &apos;spinach&apos;, &apos;chocolate&apos;]</span><br><span class="line">eat food for food in foods when food isnt &apos;chocolate&apos;</span><br></pre></td></tr></table></figure></p><p>JavaScript<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var courses, dish, food, foods, i, _i, _j, _k, _len, _len1, _len2, _ref;</span><br><span class="line"></span><br><span class="line">_ref = [&apos;toast&apos;, &apos;cheese&apos;, &apos;wine&apos;];</span><br><span class="line">for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) &#123;</span><br><span class="line">  food = _ref[_i];</span><br><span class="line">  eat(food);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">courses = [&apos;greens&apos;, &apos;caviar&apos;, &apos;truffles&apos;, &apos;roast&apos;, &apos;cake&apos;];</span><br><span class="line"></span><br><span class="line">for (i = _j = 0, _len1 = courses.length; _j &lt; _len1; i = ++_j) &#123;</span><br><span class="line">  dish = courses[i];</span><br><span class="line">  menu(i + 1, dish);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foods = [&apos;broccoli&apos;, &apos;spinach&apos;, &apos;chocolate&apos;];</span><br><span class="line"></span><br><span class="line">for (_k = 0, _len2 = foods.length; _k &lt; _len2; _k++) &#123;</span><br><span class="line">  food = foods[_k];</span><br><span class="line">  if (food !== &apos;chocolate&apos;) &#123;</span><br><span class="line">    eat(food);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="操作符和-aliase"><a href="#操作符和-aliase" class="headerlink" title="操作符和 aliase"></a>操作符和 aliase</h2><p>由于操作符 == 常常带来不准确的约束, 不容易达到效果, 而且跟其他语言当中意思不一致, CoffeeScript 会把 == 编译为 ===, 把 != 变异为 !==. 此外, is 编译为 ===, 而 isnt 编译为 !==.</p><p>not 可以作为 ! 的 alias 使用.</p><p>逻辑操作方面, and 编译为 &amp;&amp;, 而 or 编译为 ||.</p><p>在 while, if/else, switch/when 的语句当中,  then 可以被用来分隔判断条件跟表达式, 这样就不用强制写换行或者分号了.</p><p>就像 YAML, on 和 yes 跟 true 是一样的, 而 off 和 no 是布尔值 false.</p><p>unless 可以认为是 if 相反的版本.</p><p>this.property 简短的写法可以用 @property.</p><p>可以用 in 判断数据在数组中是否出现, 而 of 可以探测 JavaScript 对象的属性是否存在.</p><p>为了简化数学表达式, ** 可以用来表示乘方, // 表示整除, %% 提供数学的模运算(译注: true mathematical modulo?).</p><p>完整的列表:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CoffeeScriptJavaScript</span><br><span class="line">is           ===</span><br><span class="line">isnt         !==</span><br><span class="line">not            !</span><br><span class="line">and           &amp;&amp;</span><br><span class="line">or             ||</span><br><span class="line">true, yes, on  true</span><br><span class="line">false, no, offfalse</span><br><span class="line">@, this        this</span><br><span class="line">of           in</span><br><span class="line">in         no JS equivalent</span><br><span class="line">a ** b     Math.pow(a, b)</span><br><span class="line">a // b     Math.floor(a / b)</span><br><span class="line">a %% b       (a % b + b) % b</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CoffeeScript&lt;/strong&gt; 是一门编译到 JavaScript 的小巧语言. 在 Java 般笨拙的外表下, JavaScript 其实有着一颗华丽的心脏. CoffeeScript 尝试用简洁的方式展示 JavaScript 优秀的部分.&lt;/p&gt;
&lt;p&gt;CoffeeScript 的指导原则是: “&lt;strong&gt;她仅仅是 JavaScript&lt;/strong&gt;“. 代码一一对应地编译到 JS, 不会在编译过程中进行解释. 已有的 JavaScript 类库可以无缝地和 CoffeeScript 搭配使用, 反之亦然. 编译后的代码是可读的, 且经过美化, 能在所有 JavaScript 环境中运行, 并且应该和对应手写的 JavaScript 一样快或者更快.&lt;br&gt;
    
    </summary>
    
    
      <category term="coffeeScript" scheme="https://lirawx.me/tags/coffeeScript/"/>
    
  </entry>
  
  <entry>
    <title>axios</title>
    <link href="https://lirawx.me/2015/web/2017-05-15-axios.html"/>
    <id>https://lirawx.me/2015/web/2017-05-15-axios.html</id>
    <published>2017-05-15T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用</p><a id="more"></a><h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><ul><li>在浏览器中发送 XMLHttpRequests 请求</li><li>在 node.js 中发送 http请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>自动转换 JSON 数据</li><li>客户端支持保护安全免受 XSRF 攻击<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><img src="https://saucelabs.com/browser-matrix/axios.svg" alt=""></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 bower:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower install axios</span><br></pre></td></tr></table></figure></p><h2 id="使用-npm"><a href="#使用-npm" class="headerlink" title="使用 npm:"></a>使用 npm:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>发送一个 GET 请求<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Make a request for a user with a given ID</span><br><span class="line">axios.get(&apos;/user?ID=12345&apos;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">// Optionally the request above could also be done as</span><br><span class="line">axios.get(&apos;/user&apos;, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>发送一个 POST 请求<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axios.post(&apos;/user&apos;, &#123;</span><br><span class="line">    firstName: &apos;Fred&apos;,</span><br><span class="line">    lastName: &apos;Flintstone&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>发送多个并发请求<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getUserAccount() &#123;</span><br><span class="line">  return axios.get(&apos;/user/12345&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">  return axios.get(&apos;/user/12345/permissions&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    // Both requests are now complete</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="axios promise" scheme="https://lirawx.me/tags/axios-promise/"/>
    
  </entry>
  
  <entry>
    <title>javascript导航特效（程序代码）</title>
    <link href="https://lirawx.me/2015/js/2017-04-28.html"/>
    <id>https://lirawx.me/2015/js/2017-04-28.html</id>
    <published>2017-04-28T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>思路：当鼠标移动到某个li上的时候，就要改变云所在的位置，当鼠标离开的时候，云回到原来的位置，当鼠标点击的时候，云固定在当前的位置,而位置的获取，就是利用offsetLeft.  </p> <a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;  </span><br><span class="line">&lt;html&gt;  </span><br><span class="line">    &lt;head&gt;  </span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot; /&gt;  </span><br><span class="line">        &lt;title&gt;&lt;/title&gt;  </span><br><span class="line">        &lt;style&gt;  </span><br><span class="line">            *&#123;margin: 0; padding: 0;&#125;  </span><br><span class="line">            ul&#123;  </span><br><span class="line">                list-style: none;  </span><br><span class="line">            &#125;  </span><br><span class="line">            body&#123;background-color: #000;&#125;  </span><br><span class="line">            .nav&#123;  </span><br><span class="line">                width: 800px;  </span><br><span class="line">                height: 42px;  </span><br><span class="line">                background: url(img/rss.png) no-repeat right center #fff;  </span><br><span class="line">                margin: 100px auto;  </span><br><span class="line">                border-radius: 5px;  </span><br><span class="line">                position: relative;  </span><br><span class="line">            &#125;  </span><br><span class="line">            .cloud&#123;  </span><br><span class="line">                width: 83px;  </span><br><span class="line">                height: 42px;  </span><br><span class="line">                position: absolute;  </span><br><span class="line">                top: 0;  </span><br><span class="line">                left: 0;  </span><br><span class="line">                background: url(img/cloud.gif) no-repeat;  </span><br><span class="line">            &#125;  </span><br><span class="line">            .nav ul&#123;  </span><br><span class="line">                position: absolute;  </span><br><span class="line">                top: 0;  </span><br><span class="line">                left: 0;  </span><br><span class="line">            &#125;  </span><br><span class="line">            .nav li&#123;  </span><br><span class="line">                float: left;  </span><br><span class="line">                width: 83px;  </span><br><span class="line">                height: 42px;  </span><br><span class="line">                line-height: 42px;  </span><br><span class="line">                text-align: center;  </span><br><span class="line">                color: #000;  </span><br><span class="line">                cursor:  pointer;  </span><br><span class="line"></span><br><span class="line">            &#125;  </span><br><span class="line">        &lt;/style&gt;  </span><br><span class="line">    &lt;/head&gt;  </span><br><span class="line">    &lt;body&gt;  </span><br><span class="line">        &lt;div class=&quot;nav&quot; id=&quot;nav&quot;&gt;   </span><br><span class="line">            &lt;span class=&quot;cloud&quot; id=&quot;cloud&quot;&gt;&lt;/span&gt;  </span><br><span class="line">            &lt;ul&gt;  </span><br><span class="line">                &lt;li&gt;首页&lt;/li&gt;  </span><br><span class="line">                &lt;li&gt;贵州&lt;/li&gt;  </span><br><span class="line">                &lt;li&gt;深圳&lt;/li&gt;  </span><br><span class="line">                &lt;li&gt;重庆&lt;/li&gt;  </span><br><span class="line">                &lt;li&gt;北京&lt;/li&gt;  </span><br><span class="line">                &lt;li&gt;杭州&lt;/li&gt;  </span><br><span class="line">            &lt;/ul&gt;  </span><br><span class="line">        &lt;/div&gt;  </span><br><span class="line">    &lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line">    /**  </span><br><span class="line">     * 思路：当鼠标移动到某个li上的时候，就要改变云所在的位置，当鼠标离开的时候，云回到原来的位置，当鼠标点击的时候，云固定在当前的位置  </span><br><span class="line">     * 而位置的获取，就是利用offsetLeft  </span><br><span class="line">     */  </span><br><span class="line">    var cloud = document.getElementById(&quot;cloud&quot;);//获取云  </span><br><span class="line">    var lis = document.getElementById(&quot;nav&quot;).children[1].children;  </span><br><span class="line">    for (var i=0;i&lt;lis.length;i++) &#123;  </span><br><span class="line">        //鼠标进去区域事件  </span><br><span class="line">        lis[i].onmouseover = function()&#123;  </span><br><span class="line">            target = this.offsetLeft;  </span><br><span class="line">        &#125;  </span><br><span class="line">        //鼠标离开事件  </span><br><span class="line">        lis[i].onmouseout =function()&#123;  </span><br><span class="line">            target = current;  </span><br><span class="line">        &#125;  </span><br><span class="line">        //单击事件  </span><br><span class="line">        lis[i].onclick = function()&#123;  </span><br><span class="line">            current = this.offsetLeft;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    //缓动公式  </span><br><span class="line">    var leader = 0;  </span><br><span class="line">    var target = 0;//移动的目标位置  </span><br><span class="line">    var current = 0;//用于存放点击的位置  </span><br><span class="line">    setInterval(function()&#123;  </span><br><span class="line">        leader = leader + (target - leader) /10;  </span><br><span class="line">        cloud.style.left = leader + &quot;px&quot;;  </span><br><span class="line">    &#125;,10)  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思路：当鼠标移动到某个li上的时候，就要改变云所在的位置，当鼠标离开的时候，云回到原来的位置，当鼠标点击的时候，云固定在当前的位置,而位置的获取，就是利用offsetLeft.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://lirawx.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript滑动条（程序代码）</title>
    <link href="https://lirawx.me/2015/js/2017-04-28-scrollpercent.html"/>
    <id>https://lirawx.me/2015/js/2017-04-28-scrollpercent.html</id>
    <published>2017-04-28T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>拖拽效果的实现，主要是利用，鼠标按下不起来的事件中加入鼠标的移动事件来实现，<br>所以当鼠标按下的时候，记录位置，然后移动鼠标，改变位置，<br>window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();代码的作用清楚所选的内容<br>然后当鼠标弹起的时候，不做操作.</p> <a id="more"></a> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;!DOCTYPE html&gt;  </span><br><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;  </span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;  </span><br><span class="line">    &lt;title&gt;&lt;/title&gt;  </span><br><span class="line">    &lt;style&gt;  </span><br><span class="line">        * &#123;margin:0;padding:0;&#125;  </span><br><span class="line">        .scroll &#123;  </span><br><span class="line">            width: 400px;  </span><br><span class="line">            height: 8px;  </span><br><span class="line">            background-color: #ccc;  </span><br><span class="line">            margin: 100px;  </span><br><span class="line">            position: relative;  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line">        .bar &#123;  </span><br><span class="line">            width: 10px;  </span><br><span class="line">            height: 22px;  </span><br><span class="line">            background-color: #369;  </span><br><span class="line">            position: absolute;  </span><br><span class="line">            top: -7px;  </span><br><span class="line">            left: 0;  </span><br><span class="line">            cursor: pointer;  </span><br><span class="line">        &#125;  </span><br><span class="line">        .mask &#123;  </span><br><span class="line">            width: 0;  </span><br><span class="line">            height: 100%;  </span><br><span class="line">            background-color: #369;  </span><br><span class="line">            position: absolute;  </span><br><span class="line">            top: 0;  </span><br><span class="line">            left: 0;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &lt;/style&gt;  </span><br><span class="line">&lt;/head&gt;  </span><br><span class="line">&lt;body&gt;  </span><br><span class="line">&lt;div class=&quot;scroll&quot; id=&quot;scrollBar&quot;&gt;  </span><br><span class="line">    &lt;div class=&quot;bar&quot;&gt;&lt;/div&gt;  </span><br><span class="line">    &lt;div class=&quot;mask&quot;&gt;&lt;/div&gt;  </span><br><span class="line">&lt;/div&gt;  </span><br><span class="line">&lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;  </span><br><span class="line">&lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line">/**  </span><br><span class="line"> * 拖拽效果的实现，主要是利用，鼠标按下不起来的事件中加入鼠标的移动事件来实现，  </span><br><span class="line"> * 所以当鼠标按下的时候，记录位置，然后移动鼠标，改变位置，  </span><br><span class="line"> * window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();代码的作用清楚所选的内容  </span><br><span class="line"> * 然后当鼠标弹起的时候，不做操作  </span><br><span class="line"> */  </span><br><span class="line">    var scrollBar = document.getElementById(&quot;scrollBar&quot;);  </span><br><span class="line">    var bar = scrollBar.children[0];  </span><br><span class="line">    var mask = scrollBar.children[1];  </span><br><span class="line">    var demo = document.getElementById(&quot;demo&quot;);  </span><br><span class="line">    /* document.onmousedown = function() &#123;  </span><br><span class="line">         alert(11);  </span><br><span class="line">     &#125;*/  </span><br><span class="line">    bar.onmousedown = function(event) &#123;  </span><br><span class="line">        var event = event || window.event;  </span><br><span class="line">        var leftVal = event.clientX - this.offsetLeft;  </span><br><span class="line">        // alert(11);  </span><br><span class="line">        // 拖动一定写到 down 里面才可以  </span><br><span class="line">        var that = this;  </span><br><span class="line">        document.onmousemove = function(event) &#123;  </span><br><span class="line">            var event = event || window.event;  </span><br><span class="line">            that.style.left = event.clientX - leftVal + &apos;px&apos;;  </span><br><span class="line">            //alert(that.style.left);  </span><br><span class="line">            var val = parseInt(that.style.left);  </span><br><span class="line">            if (val &lt; 0) &#123;  </span><br><span class="line">                that.style.left = 0;  </span><br><span class="line">            &#125; else if (val &gt; 390) &#123;  </span><br><span class="line">                that.style.left = &quot;390px&quot;;  </span><br><span class="line">            &#125;  </span><br><span class="line">            mask.style.width = that.style.left; // 遮罩盒子的宽度  </span><br><span class="line">            //计算百分比  </span><br><span class="line">            demo.innerHTML = &quot;已经走了:&quot; + parseInt(parseInt(that.style.left) / 390 * 100) + &quot;%&quot;;  </span><br><span class="line">            window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();  </span><br><span class="line">        &#125;  </span><br><span class="line">        document.onmouseup = function() &#123;  </span><br><span class="line">            document.onmousemove = null; // 弹起鼠标不做任何操作  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拖拽效果的实现，主要是利用，鼠标按下不起来的事件中加入鼠标的移动事件来实现，&lt;br&gt;所以当鼠标按下的时候，记录位置，然后移动鼠标，改变位置，&lt;br&gt;window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();代码的作用清楚所选的内容&lt;br&gt;然后当鼠标弹起的时候，不做操作.&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://lirawx.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript特效（知识点笔记）</title>
    <link href="https://lirawx.me/2015/js/2017-04-28-jsanimation.html"/>
    <id>https://lirawx.me/2015/js/2017-04-28-jsanimation.html</id>
    <published>2017-04-28T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javascript中常用坐标属性offset、scroll、client"><a href="#javascript中常用坐标属性offset、scroll、client" class="headerlink" title="javascript中常用坐标属性offset、scroll、client"></a>javascript中常用坐标属性offset、scroll、client</h2><p>offset、scroll、client是js中获取元素尺寸的api的三大家族。<br> <a id="more"></a><br><img src="http://images.cnitblog.com/blog/555524/201501/251833059254129.png" alt=""></p><h3 id="1、在文档（document）对象里面用："><a href="#1、在文档（document）对象里面用：" class="headerlink" title="1、在文档（document）对象里面用："></a>1、在文档（document）对象里面用：</h3><p>scrollWidth/Height:获取对象的滚动宽度(滚动条可以滚动的宽度，相当于整个页面的总宽度的样子–网页正文全宽)</p><p>scrollLeft/Top:设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离（页面利用滚动条滚动到右边时，隐藏在滚动条左边的页面宽度—页面被卷去左边）</p><h3 id="2、在节点对象里面用："><a href="#2、在节点对象里面用：" class="headerlink" title="2、在节点对象里面用："></a>2、在节点对象里面用：</h3><p>offsetLeft/Top:获取对象相对于版面（css里面没有进行定位，则offsetParent取值为根元素进行计算）或由 offsetParent 属性指定的父坐标的计算左侧位置（当有css定位时，当前对象相对与offsetParent元素的距离）</p><p>offsetWidth/Height (width+padding+border)<br>获取当前对象的宽度。<br>style.width也是当前对象的宽度(width+padding+border)。<br>区别：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)style.width返回值除了数字外还带有单位px；</span><br><span class="line">2)如对象的宽度设定值为百分比宽度,则无论页面变大还是变小，style.width都返回此百分比,而offsetWidth则返回在不同页面中对象的宽度值而不是百分比值；</span><br><span class="line">3)如果没有给 HTML 元素指定过 width样式，则 style.width 返回的是空字符串；</span><br></pre></td></tr></table></figure></p><p>offsetLeft :<br>当前对象到其上级层左边的距离。<br>不能对其进行赋值.设置对象到其上级层左边的距离请用style.left属性。<br>style.left当前对象到其上级层左边的距离。<br>区别：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)style.left返回值除了数字外还带有单位px；</span><br><span class="line">2)如对象到其上级层左边的距离设定值为百分比，style.left返回此百分比,而offsetLeft则返回到其上级层左边的距离的值；</span><br><span class="line">3)如果没有给 HTML 元素指定过 left样式，则 style.left返回的是空字符串；</span><br></pre></td></tr></table></figure></p><p>注意：如果上级层为body，由于IE、FF对padding、margin的解释不一样所以要明确规定处理不是下列的区别就不成立了。<br>IE<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)如果Div的上级层是body，而div与body之间有个div，如body-&gt;div-&gt;divo；divo的offsetTop=div的padding+margin+boder；</span><br><span class="line">2）如果Div的上级层是body，如body&gt;divo；divo的offsetTop=div的padding+margin+boder；</span><br></pre></td></tr></table></figure></p><p>这divo的offsetTop=divo的margin &gt;body.padding则为divo的margin，否则为body.padding谁大是谁？FF  上述两种情况：offsetTop=margin+padding ;<br>(IE与FF中的body默认padding为10)在IE6.0 FF3.6.13</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clientWidth/Height:</span><br><span class="line">获取对象可见内容的宽度，不包括滚动条，不包括边框；</span><br><span class="line"></span><br><span class="line">clientLeft/Top:</span><br><span class="line"> 获取对象的border宽度</span><br></pre></td></tr></table></figure><h3 id="3、事件里面用的："><a href="#3、事件里面用的：" class="headerlink" title="3、事件里面用的："></a>3、事件里面用的：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event.clientX 相对文档的水平座标</span><br><span class="line"></span><br><span class="line">event.clientY 相对文档的垂直座标</span><br><span class="line"></span><br><span class="line">event.offsetX 相对容器的水平坐标</span><br><span class="line">event.offsetY 相对容器的垂直坐标</span><br></pre></td></tr></table></figure><p>4、屏幕的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.screenTop 网页正文部分上</span><br><span class="line">window.screenLfet 网页正文部分左</span><br><span class="line"></span><br><span class="line">window.screen.height  屏幕分辨律的高</span><br><span class="line">window.screen.left  屏幕分辨律的宽</span><br><span class="line"></span><br><span class="line">window.screen.availHeight  屏幕可用工作区的高度</span><br><span class="line">window.screen.availWidth  屏幕可用工作区的宽度</span><br><span class="line"></span><br><span class="line">document.documentElement.scrollTop 垂直方向滚动的值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">网页可见区域宽： document.body.clientWidth;</span><br><span class="line">网页可见区域高： document.body.clientHeight;</span><br><span class="line">网页可见区域宽： document.body.offsetWidth   (包括边线的宽);</span><br><span class="line">网页可见区域高： document.body.offsetHeight  (包括边线的宽);</span><br><span class="line">网页正文全文宽： document.body.scrollWidth;</span><br><span class="line">网页正文全文高： document.body.scrollHeight;</span><br><span class="line">网页被卷去的高： document.body.scrollTop;</span><br><span class="line">网页被卷去的左： document.body.scrollLeft;</span><br><span class="line">网页正文部分上： window.screenTop;</span><br><span class="line">网页正文部分左： window.screenLeft;</span><br><span class="line">屏幕分辨率的高： window.screen.height;</span><br><span class="line">屏幕分辨率的宽： window.screen.width;</span><br><span class="line">屏幕可用工作区高度： window.screen.availHeight;</span><br><span class="line">屏幕可用工作区宽度：window.screen.availWidth;</span><br></pre></td></tr></table></figure></p><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p><img src="http://img.blog.csdn.net/20160625084926003" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;javascript中常用坐标属性offset、scroll、client&quot;&gt;&lt;a href=&quot;#javascript中常用坐标属性offset、scroll、client&quot; class=&quot;headerlink&quot; title=&quot;javascript中常用坐标属性offset、scroll、client&quot;&gt;&lt;/a&gt;javascript中常用坐标属性offset、scroll、client&lt;/h2&gt;&lt;p&gt;offset、scroll、client是js中获取元素尺寸的api的三大家族。&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://lirawx.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript 幻灯片代码(含自动播放)</title>
    <link href="https://lirawx.me/2015/js/2017-04-26-slideshow.html"/>
    <id>https://lirawx.me/2015/js/2017-04-26-slideshow.html</id>
    <published>2017-04-26T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;slideshow-container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;mySlides fade&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;numbertext&quot;&gt;1 / 3&lt;/div&gt;</span><br><span class="line">    &lt;img src=&quot;https://c.runoob.com/wp-content/uploads/2017/01/img_mountains_wide.jpg&quot; style=&quot;width:100%&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;text&quot;&gt;文本 1&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;mySlides fade&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;numbertext&quot;&gt;2 / 3&lt;/div&gt;</span><br><span class="line">    &lt;img src=&quot;https://c.runoob.com/wp-content/uploads/2017/01/img_fjords_wide.jpg&quot; style=&quot;width:100%&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;text&quot;&gt;文本 2&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;mySlides fade&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;numbertext&quot;&gt;3 / 3&lt;/div&gt;</span><br><span class="line">    &lt;img src=&quot;https://c.runoob.com/wp-content/uploads/2017/01/img_nature_wide.jpg&quot; style=&quot;width:100%&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;text&quot;&gt;文本 3&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;a class=&quot;prev&quot; onclick=&quot;plusSlides(-1)&quot;&gt;❮&lt;/a&gt;</span><br><span class="line">  &lt;a class=&quot;next&quot; onclick=&quot;plusSlides(1)&quot;&gt;❯&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;text-align:center&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;dot&quot; onclick=&quot;currentSlide(1)&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;dot&quot; onclick=&quot;currentSlide(2)&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;dot&quot; onclick=&quot;currentSlide(3)&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* &#123;box-sizing:border-box&#125;</span><br><span class="line">body &#123;font-family: Verdana,sans-serif;&#125;</span><br><span class="line">.mySlides &#123;display:none&#125;</span><br><span class="line">/* 幻灯片容器 */</span><br><span class="line">.slideshow-container &#123;</span><br><span class="line">  max-width: 1000px;</span><br><span class="line">  position: relative;</span><br><span class="line">  margin: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 下一张 &amp; 上一张 按钮 */</span><br><span class="line">.prev, .next &#123;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 50%;</span><br><span class="line">  width: auto;</span><br><span class="line">  margin-top: -22px;</span><br><span class="line">  padding: 16px;</span><br><span class="line">  color: white;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  transition: 0.6s ease;</span><br><span class="line">  border-radius: 0 3px 3px 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 定位 &quot;下一张&quot; 按钮靠右 */</span><br><span class="line">.next &#123;</span><br><span class="line">  right: 0;</span><br><span class="line">  border-radius: 3px 0 0 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* On hover, add a black background color with a little bit see-through */</span><br><span class="line">.prev:hover, .next:hover &#123;</span><br><span class="line">  background-color: rgba(0,0,0,0.8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 标题文本 */</span><br><span class="line">.text &#123;</span><br><span class="line">  color: #f2f2f2;</span><br><span class="line">  font-size: 15px;</span><br><span class="line">  padding: 8px 12px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 8px;</span><br><span class="line">  width: 100%;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 数字文本 (1/3 等) */</span><br><span class="line">.numbertext &#123;</span><br><span class="line">  color: #f2f2f2;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  padding: 8px 12px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 标记符号 */</span><br><span class="line">.dot &#123;</span><br><span class="line">  cursor:pointer;</span><br><span class="line">  height: 13px;</span><br><span class="line">  width: 13px;</span><br><span class="line">  margin: 0 2px;</span><br><span class="line">  background-color: #bbb;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  transition: background-color 0.6s ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.active, .dot:hover &#123;</span><br><span class="line">  background-color: #717171;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 淡出动画 */</span><br><span class="line">.fade &#123;</span><br><span class="line">  -webkit-animation-name: fade;</span><br><span class="line">  -webkit-animation-duration: 1.5s;</span><br><span class="line">  animation-name: fade;</span><br><span class="line">  animation-duration: 1.5s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes fade &#123;</span><br><span class="line">  from &#123;opacity: .4&#125;</span><br><span class="line">  to &#123;opacity: 1&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes fade &#123;</span><br><span class="line">  from &#123;opacity: .4&#125;</span><br><span class="line">  to &#123;opacity: 1&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var slideIndex = 1;</span><br><span class="line">showSlides(slideIndex);</span><br><span class="line"></span><br><span class="line">function plusSlides(n) &#123;</span><br><span class="line">  showSlides(slideIndex += n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function currentSlide(n) &#123;</span><br><span class="line">  showSlides(slideIndex = n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function showSlides(n) &#123;</span><br><span class="line">  var i;</span><br><span class="line">  var slides = document.getElementsByClassName(&quot;mySlides&quot;);</span><br><span class="line">  var dots = document.getElementsByClassName(&quot;dot&quot;);</span><br><span class="line">  if (n &gt; slides.length) &#123;slideIndex = 1&#125;</span><br><span class="line">  if (n &lt; 1) &#123;slideIndex = slides.length&#125;</span><br><span class="line">  for (i = 0; i &lt; slides.length; i++) &#123;</span><br><span class="line">      slides[i].style.display = &quot;none&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  for (i = 0; i &lt; dots.length; i++) &#123;</span><br><span class="line">      dots[i].className = dots[i].className.replace(&quot; active&quot;, &quot;&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  slides[slideIndex-1].style.display = &quot;block&quot;;</span><br><span class="line">  dots[slideIndex-1].className += &quot; active&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动播放"><a href="#自动播放" class="headerlink" title="自动播放"></a>自动播放</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var slideIndex = 0;</span><br><span class="line">showSlides();</span><br><span class="line"></span><br><span class="line">function showSlides() &#123;</span><br><span class="line">    var i;</span><br><span class="line">    var slides = document.getElementsByClassName(&quot;mySlides&quot;);</span><br><span class="line">    for (i = 0; i &lt; slides.length; i++) &#123;</span><br><span class="line">        slides[i].style.display = &quot;none&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    slideIndex++;</span><br><span class="line">    if (slideIndex&gt; slides.length) &#123;slideIndex = 1&#125;</span><br><span class="line">    slides[slideIndex-1].style.display = &quot;block&quot;;</span><br><span class="line">    setTimeout(showSlides, 2000); // Change image every 2 seconds</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://lirawx.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript数组去重</title>
    <link href="https://lirawx.me/2015/js/2017-04-26-arraryrplace.html"/>
    <id>https://lirawx.me/2015/js/2017-04-26-arraryrplace.html</id>
    <published>2017-04-26T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>1.创建一个新的数组存放结果<br>2.创建一个空对象<br>3.for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。<br>说明：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.prototype.unique3 = function()&#123;</span><br><span class="line"> var res = [];</span><br><span class="line"> var json = &#123;&#125;;</span><br><span class="line"> for(var i = 0; i &lt; this.length; i++)&#123;</span><br><span class="line">  if(!json[this[i]])&#123;</span><br><span class="line">   res.push(this[i]);</span><br><span class="line">   json[this[i]] = 1;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return res;</span><br><span class="line">&#125;</span><br><span class="line">var arr = [112,112,34,&apos;你好&apos;,112,112,34,&apos;你好&apos;,&apos;str&apos;,&apos;str1&apos;];</span><br><span class="line">alert(arr.unique3());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h2&gt;&lt;p&gt;1.创建一个新的数组存放结果&lt;br&gt;2.创建一个空对象&lt;br&gt;3.for循环时，每次取出一个元素与对象进行对比，如果这个元素不重复，则把它存放到结果数组中，同时把这个元素的内容作为对象的一个属性，并赋值为1，存入到第2步建立的对象中。&lt;br&gt;说明：至于如何对比，就是每次从原数组中取出一个元素，然后到对象中去访问这个属性，如果能访问到值，则说明重复。&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://lirawx.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js小时钟</title>
    <link href="https://lirawx.me/2015/js/2017-04-25-clock.html"/>
    <id>https://lirawx.me/2015/js/2017-04-25-clock.html</id>
    <published>2017-04-23T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>实现代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function startTime()</span><br><span class="line">&#123;</span><br><span class="line">var today=new Date()</span><br><span class="line">var h=today.getHours()</span><br><span class="line">var m=today.getMinutes()</span><br><span class="line">var s=today.getSeconds()</span><br><span class="line">// add a zero in front of numbers&lt;10</span><br><span class="line">m=checkTime(m)</span><br><span class="line">s=checkTime(s)</span><br><span class="line">document.getElementById(&apos;txt&apos;).innerHTML=h+&quot;:&quot;+m+&quot;:&quot;+s</span><br><span class="line">t=setTimeout(&apos;startTime()&apos;,500)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function checkTime(i)</span><br><span class="line">&#123;</span><br><span class="line">if (i&lt;10)</span><br><span class="line">  &#123;i=&quot;0&quot; + i&#125;</span><br><span class="line">  return i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function startTime()&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="js" scheme="https://lirawx.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue全面介绍--全家桶（vue笔记一）</title>
    <link href="https://lirawx.me/2015/Vue/2017-04-27-vue.html"/>
    <id>https://lirawx.me/2015/Vue/2017-04-27-vue.html</id>
    <published>2017-04-23T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  “简单却不失优雅，小巧而不乏大匠”。<br>Vue.js 是一个JavaScriptMVVM库，是一套构建用户界面的渐进式框架。它是以数据驱动和组件化的思想构建的，采用自底向上增量开发的设计。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js；同时比起 React + Redux 相对复杂的架构，Vue.js 更加轻量级也更加容易上手，是初创项目的首选前端框架。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。并且作者是华人的关系，Vue拥有着对华人开发者最友好的api文档和官方教程。<br><a id="more"></a></p><h2 id="vue、React、Angular1对比"><a href="#vue、React、Angular1对比" class="headerlink" title="vue、React、Angular1对比"></a>vue、React、Angular1对比</h2><p>在Angular1中，在scope作用域中每一次数据变化，会触发watcher的重新计算，angular对常用的dom事件，xhr事件等做了封装， 在里面触发进入angular的digest流程。在digest流程里面，会从rootscope开始遍历， 检查所有的watcher。并且，如果一些 watcher 触发另一个更新，脏检查循环（digest cycle）可能要运行多次。Vue则没有这个问题，因为它使用基于依赖追踪的观察系统并且异步队列更新，数据的变化都是独立处罚的，除非数据之间有明确的依赖关系。<br>vue官方宣称vue的渲染性能优于react。为了有理有据让人信服，vue开发团队建立了一个简单的对比性能的项目（<a href="https://github.com/chrisvfritz/vue-render-performance-comparisons），它负责渲染10000个列表项100次。Vue官方将每一个参照项目都分别运行" target="_blank" rel="noopener">https://github.com/chrisvfritz/vue-render-performance-comparisons），它负责渲染10000个列表项100次。Vue官方将每一个参照项目都分别运行</a> 20 次并取最好的结果结果如下图：<br><img src="http://img.blog.csdn.net/20170328173227286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhlbmdoYW8zNTc5MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>由此可见，Vue的性能是远好于Angular1，并且稍微优于React的。</p><h2 id="社区拓展对比"><a href="#社区拓展对比" class="headerlink" title="社区拓展对比"></a>社区拓展对比</h2><p>Angular1的背后是Google，所以社区基础是不需要担心的，从Tutorial到StackOverflow的问题数量都可以反映出生态系统很完整。Vue和React都有强大的社区支持。React有状态管理库Flux、ReduxVue，相应的，Vue有vuex。Vue 和 React 都提供了强大的路由库来应对大型应用。然而Vue的路由库和状态管理库都是由官方维护支持的。React 则是选择把这些问题交给社区维护，因此创建了一个更分散的生态系统。但相对的，React 的生态系统相比 Vue 更加繁荣。此外，Vue 提供了Vue-cli 脚手架，包括了Webpack，Browserify，甚至路由库，能让你非常容易地构建项目。</p><h2 id="学习陡峭度对比"><a href="#学习陡峭度对比" class="headerlink" title="学习陡峭度对比"></a>学习陡峭度对比</h2><p>在指令与组件方面，Vue中将指令和组件分得更清晰。指令只封装 DOM 操作，而组件代表一个自给自足的独立单元，有自己的视图和数据逻辑。在 Angular1 中两者有不少相混的地方。在API与框架设计方面，angular1都比vue要复杂的多。就个人感觉而言，angular1和React的学习曲线会相对陡峭一些，而vue的编码方式会更趋近于前端开发者的编程习惯。<br>因为vue的作者是中国人，vue的官方网站、教程和api肯定是最完善、最易懂的。此外，每次大版本的发布，都会伴随着详尽的迁移说明文档，包含了很多详尽的阐述以及许多迁移的例子，甚至还有迁移工具。</p><h2 id="vue的缺点"><a href="#vue的缺点" class="headerlink" title="vue的缺点"></a>vue的缺点</h2><p>Vue就这么好，难道没有缺点吗？当然有，vue虽然在16年非常火爆，但是相比于angular和react，不论是成熟度还是社区活跃度都还不是对手。此外，Vue明确声明了自己放弃了对IE8的支持。再看看现在的招聘网站上，有多少写了需要有angular经验，而又有多少写了需要vue经验，就可见vue的影响力相比于angular和react还差的很远。</p><h2 id="vue全家桶及项目架构"><a href="#vue全家桶及项目架构" class="headerlink" title="vue全家桶及项目架构"></a>vue全家桶及项目架构</h2><p>Vue有著名的全家桶系列，包含了vue-router（<a href="http://router.vuejs.org），vuex（http://vuex.vuejs.org），" target="_blank" rel="noopener">http://router.vuejs.org），vuex（http://vuex.vuejs.org），</a> vue-resource（<a href="https://github.com/pagekit/vue-resource）。再加上构建工具vue-cli，就是一个完整的vue项目的核心构成。" target="_blank" rel="noopener">https://github.com/pagekit/vue-resource）。再加上构建工具vue-cli，就是一个完整的vue项目的核心构成。</a></p><h3 id="vue-router路由"><a href="#vue-router路由" class="headerlink" title="vue-router路由"></a>vue-router路由</h3><p>推荐使用npm工具来安装vue-router<br>npm install vue-router<br>通过import导入并定义Vue模块、vue-router模块和需要使用的组件，在本例中，分别是Goods、Ratings和Seller组件。最后，如果在一个模块化工程中使用它，必须要通过 Vue.use() 明确地安装路由功能。<br>import Vue from’vue’<br>importRouter from’vue-router’</p><p>import Goods from ‘@/components/goods/goods’;<br>import Ratings from ‘@/components/ratings/ratings’;<br>import Seller from ‘@/components/seller/seller’;</p><p>Vue.use(Router); // 需要import Vue和Router，不然会报错undefined<br>通过const router= new VueRouter（）来定义一个路由，并传入对应的配置，包括路径path和组件components。</p><h3 id="vuex状态管理"><a href="#vuex状态管理" class="headerlink" title="vuex状态管理"></a>vuex状态管理</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。如前面所提到的，Vuex 已经集成到 Vue 的官方调试工具vue Devtools，可以轻松的查看项目中的Vuex状态变化情况。<br>假设有这样一个场景：我们的项目规模比较大，有多个父组件，每个父组件同时又包含多个子组件。如何保持对所有时间的追踪将变得很困难。到底哪个事件是哪个组件派发的，哪个组件该监听哪个事件？父组件将变得和子组件耦合越来越严重，因为它需要明确的派发和监听子组件的某些事件。项目逻辑分散在各个组件当中，很容易导致逻辑的混乱，不利于我们项目的维护。<br>这就是 Vuex 用来解决的问题。 Vuex 的四个核心概念分别是：<br>The state tree：Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。至此它便作为一个『唯一数据源(SSOT)』而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。<br>Getters：用来从 store 获取 Vue 组件数据。<br>Mutators：事件处理器用来驱动状态的变化。<br>Actions：可以给组件使用的函数，以此用来驱动事件处理器 mutations<br>Vuex和简单的全局对象是不同的，当Vuex从store中读取状态值的时候，若状态发生了变化，那么相应的组件也会高效的更新。并且，改变store中状态的唯一途径就是提交commit mutations。这样便于我们跟踪每一次状态的变化。只要发生了状态的变化，一定伴随着mutation的提交。</p><h3 id="vue-resource介绍"><a href="#vue-resource介绍" class="headerlink" title="vue-resource介绍"></a>vue-resource介绍</h3><p>Vue-resource有体积小，支持IE9以上的浏览器，支持promise特性的特点。同样推荐使用npm来安装Vue-resource。<br>$ npm install vue-resource<br>在安装并引入vue-resource后，可以基于全局的Vue对象使用http，也可以基于某个Vue实例使用http。<br>在发送请求后，使用then方法来处理响应结果，then方法有两个参数，第一个参数是响应成功时的回调函数，第二个参数是响应失败时的回调函数。<br>vue-resource的请求API是按照REST风格设计的，它提供了7种请求API：<br>· get(url,[options])<br>· head(url,[options])<br>· delete(url,[options])<br>· jsonp(url,[options])<br>· post(url,[body], [options])<br>· put(url, [body],[options])<br>· patch(url,[body], [options])</p><h3 id="vue工程目录结构"><a href="#vue工程目录结构" class="headerlink" title="vue工程目录结构"></a>vue工程目录结构</h3><p><img src="http://img.blog.csdn.net/20170328173526370?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhlbmdoYW8zNTc5MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>components/文件夹用来存放Vue 组件。个人建议，把每一个组件中使用到的image图片放置到对应的组件子文件目录下，便于统一的管理<br>Node_modules/npm安装的该项目的依赖库<br>vuex/文件夹存放的是和 Vuex store 相关的东西（state对象，actions，mutations)<br>router/文件夹存放的是跟vue-router相关的路由配置项<br>build/文件是 webpack 的打包编译配置文件<br>static/文件夹存放一些静态的、较少变动的image或者css文件<br>config/文件夹存放的是一些配置项，比如服务器访问的端口配置等<br>dist/该文件夹一开始是不存在，在我们的项目经过 build 之后才会产出<br>App.vue根组件，所有的子组件都将在这里被引用<br>index.html整个项目的入口文件，将会引用我们的根组件 App.vue<br>main.js入口文件的 js 逻辑，在webpack 打包之后将被注入到 index.html 中</p><h2 id="Vue核心功能"><a href="#Vue核心功能" class="headerlink" title="Vue核心功能"></a>Vue核心功能</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>假设有如下的购物车结算场景，用户选中商品的总金额是根据商品数量、选中商品种类数<br>和商品单价来变化的。然而，数量、选中种类数量和单价这几个对象都是根据用户选择而动态变化的，如果在前端模版中为了计算最终商品总额，放入这几个动态变化的变量（商品数量、商品单价、选中商品种类），会让这个逻辑变得复杂难以维护。在这种情况下，模版便不再简洁清晰。Vue给出了此种场景的解决方案，在任何复杂的逻辑，vue都推荐使用计算属性。</p><h4 id="computed-vs-method"><a href="#computed-vs-method" class="headerlink" title="computed vs method"></a>computed vs method</h4><p>也许会有疑问，这个计算属性和定义一个method方法不是差不多么？这两者最大的区别是计算属性是基于它的依赖进行缓存的。计算属性只有在它的相关依赖发生变化时才会重新计算求值。在本例中，只有当选择商品的价格price和数量count发生变化时，这个计算属性totalPrice才会重新计算新的值。这就意味着，只要totalPrice这个值没有发生变化，多次访问该计算属性会立即返回之前的计算结果，而不必再次执行计算。</p><h3 id="模版语法"><a href="#模版语法" class="headerlink" title="模版语法"></a>模版语法</h3><p>Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。Vue的模版语法包括了使用双大括号插入文本、使用v-html插入纯HTML内容、使用v-bind插入对象、类似angular的v-if、v-show、v-for指令、以及过滤器等等。</p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>组件（Component）是 Vue.js 最强大的功能。组件可以封装可重用的代码，通过传入对象的不同，实现组件的复用。<br>举一个简单的组建例子，我们首先编写一个star组件，它就是一个普通的star.vue文件。它的作用就是简单实现了一个五角星。<br>如何在其他的vue文件中使用这个star组件呢？如下图所示，首先通过import引入star组件对象，并在想使用star组件的vue文件中声明注册star组件。现在就可以愉快的通过标签来在该vue文件中任意地方使用star组件了。在你想展示一个五角星的地方，使用一个star标签，就可以轻松完成这个功能。<br>组件实例的作用域是孤立的。这意味着不能在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，我们需要通过子组件的props选项。如本例所示，子组件star要显式的使用props选项声明它期待获得的数据。在这里就是指的“size”和“score”两个变量。我们可以通过父级给子组件star传入大小和数值这两个对象，来实现对子组件的定制化。</p><h3 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h3><p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果，可以用简单的几行代码实现酷炫的过渡效果。Vue 提供了 transition 的封装组件，在使用v-if、v-show等方法使得transition内部dom元素发生变化时，可以给任何元素和组件添加 entering/leaving 过渡。<br>当v-show中内容发生变化时，transition组件中的元素会发生状态的改变，在应用了transition封装后，Vue会自动识别目标元素是否应用了CSS过渡效果动画，如果有，会在合适的时机添加 entering/leaving的class来实现该过渡效果。<br>下图所示是一个简单的过渡效果的例子，需要将想实现过渡效果的元素放在transition标签中包裹，通过name=“slide-fade”来声明过渡效果名称，并在对应的vue文件中添加过渡效果<br>的css样式，这样就可以简单的完成该元素的过渡效果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据不完全统计，包括饿了么、稀土掘金、苏宁易购、美团、天猫、荔枝FM、房多多、Laravel、htmlBurger等国内外知名大公司都在使用vue进行新项目的开发和旧项目的前端重构工作。<br>此外，vue + vuex+ vue-resource + vue-router + webpack + es6 + less的项目架构成为了越来越多大公司的第一选择。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;  “简单却不失优雅，小巧而不乏大匠”。&lt;br&gt;Vue.js 是一个JavaScriptMVVM库，是一套构建用户界面的渐进式框架。它是以数据驱动和组件化的思想构建的，采用自底向上增量开发的设计。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js；同时比起 React + Redux 相对复杂的架构，Vue.js 更加轻量级也更加容易上手，是初创项目的首选前端框架。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。并且作者是华人的关系，Vue拥有着对华人开发者最友好的api文档和官方教程。&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://lirawx.me/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 入门</title>
    <link href="https://lirawx.me/2015/Vue/2017-04-24-vue_webpack.html"/>
    <id>https://lirawx.me/2015/Vue/2017-04-24-vue_webpack.html</id>
    <published>2017-04-23T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p> Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。<br><a id="more"></a></p><h3 id="打包js"><a href="#打包js" class="headerlink" title="打包js"></a>打包js</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app/runoob1.js 文件</span><br><span class="line">document.write(require(&quot;./runoob2.js&quot;));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack runoob1.js bundle.js</span><br></pre></td></tr></table></figure><p> webpack 根据模块的依赖关系进行静态分析，这些文件(模块)会被包含到 bundle.js 文件中。Webpack 会给每个模块分配一个唯一的 id 并通过这个 id 索引和访问模块。 在页面启动时，会先执行 runoob1.js 中的代码，其它模块会在运行 require 的时候再执行。</p><h2 id="LOADER"><a href="#LOADER" class="headerlink" title="LOADER"></a>LOADER</h2><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。<br>所以如果我们需要在应用中添加 css 文件，就需要使用到 css-loader 和 style-loader，他们做两件不同的事情，css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们，style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中。</p><p>app/runoob1.js 文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&quot;!style!css!./style.css&quot;);</span><br><span class="line">document.write(require(&quot;./runoob2.js&quot;));</span><br></pre></td></tr></table></figure></p><p>require CSS 文件的时候都要写 loader 前缀 !style!css!，当然我们可以根据模块类型（扩展名）来自动绑定需要的 loader。 将 runoob1.js 中的 require(“!style!css!./style.css”) 修改为 require(“./style.css”) ：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app/runoob1.js 文件</span><br><span class="line">require(&quot;./style.css&quot;);</span><br><span class="line">document.write(require(&quot;./runoob2.js&quot;));</span><br></pre></td></tr></table></figure></p><p>然后执行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack runoob1.js bundle.js --module-bind &apos;css=style!css&apos;</span><br></pre></td></tr></table></figure></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>我们可以将一些编译选项放在配置文件中，以便于统一管理：<br>创建 webpack.config.js 文件，代码如下所示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app/webpack.config.js 文件</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &quot;./runoob1.js&quot;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: &quot;bundle.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; test: /\.css$/, loader: &quot;style!css&quot; &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接下来我们只需要执行 webpack 命令即可生成 bundle.js 文件。webpack 命令执行后，会默认载入当前目录的 webpack.config.js 文件。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>插件在 webpack 的配置信息 plugins 选项中指定，用于完成一些 loader 不能完成的工。<br>webpack 自带一些插件，你可以可以通过 cnpm 安装一些插件。<br>使用内置插件需要通过以下命令来安装：<br>cnpm install webpack –save-dev<br>比如我们可以安装内置的 BannerPlugin 插件，用于在文件头部输出一些注释信息。<br>修改 webpack.config.js，代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app/webpack.config.js 文件</span><br><span class="line">var webpack=require(&apos;webpack&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &quot;./runoob1.js&quot;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: &quot;bundle.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; test: /\.css$/, loader: &quot;style!css&quot; &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">    new webpack.BannerPlugin(&apos;菜鸟教程 webpack 实例&apos;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后运行 webpack，打开 bundle.js，可以看到文件头部出现了我们指定的注释信息。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>当项目逐渐变大，webpack 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$webpack --progress --colors</span><br></pre></td></tr></table></figure></p><p>如果不想每次修改模块后都重新编译，那么可以启动监听模式。开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack --progress --colors --watch</span><br></pre></td></tr></table></figure></p><p>当然，我们可以使用 webpack-dev-server 开发服务，这样我们就能通过 localhost:8080 启动一个 express 静态资源 web 服务器，并且会以监听模式自动运行 webpack，在浏览器打开 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 或 <a href="http://localhost:8080/webpack-dev-server/" target="_blank" rel="noopener">http://localhost:8080/webpack-dev-server/</a> 可以浏览项目中的页面和编译后的资源输出，并且通过一个 socket.io 服务实时监听它们的变化并自动刷新页面。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">cnpm install webpack-dev-server -g</span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">webpack-dev-server --progress --colors</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://lirawx.me/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>姜文的一步之遥</title>
    <link href="https://lirawx.me/2015/movie/2016-12-26-yibuzhiyao.html"/>
    <id>https://lirawx.me/2015/movie/2016-12-26-yibuzhiyao.html</id>
    <published>2016-12-26T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来对姜文的电影有种从心底里的欢喜，这个不同于其他国人导演的拍片风格，很是吸引人。从<br>让子弹飞到一步之遥，都是民国风，个人对民国也有着文青的特殊向往，那个军阀混战的年代，<a id="more"></a>人民<br>开始追求时尚，追求自由，追求知识，科学等等，一切皆有可能的年代。</p><p>姜文谱写了一步之遥，借此讽今，开篇从泡沫出场，预示着本片的电影基调，深刻的批判了当下中国<br>电影的泡沫，终将破灭。To be or not to be. 这便是这部电影的伟大之处，偏要在上映两周年的<br>今天才能读懂的深意。</p><p>主角马走日，性格鲜明。电影中买通不成，便冲动行凶。如果马走日，真的想杀王天王，那他可以事<br>先谋划，这并不难。但，他却选择在众目睽睽下，挥拳上台“殴打”对方。这足以体现马走日的孩子气，<br>幼稚的可笑，无论老少都是孩子，用孩子的眼光看待人事。</p><p>为解一时之气，宁愿坐牢宁愿被枪毙。</p><p>理由很简单，仅为了死去的完颜英的颜面。</p><p>傻不傻？<br><img src="http://mmbiz.qpic.cn/mmbiz_png/oAzUiaO96O8aXHExRibrChqAsa6ruUvcjLAa79lGHFicpSW2HyrQY8hIV8gET2fyx8lFuRKPn3UwKHFMnW2dTGxLg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p><p>李安说过，周星驰拍的，都是小孩子的东西。</p><p>那么《一步之遥》，我给它的定义，就是一部“成人童话”。</p><p>它的主题有两个：</p><p>讽刺自命成熟者、讽刺自命成熟的社会。</p><p>是的，以一个小孩子的视角。</p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/oAzUiaO96O8a5JjO1iamBzny1frOELkYic9nYLS58vicqD2Nseb4DsP5g1yCLGibaibmaxmEZ2b0WYdeicSguHmXKwsCA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p><p>《一步之遥》表面上是部民国题材电影。</p><p>但实际上，它一直都在假借历史，讽刺假大空的、诛心吃人的社会。</p><p>青卢和白狐，为了争夺花国总统，费尽心思编排出百老汇级别的精彩表演。</p><p>我有一个文青朋友，当年她和我说，只看这段歌舞，就已经值回电影票价了。</p><p><img src="http://mmbiz.qpic.cn/mmbiz_gif/oAzUiaO96O8a5JjO1iamBzny1frOELkYic9ELCVlC3pic1QZBribGB3Zxu3FuyEenn4GHu919LLg9kH35PTSDCCiblsQ/0?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p><p>《一步之遥》的结局，极不符合普通国产片中惯用的套路。</p><p>从头到尾，死掉的只有马走日、完颜英，以及半死不活的武六。</p><p>其余的人，看客依旧是看客，军阀依旧是军阀，伪艺术家依旧是伪艺术家。</p><p>他们依旧挥舞着武器，只不过有的武器是枪，有的武器是目光，有的武器是镜头。</p><p>以上灵感来自<a href="http://mp.weixin.qq.com/s?__biz=MjM5MTIwNTYwMg==&amp;mid=2654584840&amp;idx=2&amp;sn=3d3ae46b056a8bfffd7c45b3529f7064&amp;chksm=bd7471858a03f8938774bd6b82ce6ba76f566c2ede19767a1fcc804f7af3410dff6c6e427bbd&amp;mpshare=1&amp;scene=23&amp;srcid=1227pGKdyNI5TlF1CdmgbIXk#rd" target="_blank" rel="noopener">毒舌电影</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来对姜文的电影有种从心底里的欢喜，这个不同于其他国人导演的拍片风格，很是吸引人。从&lt;br&gt;让子弹飞到一步之遥，都是民国风，个人对民国也有着文青的特殊向往，那个军阀混战的年代，
    
    </summary>
    
    
      <category term="姜文  一步之遥  电影" scheme="https://lirawx.me/tags/%E5%A7%9C%E6%96%87-%E4%B8%80%E6%AD%A5%E4%B9%8B%E9%81%A5-%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>NO Jquery</title>
    <link href="https://lirawx.me/2015/web/2016-11-23-nojquery.html"/>
    <id>https://lirawx.me/2015/web/2016-11-23-nojquery.html</id>
    <published>2016-11-23T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-Functions-and-Helpers"><a href="#JavaScript-Functions-and-Helpers" class="headerlink" title="JavaScript Functions and Helpers"></a>JavaScript Functions and Helpers</h2><p>Vanilla JS utilities for writing powerful web applications without jQuery.<br><a id="more"></a></p><h3 id="Selecting"><a href="#Selecting" class="headerlink" title="Selecting"></a>Selecting</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// select all div tags + link tags with the class &quot;info&quot;</span><br><span class="line">var matches = document.querySelectorAll(&quot;div, a.info&quot;);</span><br><span class="line"></span><br><span class="line">// select all text input fields</span><br><span class="line">var matches = document.querySelectorAll(&quot;input[type=&apos;text&apos;]&quot;);</span><br><span class="line"></span><br><span class="line">var match = document.querySelector(&apos;div.foo&apos;);</span><br><span class="line"></span><br><span class="line">// equals for the matched element</span><br><span class="line">var match = document.querySelectorAll(&apos;div.foo&apos;)[0];</span><br><span class="line"></span><br><span class="line">// select a list of matching elements, context is optional</span><br><span class="line">function $(selector, context) &#123;</span><br><span class="line">    return (context || document).querySelectorAll(selector);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// select the first match only, context is optional</span><br><span class="line">function $1(selector, context) &#123;</span><br><span class="line">    return (context || document).querySelector(selector);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// how to use</span><br><span class="line"></span><br><span class="line">// select all &apos;.bar&apos; elements inside all &apos;.foo&apos; containers</span><br><span class="line">var matches = $(&apos;.foo .bar&apos;);</span><br><span class="line"></span><br><span class="line">// context example</span><br><span class="line">var container = $1(&apos;.foo&apos;);</span><br><span class="line">// select &apos;.bar&apos; elements inside this one container</span><br><span class="line">var matches = $(&apos;.bar&apos;, container);</span><br></pre></td></tr></table></figure><p>var list = document.getElementsByClassName(‘foo’);</p><p>var list = document.getElementsByTagName(‘a’);</p><p>var el = document.getElementById(‘foo’);</p><h3 id="Traversing"><a href="#Traversing" class="headerlink" title="Traversing"></a>Traversing</h3><h4 id="Match-element-selector"><a href="#Match-element-selector" class="headerlink" title="Match element selector"></a>Match element selector</h4><p>Check the current elements against a CSS selector.</p><p>To check whether a given element matches a CSS selector, modern browsers support the matches() or matchesSelector() DOM method. Here’s a polyfill for other browsers:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// matches polyfill</span><br><span class="line">this.Element &amp;&amp; function(ElementPrototype) &#123;</span><br><span class="line">    ElementPrototype.matches = ElementPrototype.matches ||</span><br><span class="line">    ElementPrototype.matchesSelector ||</span><br><span class="line">    ElementPrototype.webkitMatchesSelector ||</span><br><span class="line">    ElementPrototype.msMatchesSelector ||</span><br><span class="line">    function(selector) &#123;</span><br><span class="line">        var node = this, nodes = (node.parentNode || node.document).querySelectorAll(selector), i = -1;</span><br><span class="line">        while (nodes[++i] &amp;&amp; nodes[i] != node);</span><br><span class="line">        return !!nodes[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(Element.prototype);</span><br></pre></td></tr></table></figure><p>Now you can call matches() on any DOM element:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var el = document.querySelector(&apos;span&apos;);</span><br><span class="line">console.log(el.matches(&apos;.foo&apos;));</span><br></pre></td></tr></table></figure><h4 id="Get-parent-element-node"><a href="#Get-parent-element-node" class="headerlink" title="Get parent element node"></a>Get parent element node</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var el = document.querySelector(&apos;div&apos;);</span><br><span class="line">var parent = el.parentNode;</span><br></pre></td></tr></table></figure><h4 id="Select-the-children-of-an-element"><a href="#Select-the-children-of-an-element" class="headerlink" title="Select the children of an element"></a>Select the children of an element</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var el = document.querySelector(&apos;div&apos;);</span><br><span class="line"></span><br><span class="line">var children = el.childNodes,</span><br><span class="line">    number_of_children = children.length;</span><br><span class="line"></span><br><span class="line">for (var i=0; i&lt;number_of_children; i++)</span><br><span class="line">    console.log(children[i].innerHTML);</span><br></pre></td></tr></table></figure><h3 id="Manipulation"><a href="#Manipulation" class="headerlink" title="Manipulation"></a>Manipulation</h3><h4 id="Create-a-DOM-element"><a href="#Create-a-DOM-element" class="headerlink" title="Create a DOM element"></a>Create a DOM element</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var el = document.createElement(&apos;div&apos;);</span><br><span class="line">el.innerHTML = &apos;&lt;p&gt;Hello World!&lt;/p&gt;&apos;;</span><br><span class="line">var textnode = document.createTextNode(&apos;Hello World!&apos;);</span><br><span class="line">el.appendChild(textnode);</span><br><span class="line">document.body.appendChild(el);</span><br></pre></td></tr></table></figure><h4 id="Replace-a-DOM-element"><a href="#Replace-a-DOM-element" class="headerlink" title="Replace a DOM element"></a>Replace a DOM element</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// select the element that will be replaced</span><br><span class="line">var el = document.querySelector(&apos;div&apos;);</span><br><span class="line"></span><br><span class="line">// &lt;a href=&quot;/javascript/manipulation/creating-a-dom-element-51/&quot;&gt;create a new element&lt;/a&gt; that will take the place of &quot;el&quot;</span><br><span class="line">var newEl = document.createElement(&apos;p&apos;);</span><br><span class="line">newEl.innerHTML = &apos;&lt;b&gt;Hello World!&lt;/b&gt;&apos;;</span><br><span class="line"></span><br><span class="line">// replace el with newEL</span><br><span class="line">el.parentNode.replaceChild(newEl, el);</span><br></pre></td></tr></table></figure><h4 id="Removing-an-element"><a href="#Removing-an-element" class="headerlink" title="Removing an element"></a>Removing an element</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var el = document.querySelector(&apos;div&apos;);</span><br><span class="line">el.parentNode.removeChild(el);</span><br></pre></td></tr></table></figure><p>Iterating over a list of selected elements</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var divs = document.querySelectorAll(&apos;div&apos;), len = divs.length;</span><br><span class="line"></span><br><span class="line">for (var i=0; i&lt;len; i++) &#123;</span><br><span class="line">    divs[i].style.color = &quot;green&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Finally, you can use this little trick, that is similar to jQuery&apos;s $.each() method:</span><br><span class="line"></span><br><span class="line">var divs = document.querySelectorAll(&apos;div&apos;);</span><br><span class="line"></span><br><span class="line">[].forEach.call(divs, function(item) &#123;</span><br><span class="line">    item.style.color = &quot;green&quot;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><h4 id="Adding-removing-and-testing-for-classes"><a href="#Adding-removing-and-testing-for-classes" class="headerlink" title="Adding, removing, and testing for classes"></a>Adding, removing, and testing for classes</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function hasClass(el, className) &#123;</span><br><span class="line">    return el.classList ? el.classList.contains(className) : new RegExp(&apos;\\b&apos;+ className+&apos;\\b&apos;).test(el.className);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function addClass(el, className) &#123;</span><br><span class="line">    if (el.classList) el.classList.add(className);</span><br><span class="line">    else if (!hasClass(el, className)) el.className += &apos; &apos; + className;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function removeClass(el, className) &#123;</span><br><span class="line">    if (el.classList) el.classList.remove(className);</span><br><span class="line">    else el.className = el.className.replace(new RegExp(&apos;\\b&apos;+ className+&apos;\\b&apos;, &apos;g&apos;), &apos;&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Setting-getting-and-removing-data-attributes"><a href="#Setting-getting-and-removing-data-attributes" class="headerlink" title="Setting, getting, and removing data attributes"></a>Setting, getting, and removing data attributes</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var el = document.querySelector(&apos;div&apos;);</span><br><span class="line">el.setAttribute(&apos;data-foo&apos;, &apos;Hello World!&apos;);</span><br><span class="line"></span><br><span class="line">var el = document.querySelector(&apos;img&apos;);</span><br><span class="line">console.log(el.getAttribute(&apos;data-foo&apos;));</span><br><span class="line"></span><br><span class="line">el.removeAttribute(&apos;data-foo&apos;);</span><br></pre></td></tr></table></figure><h4 id="Getting-setting-and-removing-attributes"><a href="#Getting-setting-and-removing-attributes" class="headerlink" title="Getting, setting, and removing attributes"></a>Getting, setting, and removing attributes</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// set the alt attribute of an element</span><br><span class="line">var el = document.querySelector(&apos;img&apos;);</span><br><span class="line">el.setAttribute(&apos;alt&apos;, &apos;Hello World!&apos;);</span><br><span class="line">el.removeAttribute(&apos;alt&apos;);v</span><br></pre></td></tr></table></figure><h4 id="toggle"><a href="#toggle" class="headerlink" title="toggle"></a>toggle</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function toggle(el) &#123;</span><br><span class="line">    hasClass(el, &apos;is_hidden&apos;) ? removeClass(el, &apos;is_hidden&apos;) : addClass(el, &apos;is_hidden&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Styles"><a href="#Styles" class="headerlink" title="Styles"></a>Styles</h3><h4 id="Set-and-get-CSS-styles-of-elements"><a href="#Set-and-get-CSS-styles-of-elements" class="headerlink" title="Set and get CSS styles of elements"></a>Set and get CSS styles of elements</h4><p>The getComputedStyle() method (IE &lt; 9: currentStyle property) corresponds to the rendered on-page style of an element after all stylesheets were applied. It can be accessed as follows:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  var el = document.querySelector(&apos;div&apos;);</span><br><span class="line"></span><br><span class="line">// getComputedStyle for modern browsers, currentStyle for IE</span><br><span class="line">var style = window.getComputedStyle ? getComputedStyle(el, null) : el.currentStyle;</span><br><span class="line"></span><br><span class="line">// reading properties</span><br><span class="line">console.log(el.backgroundColor);</span><br><span class="line"></span><br><span class="line">// reading properties containing hyphens</span><br><span class="line">console.log(el[&apos;-webkit-text-size-adjust&apos;]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var el = document.querySelector(&apos;div&apos;);</span><br><span class="line"></span><br><span class="line">el.style.backgroundColor = &apos;green&apos;;</span><br><span class="line">el.style.display = &apos;none&apos;;</span><br><span class="line">el.style[&apos;border-radius&apos;] = &apos;5px&apos;;</span><br></pre></td></tr></table></figure><p>Multiple styles can be set at once by use of the cssText property:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">el.style.cssText += &apos;background: green, display: none;&apos;;</span><br></pre></td></tr></table></figure><p>However, this method is rather slow and therefore it’s better to use instead a little helper for setting multiple styles by an object of key/value pairs:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function css(el, styles) &#123;</span><br><span class="line">    for (var property in styles)</span><br><span class="line">        el.style[property] = styles[property];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// example</span><br><span class="line">var el = document.querySelector(&apos;div&apos;);</span><br><span class="line">css(el, &#123; background: &apos;green&apos;, display: &apos;none&apos;, &apos;border-radius&apos;: &apos;5px&apos; &#125;);</span><br></pre></td></tr></table></figure><h4 id="Get-and-set-scroll-position-of-an-element"><a href="#Get-and-set-scroll-position-of-an-element" class="headerlink" title="Get and set scroll position of an element"></a>Get and set scroll position of an element</h4><p>Getting the scroll position of the document in px.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,</span><br><span class="line">    scrollTop = window.pageYOffset || document.documentElement.scrollTop;</span><br></pre></td></tr></table></figure><p>Setting the document scroll position of the document in px:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.documentElement.scrollTop = document.body.scrollTop = 1000;</span><br><span class="line">document.documentElement.scrollLeft = document.body.scrollLeft = 500;</span><br></pre></td></tr></table></figure><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><h4 id="JSONP-Ajax-requests"><a href="#JSONP-Ajax-requests" class="headerlink" title="JSONP Ajax requests"></a>JSONP Ajax requests</h4><p>JSONP allows asynchronous loading of data, even from servers in a different domain.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// define a callback function, which accepts the returned JSON data as its only argument</span><br><span class="line">function response(data) &#123;</span><br><span class="line">    // JSON data in form of a JavaScript object</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// create a script tag with the external request URL</span><br><span class="line">// include &quot;response&quot; as value of the GET param &quot;callback&quot; in the URL</span><br><span class="line">var script = document.createElement(&apos;script&apos;);</span><br><span class="line">script.src = &apos;https://foo.bar/api/?callback=response&apos;;</span><br><span class="line">document.body.appendChild(script);</span><br></pre></td></tr></table></figure><h4 id="Load-a-script-file-asynchronously"><a href="#Load-a-script-file-asynchronously" class="headerlink" title="Load a script file asynchronously"></a>Load a script file asynchronously</h4><p>How to load a JavaScript file asynchronously from the server and automatically execute it.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var script = document.createElement(&apos;script&apos;),</span><br><span class="line">    scripts = document.getElementsByTagName(&apos;script&apos;)[0];</span><br><span class="line">script.src = url;</span><br><span class="line">scripts.parentNode.insertBefore(script, scripts);</span><br></pre></td></tr></table></figure><p>it’s recommended to use a standard script tag with the async (and defer) attribute included:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//&lt;script src=&quot;https://platform.twitter.com/widgets.js&quot; async defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="Send-Ajax-GET-and-POST-requests"><a href="#Send-Ajax-GET-and-POST-requests" class="headerlink" title="Send Ajax GET and POST requests"></a>Send Ajax GET and POST requests</h4><p>The following helper function allows sending an Ajax request via GET method - an equivalent to jQuery’s $.get(). Its url argument must contain the full request path including all GET parameters:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getAjax(url, success) &#123;</span><br><span class="line">    var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class="line">    xhr.open(&apos;GET&apos;, url);</span><br><span class="line">    xhr.onreadystatechange = function() &#123;</span><br><span class="line">        if (xhr.readyState&gt;3 &amp;&amp; xhr.status==200) success(xhr.responseText);</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.setRequestHeader(&apos;X-Requested-With&apos;, &apos;XMLHttpRequest&apos;);</span><br><span class="line">    xhr.send();</span><br><span class="line">    return xhr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// example request</span><br><span class="line">getAjax(&apos;http://foo.bar/?p1=1&amp;p2=Hello+World&apos;, function(data)&#123; console.log(data); &#125;);</span><br></pre></td></tr></table></figure><p>If the server returns a JSON string, it needs to be parsed inside the callback function ($.getJSON in jQuery):</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getAjax(&apos;http://foo.bar/?p1=1&amp;p2=Hello+World&apos;, function(data)&#123;</span><br><span class="line">    var json = JSON.parse(data);</span><br><span class="line">    console.log(json);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Sending POST requests is quite similar ($.post() in jQuery). However, there are lots of options available - more than can be covered in one post. Here’s a useful helper function to get you started:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function postAjax(url, data, success) &#123;</span><br><span class="line">    var params = typeof data == &apos;string&apos; ? data : Object.keys(data).map(</span><br><span class="line">            function(k)&#123; return encodeURIComponent(k) + &apos;=&apos; + encodeURIComponent(data[k]) &#125;</span><br><span class="line">        ).join(&apos;&amp;&apos;);</span><br><span class="line"></span><br><span class="line">    var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">    xhr.open(&apos;POST&apos;, url);</span><br><span class="line">    xhr.onreadystatechange = function() &#123;</span><br><span class="line">        if (xhr.readyState&gt;3 &amp;&amp; xhr.status==200) &#123; success(xhr.responseText); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.setRequestHeader(&apos;X-Requested-With&apos;, &apos;XMLHttpRequest&apos;);</span><br><span class="line">    xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;);</span><br><span class="line">    xhr.send(params);</span><br><span class="line">    return xhr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// example request</span><br><span class="line">postAjax(&apos;http://foo.bar/&apos;, &apos;p1=1&amp;p2=Hello+World&apos;, function(data)&#123; console.log(data); &#125;);</span><br><span class="line"></span><br><span class="line">// example request with data object</span><br><span class="line">postAjax(&apos;http://foo.bar/&apos;, &#123; p1: 1, p2: &apos;Hello World&apos; &#125;, function(data)&#123; console.log(data); &#125;);</span><br></pre></td></tr></table></figure><h4 id="Serialize-form-data-into-an-array"><a href="#Serialize-form-data-into-an-array" class="headerlink" title="Serialize form data into an array"></a>Serialize form data into an array</h4><p>Encode a set of form elements as an array of names and values.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function serializeArray(form) &#123;</span><br><span class="line">    var field, l, s = [];</span><br><span class="line">    if (typeof form == &apos;object&apos; &amp;&amp; form.nodeName == &quot;FORM&quot;) &#123;</span><br><span class="line">        var len = form.elements.length;</span><br><span class="line">        for (i=0; i&lt;len; i++) &#123;</span><br><span class="line">            field = form.elements[i];</span><br><span class="line">            if (field.name &amp;&amp; !field.disabled &amp;&amp; field.type != &apos;file&apos; &amp;&amp; field.type != &apos;reset&apos; &amp;&amp; field.type != &apos;submit&apos; &amp;&amp; field.type != &apos;button&apos;) &#123;</span><br><span class="line">                if (field.type == &apos;select-multiple&apos;) &#123;</span><br><span class="line">                    l = form.elements[i].options.length;</span><br><span class="line">                    for (j=0; j&lt;l; j++) &#123;</span><br><span class="line">                        if(field.options[j].selected)</span><br><span class="line">                            s[s.length] = &#123; name: field.name, value: field.options[j].value &#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else if ((field.type != &apos;checkbox&apos; &amp;&amp; field.type != &apos;radio&apos;) || field.checked) &#123;</span><br><span class="line">                    s[s.length] = &#123; name: field.name, value: field.value &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Serialize-form-data-into-a-query-string"><a href="#Serialize-form-data-into-a-query-string" class="headerlink" title="Serialize form data into a query string"></a>Serialize form data into a query string</h4><p>Encode a set of form elements as a string for submission.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function serialize(form) &#123;</span><br><span class="line">    var field, l, s = [];</span><br><span class="line">    if (typeof form == &apos;object&apos; &amp;&amp; form.nodeName == &quot;FORM&quot;) &#123;</span><br><span class="line">        var len = form.elements.length;</span><br><span class="line">        for (var i=0; i&lt;len; i++) &#123;</span><br><span class="line">            field = form.elements[i];</span><br><span class="line">            if (field.name &amp;&amp; !field.disabled &amp;&amp; field.type != &apos;file&apos; &amp;&amp; field.type != &apos;reset&apos; &amp;&amp; field.type != &apos;submit&apos; &amp;&amp; field.type != &apos;button&apos;) &#123;</span><br><span class="line">                if (field.type == &apos;select-multiple&apos;) &#123;</span><br><span class="line">                    l = form.elements[i].options.length;</span><br><span class="line">                    for (var j=0; j&lt;l; j++) &#123;</span><br><span class="line">                        if(field.options[j].selected)</span><br><span class="line">                            s[s.length] = encodeURIComponent(field.name) + &quot;=&quot; + encodeURIComponent(field.options[j].value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else if ((field.type != &apos;checkbox&apos; &amp;&amp; field.type != &apos;radio&apos;) || field.checked) &#123;</span><br><span class="line">                    s[s.length] = encodeURIComponent(field.name) + &quot;=&quot; + encodeURIComponent(field.value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return s.join(&apos;&amp;&apos;).replace(/%20/g, &apos;+&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><h4 id="Preventing-the-default-action-or-bubbling-of-events"><a href="#Preventing-the-default-action-or-bubbling-of-events" class="headerlink" title="Preventing the default action or bubbling of events"></a>Preventing the default action or bubbling of events</h4><p>How to cancel an event or preventing it from bubbling up the DOM tree.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function handler(e) &#123;</span><br><span class="line">    // stop the immediate action of this event</span><br><span class="line">    e.preventDefault();</span><br><span class="line"></span><br><span class="line">    // prevent the event fro bubbling up</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// attach handler to the keydown event of the document</span><br><span class="line">if (document.attachEvent) document.attachEvent(&apos;onkeydown&apos;, handler);</span><br><span class="line">else document.addEventListener(&apos;keydown&apos;, handler);</span><br></pre></td></tr></table></figure><h4 id="Getting-the-keycode-from-keyboard-events"><a href="#Getting-the-keycode-from-keyboard-events" class="headerlink" title="Getting the keycode from keyboard events"></a>Getting the keycode from keyboard events</h4><p>Binding an event handler to keyboard actions and retrieving the keycode that triggered the event.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// event handler function</span><br><span class="line">function handler(e) &#123;</span><br><span class="line">    var key = window.event ? e.keyCode : e.which;</span><br><span class="line">    console.log(key, e.shiftKey, e.altKey, e.ctrlKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// attach handler to the keydown event of the document</span><br><span class="line">if (document.attachEvent) document.attachEvent(&apos;onkeydown&apos;, handler);</span><br><span class="line">else document.addEventListener(&apos;keydown&apos;, handler);</span><br></pre></td></tr></table></figure><h4 id="Getting-the-current-mouse-position"><a href="#Getting-the-current-mouse-position" class="headerlink" title="Getting the current mouse position"></a>Getting the current mouse position</h4><p>How to get the current mouse position on mouse move or click.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// event handler function</span><br><span class="line">function handler(e) &#123;</span><br><span class="line">    e = e || window.event;</span><br><span class="line"></span><br><span class="line">    var pageX = e.pageX;</span><br><span class="line">    var pageY = e.pageY;</span><br><span class="line"></span><br><span class="line">    // IE 8</span><br><span class="line">    if (pageX === undefined) &#123;</span><br><span class="line">        pageX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;</span><br><span class="line">        pageY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(pageX, pageY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// attach handler to the click event of the document</span><br><span class="line">if (document.attachEvent) document.attachEvent(&apos;onclick&apos;, handler);</span><br><span class="line">else document.addEventListener(&apos;click&apos;, handler);</span><br></pre></td></tr></table></figure><h4 id="Running-code-when-the-document-is-ready"><a href="#Running-code-when-the-document-is-ready" class="headerlink" title="Running code when the document is ready"></a>Running code when the document is ready</h4><p>A page can’t be manipulated safely until the document is “ready.” Here’s how to make sure code isn’t run prematurely.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function run() &#123;</span><br><span class="line">    // do something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// in case the document is already rendered</span><br><span class="line">if (document.readyState!=&apos;loading&apos;) run();</span><br><span class="line">// modern browsers</span><br><span class="line">else if (document.addEventListener) document.addEventListener(&apos;DOMContentLoaded&apos;, run);</span><br><span class="line">// IE &lt;= 8</span><br><span class="line">else document.attachEvent(&apos;onreadystatechange&apos;, function()&#123;</span><br><span class="line">    if (document.readyState==&apos;complete&apos;) run();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Trigger-an-event"><a href="#Trigger-an-event" class="headerlink" title="Trigger an event"></a>Trigger an event</h4><p>How to create and dispatch events. Corresponding functions to jQuery’s $.trigger(), $.click(), $.blur(), $.keyup(), $.mousedown(), etc.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">There are a few convenient methods for triggering an event on specific elements:</span><br><span class="line"></span><br><span class="line">var el = document.querySelector(&apos;input[type=&quot;text&quot;]&apos;);</span><br><span class="line"></span><br><span class="line">// for any element</span><br><span class="line">el.click();</span><br><span class="line"></span><br><span class="line">// for inputs and textareas</span><br><span class="line">el.focus();</span><br><span class="line">el.blur();</span><br><span class="line"></span><br><span class="line">// for form elements</span><br><span class="line">var my_form = document.querySelector(&apos;form&apos;);</span><br><span class="line"></span><br><span class="line">my_form.submit();</span><br><span class="line">my_form.reset();</span><br></pre></td></tr></table></figure><p>If you need to trigger other events, such as mousedown or keyup, use the following helper function:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function triggerEvent(el, type)&#123;</span><br><span class="line">   if (&apos;createEvent&apos; in document) &#123;</span><br><span class="line">        // modern browsers, IE9+</span><br><span class="line">        var e = document.createEvent(&apos;HTMLEvents&apos;);</span><br><span class="line">        e.initEvent(type, false, true);</span><br><span class="line">        el.dispatchEvent(e);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // IE 8</span><br><span class="line">        var e = document.createEventObject();</span><br><span class="line">        e.eventType = type;</span><br><span class="line">        el.fireEvent(&apos;on&apos;+e.eventType, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Usage example:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var el = document.querySelector(&apos;input[type=&quot;text&quot;]&apos;);</span><br><span class="line">triggerEvent(el, &apos;mousedown&apos;);</span><br></pre></td></tr></table></figure><h3 id="Effects"><a href="#Effects" class="headerlink" title="Effects"></a>Effects</h3><h4 id="Animate-an-element-property"><a href="#Animate-an-element-property" class="headerlink" title="Animate an element property"></a>Animate an element property</h4><p>How to do animations, such as fading, sliding, or just toggling visibility with JS and CSS3.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Animations in JavaScript aren&apos;t difficult to accomplish. As an example, two functions that behave similar to jQuery&apos;s $.fadeIn() and $.fadeOut():</span><br><span class="line"></span><br><span class="line">// fade an element from the current state to full opacity in &quot;duration&quot; ms</span><br><span class="line">function fadeOut(el, duration) &#123;</span><br><span class="line">    var s = el.style, step = 25/(duration || 300);</span><br><span class="line">    s.opacity = s.opacity || 1;</span><br><span class="line">    (function fade() &#123; (s.opacity -= step) &lt; 0 ? s.display = &quot;none&quot; : setTimeout(fade, 25); &#125;)();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// fade out an element from the current state to full transparency in &quot;duration&quot; ms</span><br><span class="line">// display is the display style the element is assigned after the animation is done</span><br><span class="line">function fadeIn(el, duration, display) &#123;</span><br><span class="line">    var s = el.style, step = 25/(duration || 300);</span><br><span class="line">    s.opacity = s.opacity || 0;</span><br><span class="line">    s.display = display || &quot;block&quot;;</span><br><span class="line">    (function fade() &#123; (s.opacity = parseFloat(s.opacity)+step) &gt; 1 ? s.opacity = 1 : setTimeout(fade, 25); &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hide-or-show-an-element"><a href="#Hide-or-show-an-element" class="headerlink" title="Hide or show an element"></a>Hide or show an element</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function hide(el) &#123;</span><br><span class="line">    el.style.display = &apos;none&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function show(el, value) &#123;</span><br><span class="line">    el.style.display = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function toggle(el, value) &#123;</span><br><span class="line">    var display = (window.getComputedStyle ? getComputedStyle(el, null) : el.currentStyle).display;</span><br><span class="line">    if (display == &apos;none&apos;) el.style.display = value;</span><br><span class="line">    else el.style.display = &apos;none&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>toogle() can be used to switch between visible and invisible. If you don’t want to or cannot pass in the target display value manually, it gets more complicated. The following helpers are basically vanilla JavaScript clones of jQuery’s $.show() and $.hide().</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// get the default display style of an element</span><br><span class="line">function defaultDisplay(tag) &#123;</span><br><span class="line">    var iframe = document.createElement(&apos;iframe&apos;);</span><br><span class="line">    iframe.setAttribute(&apos;frameborder&apos;, 0);</span><br><span class="line">    iframe.setAttribute(&apos;width&apos;, 0);</span><br><span class="line">    iframe.setAttribute(&apos;height&apos;, 0);</span><br><span class="line">    document.documentElement.appendChild(iframe);</span><br><span class="line"></span><br><span class="line">    var doc = (iframe.contentWindow || iframe.contentDocument).document;</span><br><span class="line"></span><br><span class="line">    // IE support</span><br><span class="line">    doc.write();</span><br><span class="line">    doc.close();</span><br><span class="line"></span><br><span class="line">    var testEl = doc.createElement(tag);</span><br><span class="line">    doc.documentElement.appendChild(testEl);</span><br><span class="line">    var display = (window.getComputedStyle ? getComputedStyle(testEl, null) : testEl.currentStyle).display</span><br><span class="line">    iframe.parentNode.removeChild(iframe);</span><br><span class="line">    return display;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// actual show/hide function used by show() and hide() below</span><br><span class="line">function showHide(el, show) &#123;</span><br><span class="line">    var value = el.getAttribute(&apos;data-olddisplay&apos;),</span><br><span class="line">    display = el.style.display,</span><br><span class="line">    computedDisplay = (window.getComputedStyle ? getComputedStyle(el, null) : el.currentStyle).display;</span><br><span class="line"></span><br><span class="line">    if (show) &#123;</span><br><span class="line">         if (!value &amp;&amp; display === &apos;none&apos;) el.style.display = &apos;&apos;;</span><br><span class="line">         if (el.style.display === &apos;&apos; &amp;&amp; (computedDisplay === &apos;none&apos;)) value = value || defaultDisplay(el.nodeName);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (display &amp;&amp; display !== &apos;none&apos; || !(computedDisplay == &apos;none&apos;))</span><br><span class="line">            el.setAttribute(&apos;data-olddisplay&apos;, (computedDisplay == &apos;none&apos;) ? display : computedDisplay);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!show || el.style.display === &apos;none&apos; || el.style.display === &apos;&apos;)</span><br><span class="line">        el.style.display = show ? value || &apos;&apos; : &apos;none&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// helper functions</span><br><span class="line">function show(el) &#123; showHide(el, true); &#125;</span><br><span class="line">function hide(el) &#123; showHide(el); &#125;</span><br></pre></td></tr></table></figure><h3 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h3><h4 id="Parsing-a-JSON-string"><a href="#Parsing-a-JSON-string" class="headerlink" title="Parsing a JSON string"></a>Parsing a JSON string</h4><p>Takes a well-formed JSON string and returns the resulting JavaScript value.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var json = &apos;&#123; &quot;foo&quot;: true, &quot;bar&quot;: 1 &#125;&apos;,</span><br><span class="line">    obj = JSON.parse(json);</span><br><span class="line"></span><br><span class="line">console.log(obj);</span><br></pre></td></tr></table></figure><p>Strip leading and trailing white-space from string</p><p>Remove white-space characters from the beginning and end of a string.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  // IE 8</span><br><span class="line">if (!String.prototype.trim) &#123;</span><br><span class="line">    String.prototype.trim = function()&#123; return this.replace(/^\s+|\s+$/g, &apos;&apos;); &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// example</span><br><span class="line">var s = &apos;  Hello World!  &apos;;</span><br><span class="line">s = s.trim();</span><br><span class="line">console.log(s);</span><br><span class="line">// &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure><h4 id="Set-cookie-get-cookie-and-delete-cookie"><a href="#Set-cookie-get-cookie-and-delete-cookie" class="headerlink" title="Set cookie, get cookie and delete cookie"></a>Set cookie, get cookie and delete cookie</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getCookie(name) &#123;</span><br><span class="line">    var v = document.cookie.match(&apos;(^|;) ?&apos; + name + &apos;=([^;]*)(;|$)&apos;);</span><br><span class="line">    return v ? v[2] : null;</span><br><span class="line">&#125;</span><br><span class="line">function setCookie(name, value, days) &#123;</span><br><span class="line">    var d = new Date;</span><br><span class="line">    d.setTime(d.getTime() + 24*60*60*1000*days);</span><br><span class="line">    document.cookie = name + &quot;=&quot; + value + &quot;;path=/;expires=&quot; + d.toGMTString();</span><br><span class="line">&#125;</span><br><span class="line">function deleteCookie(name) &#123; setCookie(name, &apos;&apos;, -1); &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JavaScript-Functions-and-Helpers&quot;&gt;&lt;a href=&quot;#JavaScript-Functions-and-Helpers&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Functions and Helpers&quot;&gt;&lt;/a&gt;JavaScript Functions and Helpers&lt;/h2&gt;&lt;p&gt;Vanilla JS utilities for writing powerful web applications without jQuery.&lt;br&gt;
    
    </summary>
    
    
      <category term="前端 javascript jquery" scheme="https://lirawx.me/tags/%E5%89%8D%E7%AB%AF-javascript-jquery/"/>
    
  </entry>
  
  <entry>
    <title>前端开发，从草根到英雄(总结)</title>
    <link href="https://lirawx.me/2015/web/2016-11-22-learn-js.html"/>
    <id>https://lirawx.me/2015/web/2016-11-22-learn-js.html</id>
    <published>2016-11-22T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章信息："><a href="#文章信息：" class="headerlink" title="文章信息："></a>文章信息：</h2><p>原文：</p><ul><li><a href="https://medium.freecodecamp.com/from-zero-to-front-end-hero-part-1-7d4f7f0bff02#.tk79nj5v4" target="_blank" rel="noopener">zero to front-end hero</a></li><li><a href="https://medium.freecodecamp.com/from-zero-to-front-end-hero-part-2-adfa4824da9b#.whk80zqzt" target="_blank" rel="noopener">From Zero to Front-end Hero (Part 2)</a></li></ul><p>作者：<a href="https://medium.freecodecamp.com/@JonathanZWhite" target="_blank" rel="noopener">@Jonathan Z. White</a></p><p>翻译：</p><ul><li><a href="http://jieniu.me/2016/11/11/zero-hero/" target="_blank" rel="noopener">前端开发，从草根到英雄（第一部分）</a></li><li><a href="http://jieniu.me/2016/11/12/zero-hero-2/" target="_blank" rel="noopener">前端开发，从草根到英雄（第二部分）</a></li></ul><p>译者：<a href="http://jieniu.me/" target="_blank" rel="noopener">jieniu</a></p><a id="more"></a><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="HTML-CSS基础练习"><a href="#HTML-CSS基础练习" class="headerlink" title="HTML CSS基础练习"></a>HTML CSS基础练习</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li><a href="http://codepen.io/" target="_blank" rel="noopener">CodePen</a></li><li><a href="https://dribbble.com/" target="_blank" rel="noopener">Dribbble</a></li></ul><p>练习使用html，css，包裹google字体的api和google字体的css技巧，当然还有排版。要将注意力放在html，css在一起时如何工作的。然后再dribble这个网站上寻找灵感，在codepen上编写代码。</p><h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><ul><li>语义标记</li><li>css命名约定</li><li>css重置</li><li>跨浏览器支持</li><li>css预处理器和后处理器</li><li>网格系统和响应式</li></ul><p>最后要保持更新，从一个又一个例子中学习。</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h4><h5 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h5><ul><li>语法和类型</li><li>控制流河错误处理</li><li>循环和遍历</li><li>函数</li></ul><h5 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h5><p>文档对象模型（DOM）</p><ul><li>什么是DOM？</li><li>如何查询元素？</li><li>如何添加事件监听者？</li><li>如何合适的改变DOM节点属性？</li></ul><h5 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h5><p>调试JavaScript</p><h4 id="进阶知识"><a href="#进阶知识" class="headerlink" title="进阶知识"></a>进阶知识</h4><h5 id="语言-1"><a href="#语言-1" class="headerlink" title="语言"></a>语言</h5><ul><li>强化原型</li><li>作用域</li><li>闭包</li><li>事件循环</li><li>事件通知</li><li>请求、调用和绑定</li><li>回调和承诺</li><li>变量及函数挂起</li><li>Currying</li></ul><h5 id="Imperative-vs-Declarative"><a href="#Imperative-vs-Declarative" class="headerlink" title="Imperative vs. Declarative"></a>Imperative vs. Declarative</h5><p>JavaScript和DOM如何交互，有两种方法：imperative和declarative，一方面，declarative程序专注于what，另一方面，imperative程序专注于how。<br>Jquery是imperative方法，然后才是Angular和React库declarative方法</p><h5 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h5><p>新的浏览器请求标准是Fetch</p><h5 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h5><p>jQuery不是唯一的imperative DOM操作解决方案，PlainJS和You Might Not Need jQuery是两个很好的资源，他们会告诉你和jQuery一样的频繁使用的JavaScript函数。</p><h5 id="ES5-vs-ES6"><a href="#ES5-vs-ES6" class="headerlink" title="ES5 vs. ES6"></a>ES5 vs. ES6</h5><p>有必要知道你今天看到的应用，要么使用ES5，要么使用ES6。ES5，ES6，ES2016，ES.Next: JavaScript版本到底怎么了和Dan Wahlins的ES6入门——下一代JavaScript是很好的ES6介绍。接着你可以在ES6功能列表查看ES5到ES6的变化。如果你还想了解更多，去Github代码库获得更多ES6功能信息。</p><h5 id="JavaScript框架"><a href="#JavaScript框架" class="headerlink" title="JavaScript框架"></a>JavaScript框架</h5><p>Angular，React + Flux，Ember，Aurelia，Vue，和Meteor。你不需要学习所有的框架，选一个学习即可，不要追赶框架的潮流，取而代之的是，你需要理解框架程序底下的原则和哲学。</p><h5 id="架构模型"><a href="#架构模型" class="headerlink" title="架构模型"></a>架构模型</h5><p>MVC MVVM</p><p>与其让HTML保留应用状态，还不如用一个JavaScript对象——通常被称为Model——来存储状态。</p><h5 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h5><ul><li>装饰者模式</li><li>工厂模式</li><li>单件模式</li><li>Revealing module</li><li>外观模式</li><li>观察者模式</li></ul><h5 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h5><p>AngularJS是一个JavaScript MVC框架，有时也是一个MVVM框架，它由google维护，并在2010年初次发布时给JavaScript社区带来了一场风暴</p><h5 id="React-Flux"><a href="#React-Flux" class="headerlink" title="React + Flux"></a>React + Flux</h5><p>Angular很好解决了程序员在构建复杂系统时所面对的问题，另一个流行的工具是React，它是一个创建用户接口的库，你可以把它想象成MVC中的V。由于React只是一个库，所以它会经常伴随着一个框架Flux</p><h5 id="风格指南"><a href="#风格指南" class="headerlink" title="风格指南"></a>风格指南</h5><p>JavaScript风格指南是一组代码规范，它会帮助你设计具有可读性和可维护性高的代码。</p><ul><li>AirBnB的编码规范</li><li>常用的JavaScript原则</li><li>Node编码规范</li><li>MDN编码规范</li></ul><h5 id="编码基础"><a href="#编码基础" class="headerlink" title="编码基础"></a>编码基础</h5><p>我已经无法形容读好代码给我带来的帮助到底有多大，一旦当你想读新的好代码时，可以上Github上找</p><ul><li>Lodash</li><li>Underscore</li><li>Babel</li><li>Ghost</li><li>NodeBB</li><li>KeystoneJS</li></ul><hr><p>许多时候，人在做，天在看。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文章信息：&quot;&gt;&lt;a href=&quot;#文章信息：&quot; class=&quot;headerlink&quot; title=&quot;文章信息：&quot;&gt;&lt;/a&gt;文章信息：&lt;/h2&gt;&lt;p&gt;原文：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.com/from-zero-to-front-end-hero-part-1-7d4f7f0bff02#.tk79nj5v4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zero to front-end hero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.com/from-zero-to-front-end-hero-part-2-adfa4824da9b#.whk80zqzt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;From Zero to Front-end Hero (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://medium.freecodecamp.com/@JonathanZWhite&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@Jonathan Z. White&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;翻译：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jieniu.me/2016/11/11/zero-hero/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前端开发，从草根到英雄（第一部分）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jieniu.me/2016/11/12/zero-hero-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前端开发，从草根到英雄（第二部分）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;译者：&lt;a href=&quot;http://jieniu.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jieniu&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端 javascript css html" scheme="https://lirawx.me/tags/%E5%89%8D%E7%AB%AF-javascript-css-html/"/>
    
  </entry>
  
  <entry>
    <title>一个人，一座城</title>
    <link href="https://lirawx.me/2015/2016-06-24-one-men-one-city.html"/>
    <id>https://lirawx.me/2015/2016-06-24-one-men-one-city.html</id>
    <published>2016-06-24T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>每个人心里都有一座城，一个人，不曾走远，不敢走近，<a id="more"></a>只是因为那里有一段刻骨铭心的记忆，无法触碰，满是伤怀，每每想起。寂寞有时，伤心有时，哭泣有时，大笑有时。不经意的一个字眼跳出来，使我想起你，一想想个不停，然而伊人已不在身旁，唯有用记忆去填补你的空缺。如果，我说如果，我再见到你，我们之间第一句话会说什么呢，是原来你还在这，还是我过得很好你呢，还是低头不语，转身离开。我想我会说，我一直很想你。<br>斯人已往，话语的界限早已被阻隔在心房外，就算是一墙之隔，也是千山万里远了。最近我很帅，你知道吗，我晚上睡得很早，早上起的很准时。你还是一样的赖床吗，你是否还依然保留着你唯一的爱好，睡觉呢。我过得很好，每天看看书，上上网，听听歌，一切都很完美，只是怀里少了一个你，有点冷，不用担心，我很好，也祝福你过得很好，真心的祝你遇见至少知冷暖的，冷的时候要抱着你，下雨的时候也要抱着你，你要走的时候也要抱抱你。每天要跟你说很多的情话，我已经不能在你身边了，也不能赴约陪你在草地上看白云变换成你的样子了。<br>谢谢你了，陪我走了那么远，教会了我那么多，原来爱一个人是这样的。再见了，不，永别好了。(●’◡’●)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个人心里都有一座城，一个人，不曾走远，不敢走近，
    
    </summary>
    
    
      <category term="一个人" scheme="https://lirawx.me/tags/%E4%B8%80%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>一生只爱一个人</title>
    <link href="https://lirawx.me/2015/2016-05-27-one-life-one-lover.html"/>
    <id>https://lirawx.me/2015/2016-05-27-one-life-one-lover.html</id>
    <published>2016-05-27T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>对不起，还是没能忘掉你，<a id="more"></a>尝试了很多次，我以为我能忘，结果却越是忘不掉，我很没用。今夜又是一个这样的夜晚，我想了好多我们一起看电影，一起吃饭，一起压马路，一起在那个长亭，一起看星星，无数个画面都历历在目，叫我如何忘，我努力不去打扰你，希望你过得比我好，最好遇到一个不会冷落你，不会跟你生气的人。听说忘记一个人最好的方法是谈另一场恋爱，找一个人代替你的位置，朋友也给我介绍过一两个，然而每次我和她们聊，总想到你，想到你，我就觉得这样不对，她们怎么可以就这样轻易的抹去你在我心里的痕迹，越这样想，泪越止不住的流。今生今世再也见不到你，人生没有丝毫意义。曾经纵酒长醉，曾经深夜难眠，一切都随着你的离去而暗淡。这一生只爱过你一个，泪只为你流。原谅我作为一个男人，这样的拖泥带水，这样的烦人，可是爱一个人有错么，我只是想想一个男人一样对自己所爱的人说一句:我爱你。我幼稚也罢，我不要脸也罢，我混蛋也罢，可是我觉得我也是人，何况是个男人，我这些话不对自己爱的女人说，又能对谁说，也许我的木讷，冷漠，让你没有感受到我的心意，甚至让你丧失了耐心，放弃了我，我不怪你，我恨我自己的懦弱当时为什么没有像个男人一样飞过去抱住你在你耳边说我多么爱你。此生有缘无分，愿来世能再遇见你，我死都不放开你的手。</p><p>########2016年5月27日00:22</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对不起，还是没能忘掉你，
    
    </summary>
    
    
      <category term="静静" scheme="https://lirawx.me/tags/%E9%9D%99%E9%9D%99/"/>
    
  </entry>
  
  <entry>
    <title>网易云翻读电台（自用推荐）</title>
    <link href="https://lirawx.me/2015/2016-05-22-netmusic-radio.html"/>
    <id>https://lirawx.me/2015/2016-05-22-netmusic-radio.html</id>
    <published>2016-05-22T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>   推荐一个电台，名字很是诗意，叫月半明时，<a id="more"></a>主播是<a href="http://music.163.com/#/user/home?id=123206834" target="_blank" rel="noopener">天阶TJ</a>，最新一期是<a href="http://music.163.com/#/program?id=787443760" target="_blank" rel="noopener">春色年年</a>。</p><p>   初次听时只觉得主播声音很好听，昨天无意间打开了网易云音乐，听了不一会，我慢慢被代入了这样诗意的情景，少年离乡，几十年官场浮沉，当少年不再。。。。（zZZZZZ）剩下的我就不知道了，等我醒了已经天黑了。挺对不起这个主播的，催眠曲了被我当成。但是听她的电台翻读，真的有一种令人心安的力量，无论是声线也好还是翻读的内容选材上也好，都恰倒好处。以下是最新一期的原文：</p><blockquote><p>   少年背着行囊出城时，正下着细细密密的雨。走过了城外的石桥，走过了石桥边的小茶棚，再回头时，城门上青灰色的“扬州”二 字已经被雨雾隔了很远，模模糊糊，就像时光流走时的模样。他握着伞柄的手紧了紧，转身走向了春草绵延的远方。</p></blockquote><blockquote><p>  辗转十数年，南唐开国。少年也不再是少年，他入了京都，风华正茂一身才艺，被国君几番青眼，而后出仕入相。然而，在那个风雨飘摇的年代，世事无常几乎刻进了每一寸光阴里。朝堂中的党派之争，强国环峙的天下格局，无一不在动摇着南唐的根基。</p></blockquote><blockquote><p>长久地在官场沉浮，两次出任宰相，几起几落，已知天命的他早已经见惯春秋。年年烟雨，却依旧忍不住贪恋，低声询问白驹过隙的岁月：年年春光，不知这样的燕子，这样的亭台，会年年都有吗？</p></blockquote><blockquote><p>最后的两年，他被罢去宰相的官职。日日花前常病酒，不辞镜里朱颜瘦。听着屋檐下落花的声音，从前的闲愁却不在了。后来终于又起了迷蒙雨雾，还是少年时候的那座扬州城，还是那座风波桥，他拄着杖藜远远地望着，白鹤飞向了江天一线处，垂髫孩童的纸鸢仍在流云那端。</p></blockquote><blockquote><p>他去世当年，赵匡胤黄袍加身。又十五年，北宋灭唐，而后吴越王入开封，五代十国彻底退出历史舞台。</p></blockquote><blockquote><p>他是南唐词人冯延巳，字正中，笔下多闲情逸致，王国维先生曾赞其“虽不失五代风格，而堂庑特大，开北宋一代风气。”</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   推荐一个电台，名字很是诗意，叫月半明时，
    
    </summary>
    
    
      <category term="春色年年" scheme="https://lirawx.me/tags/%E6%98%A5%E8%89%B2%E5%B9%B4%E5%B9%B4/"/>
    
  </entry>
  
  <entry>
    <title>再也不回头</title>
    <link href="https://lirawx.me/2015/2016-05-04-20160504.html"/>
    <id>https://lirawx.me/2015/2016-05-04-20160504.html</id>
    <published>2016-05-04T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>262</p><blockquote><p>我与你曾经只有0.1cm的距离，而现在我们却隔了12219步，我向你走了12218步，最后一步我抬起又落下，然后，转身，再也不回头。</p></blockquote><p>150816160504</p><h5 id="2016-05-04"><a href="#2016-05-04" class="headerlink" title="2016-05-04"></a>2016-05-04</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;262&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我与你曾经只有0.1cm的距离，而现在我们却隔了12219步，我向你走了12218步，最后一步我抬起又落下，然后，转身，再也不回头。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;150816160504&lt;/p&gt;
&lt;h5 id=&quot;
      
    
    </summary>
    
    
      <category term="再也不回头" scheme="https://lirawx.me/tags/%E5%86%8D%E4%B9%9F%E4%B8%8D%E5%9B%9E%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>初爱</title>
    <link href="https://lirawx.me/2015/2016-04-20-20160420.html"/>
    <id>https://lirawx.me/2015/2016-04-20-20160420.html</id>
    <published>2016-04-20T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>阶前初见，也似重逢。<br>  粉罗裙，青丝绾，<br>  眉眼情浓，<br>  羞脸粉红生。<br>  长街长，短亭短，<br>  细语呢哝娇做嗔，<br>  膝枕春风稍歇。<br>  梦呓酒醒空屏，<br>  飞雨沾湿罗衣。</p></blockquote><p>#####2016-04-20</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;阶前初见，也似重逢。&lt;br&gt;  粉罗裙，青丝绾，&lt;br&gt;  眉眼情浓，&lt;br&gt;  羞脸粉红生。&lt;br&gt;  长街长，短亭短，&lt;br&gt;  细语呢哝娇做嗔，&lt;br&gt;  膝枕春风稍歇。&lt;br&gt;  梦呓酒醒空屏，&lt;br&gt;  飞雨沾湿罗衣。&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
    
      <category term="初见" scheme="https://lirawx.me/tags/%E5%88%9D%E8%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>恨</title>
    <link href="https://lirawx.me/2015/2016-03-27-20160327.html"/>
    <id>https://lirawx.me/2015/2016-03-27-20160327.html</id>
    <published>2016-03-27T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>偏也爱风尘，<br>  总是负前缘，<br>  秋去春来有时尽，<br>  此恨无绝期。<br>  去年阶前雨，<br>  风吹了无痕，<br>  却是旧杨发新芽，<br>  一枝一叶总关情。</p></blockquote><p>#####2016-03-27</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;偏也爱风尘，&lt;br&gt;  总是负前缘，&lt;br&gt;  秋去春来有时尽，&lt;br&gt;  此恨无绝期。&lt;br&gt;  去年阶前雨，&lt;br&gt;  风吹了无痕，&lt;br&gt;  却是旧杨发新芽，&lt;br&gt;  一枝一叶总关情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#####2
      
    
    </summary>
    
    
      <category term="恨" scheme="https://lirawx.me/tags/%E6%81%A8/"/>
    
  </entry>
  
  <entry>
    <title>关山月</title>
    <link href="https://lirawx.me/2015/2016-03-13-20160313.html"/>
    <id>https://lirawx.me/2015/2016-03-13-20160313.html</id>
    <published>2016-03-13T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>去年此门中，<br>  庭榭旧时，<br>  春光三月老，<br>  人面何处？<br>  一时蝶儿舞，<br>  尽付深情，<br>  挽袖荷花香，<br>  半塘婷婷，<br>  信步闲庭晚，<br>  鸣婵炎炎，<br>  将心与你心，<br>  盈盈笑语，<br>  几多情许卿？<br>  怎堪回首，<br>  别时敬亭山，<br> 《关山月》同。</p></blockquote><p>#####2016-03-13</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;去年此门中，&lt;br&gt;  庭榭旧时，&lt;br&gt;  春光三月老，&lt;br&gt;  人面何处？&lt;br&gt;  一时蝶儿舞，&lt;br&gt;  尽付深情，&lt;br&gt;  挽袖荷花香，&lt;br&gt;  半塘婷婷，&lt;br&gt;  信步闲庭晚，&lt;br&gt;  鸣婵炎炎，&lt;br&gt;  将心与你心，&lt;br
      
    
    </summary>
    
    
      <category term="关山月" scheme="https://lirawx.me/tags/%E5%85%B3%E5%B1%B1%E6%9C%88/"/>
    
  </entry>
  
  <entry>
    <title>我的2016</title>
    <link href="https://lirawx.me/2015/2016-02-07-20160207.html"/>
    <id>https://lirawx.me/2015/2016-02-07-20160207.html</id>
    <published>2016-02-07T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2016，一切都是最好的安排。</p></blockquote><p>#####2016-02-07</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;2016，一切都是最好的安排。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#####2016-02-07&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="2016" scheme="https://lirawx.me/tags/2016/"/>
    
  </entry>
  
  <entry>
    <title>雪中歌</title>
    <link href="https://lirawx.me/2015/2016-01-14-20160114.html"/>
    <id>https://lirawx.me/2015/2016-01-14-20160114.html</id>
    <published>2016-01-14T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>雪一场，梦呓回，听歌几时，欲听还休，欲听还休，再从头，列表循环，又一年，<br>人在，情在，有歌有诗，有美酒，一切都是最好的安排。</p></blockquote><p>#####2016-01-14</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;雪一场，梦呓回，听歌几时，欲听还休，欲听还休，再从头，列表循环，又一年，&lt;br&gt;人在，情在，有歌有诗，有美酒，一切都是最好的安排。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#####2016-01-14&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="雪中歌" scheme="https://lirawx.me/tags/%E9%9B%AA%E4%B8%AD%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>陌路末路</title>
    <link href="https://lirawx.me/2015/2015-11-17-20151117.html"/>
    <id>https://lirawx.me/2015/2015-11-17-20151117.html</id>
    <published>2015-11-17T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今夕今惜，陌路末路，遗忘已枉，末世漠视，一时一世。</p></blockquote><p>.</p><p>#####2015-11-17</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今夕今惜，陌路末路，遗忘已枉，末世漠视，一时一世。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;#####2015-11-17&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="陌路末路" scheme="https://lirawx.me/tags/%E9%99%8C%E8%B7%AF%E6%9C%AB%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>对未来的思考</title>
    <link href="https://lirawx.me/2015/2015-10-25-future.html"/>
    <id>https://lirawx.me/2015/2015-10-25-future.html</id>
    <published>2015-10-25T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>怪我多喝一包咖啡，到现在都没有睡着，想了很多，很少有这时候独自思考这么多了，或许不曾孤独如此良久。我再想以后我到底会怎么样，有什么爱好，有什么工作，又怎么样过好自己的生活，说不定单身一直，也说不定已经携伊人的手了。<a id="more"></a>仔细的回想了以前的以前，久到小学可能，一直喜欢笛子啊，之类的，特别中意武侠，手持一支笛子，背负一把长剑，帅气。可能是自己身为中国人深深的继承了中国古老的传统也不一定。或许我以后应该学着吹下笛子，小时候直到现在都不知道自己喜欢什么，会做什么，很多都是凭感觉，觉得挺好就挺好，太过随意了现在觉得。太过飘忽不定，我觉得起码现在我应该要确定以及肯定一下自己以后的发展道路了。<br>或许是分手之后长长的空虚寂寞区间，让我也反思了许多。身在21世纪，我却许多次想摆脱这个浮华的世纪带快我的脚步，拒绝微信，拒绝qq，拒绝淘宝之类过激的举动，现在一一妥协，慢慢融入自己的生活，当然问题当然不是变与不变，与加速度一样，身在这个社会怎么可能逃过物理法则。我想说的是这些过快的浮华和过多的诱惑导致我如今不知道该如何是好，一路走来，磕磕绊绊，迷雾重重，会掩盖本来的面目。想来我已经谈了三次主要的恋爱，第一次记住了一个名字，第二次记住了一个qq号，第三次记住了一个电话号码，三次都不能释怀，三次让我也成长了不少。曾经看过读者，记得有一篇文章写，幸福需要等，不要急着去寻找。三次我都以为是上天给我的暗示，我成功的把握住了，期间我也体会到了什么事爱，爱一个人的感觉无论隔着多远，多久，心总是充满热量，激动愉悦，面对所爱的人，那一刻你觉得世界那么美好，美好到今生只为遇见你。然而第二个女友问我：当激情褪去，你还会爱她么？我竟然无言以对，或许只是头脑里激素的一阵悸动，分泌失调。我这样逃避自己和她。我意识到自己善变到了精神都不正常的地步，经常强迫自己还有别人跟自己头脑里的印象重合，每个人都必须和自己投影是一致的，不一致要修正，感觉自己就是上帝一样，谁都是有罪的，都必须向自己赎罪。所以我要告诉自己要保持谦卑，要保持好奇心，要懂得尊敬，要保持希望，要永远乐观，还要一直学习新的东西，最后最重要的要坚持下去。<br>我觉得父母给我最好的教育就是没有限制我的可能性，我也表现的很懂事，当然现在远在家外，我也很少联系他们，但是我知道我是爱他们的，家庭给我最大的最好的就是要读书，我一直保持着对读书的渴望，不读书总会有一种莫名的愧疚感。我觉得这一生都无法改变这一习惯。这一切都来自我的家庭教育。上高中之前可以说是为父母他们读书，那么上大学必须要为自己读书了，大一我确定是为自己读书，尝试了很多不同的东西，然而还是被自己的原则全都否决了，退掉所有社团，推掉所有的责任，一个人独自的玩耍，导致大二被大学上了一年。大三我觉得我要吧大学上一遍才行。<br>我想了想自己的计划，我想看书时必要的，其次还得练字，行书吧，楷书已经不适合我了。保留自己文艺气息，保持自己的审美。大学毕业不要马上工作，我想去外面走走，见见除开景区以外的世界。比如台湾，比如苏州，比如日本。可以打工换食宿在国内，其他的就只能攒钱了。我想以后要开一家不一样的书店，可以加上现代的科技，互联网之类的元素。先想到这里吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;怪我多喝一包咖啡，到现在都没有睡着，想了很多，很少有这时候独自思考这么多了，或许不曾孤独如此良久。我再想以后我到底会怎么样，有什么爱好，有什么工作，又怎么样过好自己的生活，说不定单身一直，也说不定已经携伊人的手了。
    
    </summary>
    
    
      <category term="想想" scheme="https://lirawx.me/tags/%E6%83%B3%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>谁说的青春无悔</title>
    <link href="https://lirawx.me/2015/2015-10-20-diary.html"/>
    <id>https://lirawx.me/2015/2015-10-20-diary.html</id>
    <published>2015-10-20T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>谁说的青春无悔，我怎么天天都在回望昨日一往情深，不懂什么是爱，现在已经麻木了，何人还爱，何人敢爱，又有谁来爱我。口口声声不悔不回头，渐渐的丢失了底线，<a id="more"></a>然而周围已经没有了可以将心托付的人了，以前可能还有，暧昧多于友谊，然而只能是友谊，不懂为什么她答应又拒绝，或许她比我懂得多，那时我竟然不懂，不明白，原因，太多话没有说明，太多情没有诉尽，太多人还不了债。想来这便是人生？我不懂，我也不知道我怎么去选择，我想让时间划过，但我又想阻延时间，却抓不住，时间在风中溜走。或许我便是矛盾的一生，我期待一个英雄驾着云彩，携我出周身荆棘缠绕，世界一片光明。</p><h5 id="2015-10-20"><a href="#2015-10-20" class="headerlink" title="2015-10-20"></a>2015-10-20</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;谁说的青春无悔，我怎么天天都在回望昨日一往情深，不懂什么是爱，现在已经麻木了，何人还爱，何人敢爱，又有谁来爱我。口口声声不悔不回头，渐渐的丢失了底线，
    
    </summary>
    
    
      <category term="想想" scheme="https://lirawx.me/tags/%E6%83%B3%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>江上有感</title>
    <link href="https://lirawx.me/2015/2015-10-15-20151015.html"/>
    <id>https://lirawx.me/2015/2015-10-15-20151015.html</id>
    <published>2015-10-15T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>江岸郎情，前朝栏杆，不能拍，河堤妾意，妖娆柳腰，不堪抚，<br>余辉仍在，故人已远，不曾想，晚风轻抚，多情离别，不甚伤。</p></blockquote><p>#####2015-10-15</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;江岸郎情，前朝栏杆，不能拍，河堤妾意，妖娆柳腰，不堪抚，&lt;br&gt;余辉仍在，故人已远，不曾想，晚风轻抚，多情离别，不甚伤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#####2015-10-15&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="江上有感" scheme="https://lirawx.me/tags/%E6%B1%9F%E4%B8%8A%E6%9C%89%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>生活，需要一些仪式感</title>
    <link href="https://lirawx.me/2015/2015-09-24-life-need-ceremony.html"/>
    <id>https://lirawx.me/2015/2015-09-24-life-need-ceremony.html</id>
    <published>2015-09-24T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>最近读了一篇文章，题目是<a href="http://mp.weixin.qq.com/s?__biz=MjM5MTAzNDQ4MA==&amp;mid=209447537&amp;idx=1&amp;sn=560ce94e71b7c2b37efd3f4817986bcd&amp;scene=0#rd" target="_blank" rel="noopener">生活，需要一些仪式感</a>我引用一下特有感觉的话：</p><a id="more"></a><p>我向来觉得生活是需要一些仪式感的，这跟矫情无关，而是关于你对生活的热爱，对幸福的敏感，乃至有时候它是一种结束，也是一种开始。</p><p>今天的中国人的生活方式似乎少了一些情趣，生活节奏越来越匆忙，生命中越来越缺乏仪式感，而没有仪式感，人生就不庄严，心就不安静。</p><p>人人都爱蒂凡尼的早餐，可是却鲜少有人扭头看看自己在生活里，仪式感有多么匮乏。</p><p>我仔细的将这些句子在口舌咽喉之间来回可以说是像牛一样反刍，一字一句，我虔诚的像基督徒一样，我认为之前我有罪，没有一丝一毫的仪式感，感到空虚，之前的生活突然觉得没有任何意义，我感到莫大的罪孽，我深深的忏悔，我告诫我自己，要给自己一点点的仪式感，如同刷牙洗脸一样将仪式终身进行下去。</p><p>我重拾咖啡，将咖啡放入马克杯，再倒入沸水，一切都是那样的充满敬意，神圣无犯，我知道，这是一种仪式，未来我每天都要进行的仪式。我的心在陶瓷勺搅拌之中随着咖啡粉末融化了，那一刻我从心底里觉得我得到了救赎。像极了肖生克越狱成功后的喜悦。</p><p>我不能劝导所有人都要喝咖啡，或者喝茶。我想说的是我同意作者的看法，我遵循仪式，我保持我对仪式的虔诚，坚定我的信仰，我以此来慰借我的罪恶灵魂，一杯咖啡喝完，世间那么的美好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近读了一篇文章，题目是&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MTAzNDQ4MA==&amp;amp;mid=209447537&amp;amp;idx=1&amp;amp;sn=560ce94e71b7c2b37efd3f4817986bcd&amp;amp;scene=0#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;生活，需要一些仪式感&lt;/a&gt;我引用一下特有感觉的话：&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="https://lirawx.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>mac下zsh的安装</title>
    <link href="https://lirawx.me/2015/2015-09-22-mac-zsh.html"/>
    <id>https://lirawx.me/2015/2015-09-22-mac-zsh.html</id>
    <published>2015-09-22T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>mac下zsh的安装</p><p>下载oh-my-zsh</p><p>1) 直接用git从github上面下载包：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure></p> <a id="more"></a><p>2) 备份已有的zshrc(一般不需要)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp ~/.zshrc ~/.zshrc.orig</span><br></pre></td></tr></table></figure><p>3) 替换zshrc</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><p>将bash切换为zsh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>其实还可以用which来定位（特别是ubuntu的童鞋）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chsh -s `which zsh`</span><br></pre></td></tr></table></figure><p>直接用zsh会很蛋疼，因为zsh功能很强大但是太复杂，所以需要oh-my-zsh来将它简单化。如果要切换回去：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mac下zsh的安装&lt;/p&gt;
&lt;p&gt;下载oh-my-zsh&lt;/p&gt;
&lt;p&gt;1) 直接用git从github上面下载包：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mac" scheme="https://lirawx.me/categories/mac/"/>
    
    
      <category term="zsh" scheme="https://lirawx.me/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>inui n1</title>
    <link href="https://lirawx.me/2015/2015-09-17-iuni-n1.html"/>
    <id>https://lirawx.me/2015/2015-09-17-iuni-n1.html</id>
    <published>2015-09-17T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>一次冲动是必然，两次冲动就是命运了。第一次u2出来我就看中它了，系统也好，手机也好，深深的符合我的审美，与个性。现在，n1第四代深深的震撼了我，怎么可以这么美，<a id="more"></a> 美到窒息，犹豫再三还是下单买下它。不论多少人黑它黑这个品牌，有些事是不会改变，就是人从心底发出的爱。我爱这个品牌，以及这个品牌i am unique的寓意。这也反过来印证了我是个文艺2b青年，全民自黑的时代，文艺青年也是自黑的意思，而我并没有这点想法，我深深的引以为傲自己在这个浮华冷峻的社会还能保持自己的文艺也好，2b也好.我觉得inui n1是前世的情人一般，第一眼便已经定情，此生无怨无悔的爱上它。今天是它到达的日子，我就像等待新娘到来一般的，焦躁，急促，早早的准备好它到来的app，甚至是想好了为它留的席位。<br>而当它到来的时候，我彻底的惊艳了，不负我深爱一场，各种功能简约，纯净，不浮夸，精致而美好，作为新郎的我，沾沾自喜，向别人夸耀内人的贤惠，聪颖，我视它为掌上明珠，捧着它都会笑出声来，感谢今生让我遇见你—-iuni n1。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一次冲动是必然，两次冲动就是命运了。第一次u2出来我就看中它了，系统也好，手机也好，深深的符合我的审美，与个性。现在，n1第四代深深的震撼了我，怎么可以这么美，
    
    </summary>
    
    
      <category term="想想" scheme="https://lirawx.me/tags/%E6%83%B3%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>真的爱你（李嘉琪、张惠春）</title>
    <link href="https://lirawx.me/2015/2015-09-13-zhen-de-ai-ni.html"/>
    <id>https://lirawx.me/2015/2015-09-13-zhen-de-ai-ni.html</id>
    <published>2015-09-13T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://y.qq.com/#type=song&amp;id=103755846" target="_blank" rel="noopener">试听链接</a></p><p>词：梁美薇,刘卓辉<br>曲：黄家驹</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> 李：无法可修饰的一对手</span><br><span class="line">带出温暖永远在背后</span><br><span class="line"></span><br><span class="line">纵使啰嗦始终关注</span><br><span class="line">不懂珍惜太内疚</span><br><span class="line"></span><br><span class="line">张：一个人在创痛的时候</span><br><span class="line">按着难以痊愈的伤口</span><br><span class="line"></span><br><span class="line">究竟应该拼命奋斗</span><br><span class="line">还是默默地溜走</span><br><span class="line">只有你会理解我的忧</span><br><span class="line">让我紧紧握住你的手</span><br><span class="line"></span><br><span class="line">李：是你多么温馨的目光</span><br><span class="line">教我坚毅望着前路</span><br><span class="line">叮嘱我跌倒不应放弃</span><br><span class="line"></span><br><span class="line">没法解释怎可报尽亲恩</span><br><span class="line"></span><br><span class="line">爱意宽大是无限</span><br><span class="line"></span><br><span class="line">请准我说声真的爱你</span><br><span class="line"></span><br><span class="line">张：一个人在孤独的时候</span><br><span class="line">走到人群拥挤的街头</span><br><span class="line">是在抗议过分自由</span><br><span class="line">还是荒谬的地球</span><br><span class="line">李：仍记起温馨的一对手</span><br><span class="line"></span><br><span class="line">始终给我照顾未变样</span><br><span class="line"></span><br><span class="line">理想今天终于等到</span><br><span class="line">分享光辉盼做到</span><br><span class="line">合：春风化雨暖透我的心</span><br><span class="line">一生眷顾无言地送赠</span><br><span class="line">张：我们曾经一样地流浪</span><br><span class="line"></span><br><span class="line">一样幻想美好时光</span><br><span class="line">合：一样的感到流水年长</span><br><span class="line"></span><br><span class="line">张：我们虽然不在同一个地方</span><br><span class="line"></span><br><span class="line">没有相同的主张</span><br><span class="line">合：可是你知道我的迷惘</span><br><span class="line"></span><br><span class="line">李：Amani nakupenda nakupenda we we</span><br><span class="line"></span><br><span class="line">张：Amani nakupenda nakupenda we we</span><br><span class="line">合：就让我们一起</span><br><span class="line">李：Amani nakupenda nakupenda we we</span><br><span class="line"></span><br><span class="line">张：Amani nakupenda nakupenda we we</span><br><span class="line">合：对全世界呐喊</span><br><span class="line">Amani nakupenda nakupenda we we</span><br><span class="line"></span><br><span class="line">Amani nakupenda nakupenda we we</span><br><span class="line">李：Amani nakupenda nakupenda we we</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://y.qq.com/#type=song&amp;amp;id=103755846&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;试听链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;词：梁美薇,刘卓辉&lt;br&gt;曲：黄家驹&lt;/p&gt;
    
    </summary>
    
    
      <category term="李嘉琪" scheme="https://lirawx.me/tags/%E6%9D%8E%E5%98%89%E7%90%AA/"/>
    
  </entry>
  
  <entry>
    <title>新的心跳 - G.E.M. 邓紫棋</title>
    <link href="https://lirawx.me/2015/2015-09-13-xin-tiao.html"/>
    <id>https://lirawx.me/2015/2015-09-13-xin-tiao.html</id>
    <published>2015-09-13T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://y.qq.com/#type=song&amp;id=102822120" target="_blank" rel="noopener">试听链接</a></p><p>(真人秀《极速前进 第二季》主题曲)<br>词：G.E.M. 邓紫棋<br>曲：G.E.M. 邓紫棋 </p><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">也许 你看过太多悲剧 </span><br><span class="line">也受过太多委屈 </span><br><span class="line">你怕不愿回首的过去 </span><br><span class="line">会一直延续 </span><br><span class="line">但生命 够曲折才够真实 </span><br><span class="line">人痛过才够坚持 </span><br><span class="line">而故事 还没有走到结局 </span><br><span class="line">就让我们 忘了过去有多悲伤 </span><br><span class="line">打开受伤的翅膀 </span><br><span class="line">来为自己戴上 掉下的皇冠 </span><br><span class="line">无论世界有多疯狂 </span><br><span class="line">我们是浴火的凤凰 </span><br><span class="line">经过了燃烧 有新的心跳 </span><br><span class="line">新的心跳 新的心跳 新的心跳 </span><br><span class="line">爱是 受伤过才够轰烈 </span><br><span class="line">牺牲过才够真切 </span><br><span class="line">而且 时间还未停歇 </span><br><span class="line">就让我们 忘了过去有多悲伤 </span><br><span class="line">打开受伤的翅膀 </span><br><span class="line">来为自己戴上 掉下的皇冠 </span><br><span class="line">无论世界有多疯狂 </span><br><span class="line">我们是浴火的凤凰 </span><br><span class="line">经过了燃烧 有新的心跳 </span><br><span class="line">有新的心跳 </span><br><span class="line">有新的心跳 </span><br><span class="line">有新的心跳 </span><br><span class="line">就用微笑哀悼 死去是复活的先兆 </span><br><span class="line">听未来的呼召 埋葬忧伤痛苦的煎熬 </span><br><span class="line">旧事再不重要 一切已经来到 </span><br><span class="line">永远的句号 </span><br><span class="line">我们死而复活 </span><br><span class="line">我们失而复得 </span><br><span class="line">旧事已过 都变成新的 </span><br><span class="line">新的心跳 新的心跳 新的心跳 </span><br><span class="line">新的心跳 新的心跳 新的心跳 </span><br><span class="line">新的心跳 新的心跳 新的心跳</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://y.qq.com/#type=song&amp;amp;id=102822120&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;试听链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(真人秀《极速前进 第二季》主题曲)&lt;br&gt;词：G.E.M. 邓紫棋&lt;br&gt;曲：G.E.M. 邓紫棋 &lt;/p&gt;
    
    </summary>
    
    
      <category term="G.E.M.邓紫棋" scheme="https://lirawx.me/tags/G-E-M-%E9%82%93%E7%B4%AB%E6%A3%8B/"/>
    
  </entry>
  
  <entry>
    <title>反思（1）</title>
    <link href="https://lirawx.me/2015/2015-09-13-lunhua.html"/>
    <id>https://lirawx.me/2015/2015-09-13-lunhua.html</id>
    <published>2015-09-13T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>今天重拾轮滑，怎么说呢，做什么事，一丝动机就够了，其实出去走走看看，还能看到不一样的风景。一开始穿上鞋子到滑上路，感觉是很熟悉一样，就像学会骑自行车，一生就会一样，风在飞驰，滑轮在旋转，路上人的表情来不及看清就已经掠过，只一道道残影甩在身后。虽然摔了三次，膝盖破皮，但是倒地的一瞬间，整个人人字躺在地上特别有成就感。特别适合一首歌，新的心跳。<br><a id="more"></a><br>歌词如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(真人秀《极速前进 第二季》主题曲) </span><br><span class="line">词：G.E.M. 邓紫棋 </span><br><span class="line">曲：G.E.M. 邓紫棋 </span><br><span class="line">也许 你看过太多悲剧 </span><br><span class="line">也受过太多委屈 </span><br><span class="line">你怕不愿回首的过去 </span><br><span class="line">会一直延续 </span><br><span class="line">但生命 够曲折才够真实 </span><br><span class="line">人痛过才够坚持 </span><br><span class="line">而故事 还没有走到结局 </span><br><span class="line">就让我们 忘了过去有多悲伤 </span><br><span class="line">打开受伤的翅膀 </span><br><span class="line">来为自己戴上 掉下的皇冠 </span><br><span class="line">无论世界有多疯狂 </span><br><span class="line">我们是浴火的凤凰 </span><br><span class="line">经过了燃烧 有新的心跳 </span><br><span class="line">新的心跳 新的心跳 新的心跳 </span><br><span class="line">爱是 受伤过才够轰烈 </span><br><span class="line">牺牲过才够真切 </span><br><span class="line">而且 时间还未停歇 </span><br><span class="line">就让我们 忘了过去有多悲伤 </span><br><span class="line">打开受伤的翅膀 </span><br><span class="line">来为自己戴上 掉下的皇冠 </span><br><span class="line">无论世界有多疯狂 </span><br><span class="line">我们是浴火的凤凰 </span><br><span class="line">经过了燃烧 有新的心跳 </span><br><span class="line">有新的心跳 </span><br><span class="line">有新的心跳 </span><br><span class="line">有新的心跳 </span><br><span class="line">就用微笑哀悼 死去是复活的先兆 </span><br><span class="line">听未来的呼召 埋葬忧伤痛苦的煎熬 </span><br><span class="line">旧事再不重要 一切已经来到 </span><br><span class="line">永远的句号 </span><br><span class="line">我们死而复活 </span><br><span class="line">我们失而复得 </span><br><span class="line">旧事已过 都变成新的 </span><br><span class="line">新的心跳 新的心跳 新的心跳 </span><br><span class="line">新的心跳 新的心跳 新的心跳 </span><br><span class="line">新的心跳 新的心跳 新的心跳</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天重拾轮滑，怎么说呢，做什么事，一丝动机就够了，其实出去走走看看，还能看到不一样的风景。一开始穿上鞋子到滑上路，感觉是很熟悉一样，就像学会骑自行车，一生就会一样，风在飞驰，滑轮在旋转，路上人的表情来不及看清就已经掠过，只一道道残影甩在身后。虽然摔了三次，膝盖破皮，但是倒地的一瞬间，整个人人字躺在地上特别有成就感。特别适合一首歌，新的心跳。&lt;br&gt;
    
    </summary>
    
    
      <category term="轮滑" scheme="https://lirawx.me/tags/%E8%BD%AE%E6%BB%91/"/>
    
  </entry>
  
  <entry>
    <title>2015年生日记</title>
    <link href="https://lirawx.me/2015/2015-09-12-birthday2015.html"/>
    <id>https://lirawx.me/2015/2015-09-12-birthday2015.html</id>
    <published>2015-09-12T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>昨天是2015年22岁的生日，我觉得是过生日以来过的最好的一次了，以前生日并没有什么像样的活动之类，突然觉得好幸福。昨天碰巧是lol的战斗之夜活动，我11号去留了几台机子，早上2楼我们宿舍，<a id="more"></a>还有6楼的4个，8个人就去玩了一会，中午吃饭大家都开心的开玩笑，聊天，其乐融融自不必说。虽然被灌了两杯啤酒，有种想吐的感觉。不过还是挺开心的。重头戏当然是蛋糕了，我们一起吹的蜡烛，并没有什么特别的愿望，只希望我关心的，关心我的都能好好的。谢谢qq上发来生日祝福的，谢谢你们。我没法发蛋糕给你们，但是心意收到了。</p><h5 id="2015-09-13"><a href="#2015-09-13" class="headerlink" title="2015-09-13"></a>2015-09-13</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天是2015年22岁的生日，我觉得是过生日以来过的最好的一次了，以前生日并没有什么像样的活动之类，突然觉得好幸福。昨天碰巧是lol的战斗之夜活动，我11号去留了几台机子，早上2楼我们宿舍，
    
    </summary>
    
    
      <category term="想想" scheme="https://lirawx.me/tags/%E6%83%B3%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>苦涩的椰汁奶茶</title>
    <link href="https://lirawx.me/2015/2015-09-10-ye-nai-cha.html"/>
    <id>https://lirawx.me/2015/2015-09-10-ye-nai-cha.html</id>
    <published>2015-09-10T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>头一次觉得奶茶原来是这样的味道。</p><p>2015-09-10 00:43:21</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;头一次觉得奶茶原来是这样的味道。&lt;/p&gt;
&lt;p&gt;2015-09-10 00:43:21&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="奶茶" scheme="https://lirawx.me/tags/%E5%A5%B6%E8%8C%B6/"/>
    
  </entry>
  
  <entry>
    <title>镇江-西津渡</title>
    <link href="https://lirawx.me/2015/2015-09-10-xi-jin-du.html"/>
    <id>https://lirawx.me/2015/2015-09-10-xi-jin-du.html</id>
    <published>2015-09-10T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>暑假看到记录频道的西津渡感觉挺好的，就去走了走，虽然看的时间挺短，但是，它那种古色古香的建筑还是引人入胜的。长长的古街，碎碎的石板路，三三两两的有人，食香四溢，古老与现代融合在一起。<br><a id="more"></a><br>一路走下来，时间不多，但是看到的都是时间的聚合体—古建筑群。从正面一条长长的石阶进去，两边是客栈酒馆。小小的巷子飘出酒香（其实啥也没闻到，哈哈）。不一会就到了一个三岔路口。往上是上山的路，蜿蜒而上是一个歇脚的亭子，再往上就是上山，山不高，但是没有上去，上面是一个超岸寺,听说唐代大诗人李白、孟浩然，宋代王安石、陆游都来过呢。<br>往左是一条叫观音洞一条街，上面有一个很有名的韶关石塔，按照佛教的解释，塔就是佛，所以我们从塔下的券门经过就是礼佛，是对佛的顶礼膜拜。。石塔矗立在街上，游人从下面穿过，仿佛是穿越了一个世纪，如此之久。仿佛看到了古人，素衣而过，的情景。再往前是五十三坡，我们每上一级台阶，仿佛就是参拜了一位圣贤，走完了53级台阶，也就意味着完成了对53位高人的求教。像善财童子一样，陶冶了情操，净化了思想。别以为我信，但是我走完了，走完了（呵呵）。<br>往右是一条很多地方都有的小吃街，跟扬州的关东街差不多，但是要短上许多，街上很多小吃，面食，甜点，奶茶，还有几家台北小吃，很诱人的样子，但是没有买，其实是吃完早饭没有吃的欲望，不然早就开始搜刮了。里面有一家工艺品店，还不知是礼品店，里面有帽子，盆栽，还有韩国代购好像。我给我同学搞了个小小花农，养在罐头里的小花，我觉得挺好看的。<br>旁边好像还有些主题餐厅，还有乐队貌似，旁边是博物馆，不过没有进去，那一带都在整修，不知道什么时候能修好，这样就可以看了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;暑假看到记录频道的西津渡感觉挺好的，就去走了走，虽然看的时间挺短，但是，它那种古色古香的建筑还是引人入胜的。长长的古街，碎碎的石板路，三三两两的有人，食香四溢，古老与现代融合在一起。&lt;br&gt;
    
    </summary>
    
    
      <category term="镇江-西津渡" scheme="https://lirawx.me/tags/%E9%95%87%E6%B1%9F-%E8%A5%BF%E6%B4%A5%E6%B8%A1/"/>
    
  </entry>
  
  <entry>
    <title>雨夜（1）</title>
    <link href="https://lirawx.me/2015/2015-09-10-rainy-night.html"/>
    <id>https://lirawx.me/2015/2015-09-10-rainy-night.html</id>
    <published>2015-09-10T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>寂静雨夜，怎奈心寒，空有相思，与何人说？</p><p>2015-08-24 00:42:22</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;寂静雨夜，怎奈心寒，空有相思，与何人说？&lt;/p&gt;
&lt;p&gt;2015-08-24 00:42:22&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="雨夜" scheme="https://lirawx.me/tags/%E9%9B%A8%E5%A4%9C/"/>
    
  </entry>
  
  <entry>
    <title>草在结它的种子，风在摇它的叶子。。。</title>
    <link href="https://lirawx.me/2015/2015-09-09-cao-zai-jie-ta-de-zhong-zi.html"/>
    <id>https://lirawx.me/2015/2015-09-09-cao-zai-jie-ta-de-zhong-zi.html</id>
    <published>2015-09-09T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>顾城 –《门前》<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> 我多么希望，有一个门口 </span><br><span class="line">　　早晨，阳光照在草上 </span><br><span class="line">　　 </span><br><span class="line">　　我们站着 </span><br><span class="line">　　扶着自己的门扇 </span><br><span class="line">　　门很低，但太阳是明亮的 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　草在结它的种子 </span><br><span class="line">　　风在摇它的叶子 </span><br><span class="line">　　我们站着，不说话 </span><br><span class="line">　　就十分美好 </span><br><span class="line">　　 </span><br><span class="line">　　有门，不用开开 </span><br><span class="line">　　是我们的，就十分美好 </span><br><span class="line">　　 </span><br><span class="line">　　早晨，黑夜还要流浪 </span><br><span class="line">　　我们把六弦琴交给他 </span><br><span class="line">　　我们不走了 </span><br><span class="line">　　 </span><br><span class="line">　　我们需要土地 </span><br><span class="line">　　需要永不毁灭的土地 </span><br><span class="line">　　我们要乘着它 </span><br><span class="line">　　度过一生 </span><br><span class="line">　　 </span><br><span class="line">　　土地是粗糙的，有时狭隘 </span><br><span class="line">　　然而，它有历史 </span><br><span class="line">　　有一份天空，一份月亮 </span><br><span class="line">　　一份露水和早晨 </span><br><span class="line">　　 </span><br><span class="line">　　我们爱土地 </span><br><span class="line">　　我们站着 </span><br><span class="line">　　用木鞋挖着泥土 </span><br><span class="line">　　门也晒热了 </span><br><span class="line">　　我们轻轻靠着，十分美好 </span><br><span class="line">　　 </span><br><span class="line">　　墙后的草 </span><br><span class="line">　　不会再长大了 </span><br><span class="line">它只用指尖，触了触阳光</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;顾城 –《门前》&lt;br&gt;
    
    </summary>
    
    
      <category term="读书摘录" scheme="https://lirawx.me/tags/%E8%AF%BB%E4%B9%A6%E6%91%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>反思（1）</title>
    <link href="https://lirawx.me/2015/2015-09-08-think1.html"/>
    <id>https://lirawx.me/2015/2015-09-08-think1.html</id>
    <published>2015-09-08T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>突然觉得有必要找一个地方写写，想想，说说，无关他人，只是自己，不悲伤，不欢喜，只是静静的谈谈自己。以前说过总有一个时候一个人会回过头来看看身后，身后的脚印也好，石头磕绊也好，必须有一个时辰拿来检讨自己。或许他人不知道，但是自己，自己的良善会知道。<a id="more"></a><br>必须要承认自己的过错，比如很容易激动，听不下去别人的言语，尤其是自己不喜欢，不感兴趣，不符合自己的价值观，针对自己的等等。还比如自己现在的随意，满不在乎的样子，其实我也不知道自己以后会在意什么，但是，我觉得这个状态持续下去不太好。<br>听别人的故事，会流着自己的泪，那么这个泪是否有一部分是为自己而流的呢。很多时候告诉自己不后悔，其实经常会回想自己与她人的点点滴滴。医生中总有那么一个人，会给你不一样的体验，终生难忘。尽管不是时时刻刻，但是几乎每天空下来的时候总会无端想起，不知道这是否是后悔的一种表现呢，可是依然要表现出不在乎的样子。放下就会好过许多，真的是这样的放下么？真的就这样么？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然觉得有必要找一个地方写写，想想，说说，无关他人，只是自己，不悲伤，不欢喜，只是静静的谈谈自己。以前说过总有一个时候一个人会回过头来看看身后，身后的脚印也好，石头磕绊也好，必须有一个时辰拿来检讨自己。或许他人不知道，但是自己，自己的良善会知道。
    
    </summary>
    
    
      <category term="想想" scheme="https://lirawx.me/tags/%E6%83%B3%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>css+js实现加载动画</title>
    <link href="https://lirawx.me/2015/2015-08-29-js-animation.html"/>
    <id>https://lirawx.me/2015/2015-08-29-js-animation.html</id>
    <published>2015-08-29T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>想要酷炫的加载动画么，那就一起来看看吧。</p><p>首先你要找到css和js的代码</p><p>css是动画，js控制动画显示和隐藏</p><p>一下是我收集的一段css自改代码<br><a id="more"></a><br>html</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;loaders&quot; id=&quot;loading&quot;&gt;</span><br><span class="line">           &lt;div class=&quot;loader&quot;&gt;</span><br><span class="line">                   &lt;div class=&quot;loader-inner ball-clip-rotate-multiple&quot;&gt;</span><br><span class="line">                       &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                       &lt;div&gt;&lt;/div&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>css<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@keyframes rotate &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        -webkit-transform: rotate(0deg) scale(1);</span><br><span class="line">        transform: rotate(0deg) scale(1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        -webkit-transform: rotate(180deg) scale(0.6);</span><br><span class="line">        transform: rotate(180deg) scale(0.6)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        -webkit-transform: rotate(360deg) scale(1);</span><br><span class="line">        transform: rotate(360deg) scale(1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.ball-clip-rotate-multiple &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ball-clip-rotate-multiple&gt;div &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    border: 2px solid #8b8b8b;</span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    border-top-color: transparent;</span><br><span class="line">    border-radius: 100%;</span><br><span class="line">    height: 35px;</span><br><span class="line">    width: 35px;</span><br><span class="line">    -webkit-animation: rotate 1s 0s ease-in-out infinite;</span><br><span class="line">    animation: rotate 1s 0s ease-in-out infinite</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.ball-clip-rotate-multiple&gt;div:last-child &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    top: 10px;</span><br><span class="line">    left: 10px;</span><br><span class="line">    width: 15px;</span><br><span class="line">    height: 15px;</span><br><span class="line">    -webkit-animation-duration: .5s;</span><br><span class="line">    animation-duration: .5s;</span><br><span class="line">    border-color: #8b8b8b transparent;</span><br><span class="line">    -webkit-animation-direction: reverse;</span><br><span class="line">    animation-direction: reverse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>js代码,控制自动隐藏<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(window).load(function() &#123;</span><br><span class="line">        $(&quot;#loading&quot;).fadeOut(500);</span><br><span class="line">        &#125;)</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>特别提示以上代码需要加载jquery.js</p><p><a href="http://pan.baidu.com/s/1gdyGOMZ" target="_blank" rel="noopener">百度链接</a><br>密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kn1f</span><br></pre></td></tr></table></figure><p>以上修改自</p><p><a href="http://www.htmleaf.com/css3/css3donghua/201504151682.html" target="_blank" rel="noopener">http://www.htmleaf.com/css3/css3donghua/201504151682.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想要酷炫的加载动画么，那就一起来看看吧。&lt;/p&gt;
&lt;p&gt;首先你要找到css和js的代码&lt;/p&gt;
&lt;p&gt;css是动画，js控制动画显示和隐藏&lt;/p&gt;
&lt;p&gt;一下是我收集的一段css自改代码&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://lirawx.me/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>网站添加词霸每日一句</title>
    <link href="https://lirawx.me/2015/2015-08-29-jscb.html"/>
    <id>https://lirawx.me/2015/2015-08-29-jscb.html</id>
    <published>2015-08-29T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>最近给自己网站弄了个每日一句，记录一下经验。<br>主要是词霸开放了api，封装成js了。<br>网址是<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://open.iciba.com/index.php?c=api</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>根据网站提示生成js代码放入js里就可以了。</p><p>但是它默认放在网站顶部，</p><p>如果你不想放在网站顶部可以借鉴下我的css代码，我放在了底部。</p><p>.ciba_ds是词霸自动生成后写入网页的标记，</p><p>!important是强制使用你设定的css</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> .ciba_ds &#123;</span><br><span class="line">    left: 70px !important;</span><br><span class="line">    text-align: center!important;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 30px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    position: fixed !important;</span><br><span class="line">    _position: absolute !important;</span><br><span class="line">    bottom: 50px !important;</span><br><span class="line">    _bottom: 0px !important;</span><br><span class="line">    _margin-top: expression(this.style.pixelHeight+document.documentElement.scrollTop) !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近给自己网站弄了个每日一句，记录一下经验。&lt;br&gt;主要是词霸开放了api，封装成js了。&lt;br&gt;网址是&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://open.iciba.com/index.php?c=api&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="每日一句" scheme="https://lirawx.me/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>python之pyenv版本控制</title>
    <link href="https://lirawx.me/2015/2015-08-24-python-pyenv.html"/>
    <id>https://lirawx.me/2015/2015-08-24-python-pyenv.html</id>
    <published>2015-08-24T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>当需要多个python共存时，pyenv提供了解决知道</p><p>#####安装pyenv<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/yyuu/pyenv.git ~/.pyenv</span><br><span class="line">echo &apos;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &apos;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.bashrc</span><br><span class="line">exec $SHELL -l</span><br></pre></td></tr></table></figure><p>#####用pyenv安装python</p><p>查看可安装的版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure><p>#####安装指定版本(3.4.0为例)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv install 3.4.0 -v</span><br></pre></td></tr></table></figure><p>#####安装之后要对数据库进行更新</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv rehash</span><br></pre></td></tr></table></figure><p>#####设置全局python版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pyenv global 3.4.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当需要多个python共存时，pyenv提供了解决知道&lt;/p&gt;
&lt;p&gt;#####安装pyenv&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://lirawx.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>甲午观后感</title>
    <link href="https://lirawx.me/2015/2015-08-24-jia-wu.html"/>
    <id>https://lirawx.me/2015/2015-08-24-jia-wu.html</id>
    <published>2015-08-24T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都觉得日本是个挺神奇的过度，无关政治，只是单纯的觉得它的一些传统，还有文化方面，确实比中国要好，当然我觉得日语听起来很舒服至少，（不是那个雅灭蝶），语气，语气，语气！（重要的事说三遍）.<br><a id="more"></a><br>最近cctv9再放甲午纪录片，cctv9一直都是良心台，至少我看来是的，广告至少都很好看，也很有创业，唯一不满的是老会穿插抗日神剧。当然扯远了，只是想谈一谈我觉得《甲午》做的很有特色，开场音效就很让人警醒，一个国家不是说不能犯错，而是犯了错要改，小孩子都懂的道理。中国也不是一直没有错，我觉得至少很多错都没有改，一个国家强盛总要有人民的支持，总觉得中国想帝国主义，真的是一党专政，实际上却像一党专制。从来就对党中央没什么特别的好映像。当然不是反动，是态度和立场。当所有的知识分子，不是官二代，也不是富二代，那么一个国家能给予他们什么呢，中国人现在都太功利了，很多时候人民觉得不公，外人有仇视，国人只是很少说，想做都不能有那样的机会。我只是希望自己生活的国家能公平公正一点，起码国家重要信息公开，自己犯错也得承认，不然怎么承受的起德国总理的那一跪，看看人家这就是认错的孩纸一样。永远不能强加给自己很厉害，社会风气我觉得我不是底层，但是我觉得非常不好，学校教育问题很大！很大！很大！我都不知道大学上了跟没上区别在哪里。好了，言尽于此。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来都觉得日本是个挺神奇的过度，无关政治，只是单纯的觉得它的一些传统，还有文化方面，确实比中国要好，当然我觉得日语听起来很舒服至少，（不是那个雅灭蝶），语气，语气，语气！（重要的事说三遍）.&lt;br&gt;
    
    </summary>
    
    
      <category term="甲午" scheme="https://lirawx.me/tags/%E7%94%B2%E5%8D%88/"/>
    
  </entry>
  
  <entry>
    <title>情人节有感</title>
    <link href="https://lirawx.me/2015/2015-08-20-20150820.html"/>
    <id>https://lirawx.me/2015/2015-08-20-20150820.html</id>
    <published>2015-08-20T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>是催花残，偏执多情，几伤别离，怎又一年？</p></blockquote><p>#####2015-08-20 20:18:21</p><!-- create time: 2015-08-20 20:18:21  --><!-- This file is created from $MARBOO_HOME/.media/starts/default.md本文件由 $MARBOO_HOME/.media/starts/default.md 复制而来 -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;是催花残，偏执多情，几伤别离，怎又一年？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#####2015-08-20 20:18:21&lt;/p&gt;
&lt;!-- create time: 2015-08-20 20:18:21  --&gt;
&lt;!-- This 
      
    
    </summary>
    
    
      <category term="情人节" scheme="https://lirawx.me/tags/%E6%83%85%E4%BA%BA%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>linux终端中文显示</title>
    <link href="https://lirawx.me/2015/2015-08-19-linux-zh.html"/>
    <id>https://lirawx.me/2015/2015-08-19-linux-zh.html</id>
    <published>2015-08-19T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>相信玩linux的都有一颗geek的心，什么都想在tty下解决，比如听歌，看网页，甚至还想看视频来着。拿听歌来说，有<a href="https://github.com/darknessomi/musicbox" target="_blank" rel="noopener">网易云音乐</a>的命令行，<a href="https://github.com/taizilongxu/douban.fm" target="_blank" rel="noopener">douban.fm</a><br>，你幸幸苦苦装好了，但是你打开就傻眼了，全是框框框（重要的事情说三遍），然后你百度了，你google了，然后他们告诉处女座的你，图形界面啥不行，然后你伤心了，失望了，绝望了。。。。（扯远了），开始正文：<br><a id="more"></a></p><p>###首先安装fbterm<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo  apt-get install fbterm</span><br></pre></td></tr></table></figure></p><p>###然后把你的用户加入video用户组<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a xi video</span><br></pre></td></tr></table></figure></p><p>原因是这普通用户(xi)不能启动fbterm，现在基本上就可以显示了，还可以输入中文，但我觉得太鸡肋。</p><!-- create time: 2015-08-19 11:44:49  --><!-- This file is created from $MARBOO_HOME/.media/starts/default.md本文件由 $MARBOO_HOME/.media/starts/default.md 复制而来 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信玩linux的都有一颗geek的心，什么都想在tty下解决，比如听歌，看网页，甚至还想看视频来着。拿听歌来说，有&lt;a href=&quot;https://github.com/darknessomi/musicbox&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网易云音乐&lt;/a&gt;的命令行，&lt;a href=&quot;https://github.com/taizilongxu/douban.fm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;douban.fm&lt;/a&gt;&lt;br&gt;，你幸幸苦苦装好了，但是你打开就傻眼了，全是框框框（重要的事情说三遍），然后你百度了，你google了，然后他们告诉处女座的你，图形界面啥不行，然后你伤心了，失望了，绝望了。。。。（扯远了），开始正文：&lt;br&gt;
    
    </summary>
    
    
      <category term="tty" scheme="https://lirawx.me/tags/tty/"/>
    
  </entry>
  
  <entry>
    <title>dns记录（自用）</title>
    <link href="https://lirawx.me/2015/2015-08-19-dns.html"/>
    <id>https://lirawx.me/2015/2015-08-19-dns.html</id>
    <published>2015-08-19T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>相信很多人都遇到过这种，你点一个网页，别人秒开，你却还在加载，你点了淘宝，竟然跳到京东有木有，你还得忍受各种运营商疯狂的投放的广告。所以我决定起义了，革命了：</p><p>推荐两个dns<a id="more"></a></p><h3 id="one-dns"><a href="#one-dns" class="headerlink" title="one dns"></a>one dns</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">112.124.47.27</span><br><span class="line">114.215.126.16</span><br></pre></td></tr></table></figure><h3 id="v2ex-dns"><a href="#v2ex-dns" class="headerlink" title="v2ex dns"></a>v2ex dns</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">178.79.131.110</span><br><span class="line">199.91.73.222</span><br></pre></td></tr></table></figure><!-- create time: 2015-08-19 11:52:13  --><!-- This file is created from $MARBOO_HOME/.media/starts/default.md本文件由 $MARBOO_HOME/.media/starts/default.md 复制而来 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多人都遇到过这种，你点一个网页，别人秒开，你却还在加载，你点了淘宝，竟然跳到京东有木有，你还得忍受各种运营商疯狂的投放的广告。所以我决定起义了，革命了：&lt;/p&gt;
&lt;p&gt;推荐两个dns
    
    </summary>
    
      <category term="web" scheme="https://lirawx.me/categories/web/"/>
    
    
      <category term="dns" scheme="https://lirawx.me/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>mac下ssd trim 开启</title>
    <link href="https://lirawx.me/2015/2015-08-15-mac-ssd-trim.html"/>
    <id>https://lirawx.me/2015/2015-08-15-mac-ssd-trim.html</id>
    <published>2015-08-15T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>很多人自己加ssd给苹果鸡，然后没有开trim，又或者穷屌pc上ssd装了mac开启trim，不知道该怎么办了。大家都知道trim开了对ssd好处，所以就不废话了直接上命令…</p><p>#####打开终端一次输入以下三句命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage  /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage.original</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo perl -p0777i -e &apos;s@((?:Rotational|WakeKey\x0a)\x00&#123;1,20&#125;)APPLE SSD(\x00&#123;1,20&#125;[QMT])@$1\x00\x00\x00\x00\x00\x00\x00\x00\x00$2@&apos; /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo touch /System/Library/Extensions/</span><br></pre></td></tr></table></figure><p>以上适用于10.9</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人自己加ssd给苹果鸡，然后没有开trim，又或者穷屌pc上ssd装了mac开启trim，不知道该怎么办了。大家都知道trim开了对ssd好处，所以就不废话了直接上命令…&lt;/p&gt;
&lt;p&gt;#####打开终端一次输入以下三句命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo cp /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage  /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage.original&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="mac" scheme="https://lirawx.me/categories/mac/"/>
    
    
      <category term="efi" scheme="https://lirawx.me/tags/efi/"/>
    
  </entry>
  
  <entry>
    <title>linux 无线网络启用</title>
    <link href="https://lirawx.me/2015/2015-03-07-linux-wifion.html"/>
    <id>https://lirawx.me/2015/2015-03-07-linux-wifion.html</id>
    <published>2015-03-07T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>####方法一<br>sudo rmmod acer-wmi</p><p>#####这样就可以打开无线了！无线信号也会出来 ，但是有一个问题就是，只要机器一重启，那个文件又被修改回来了！</p><p>####方法二（完美）<br>blacklist acer-wmi<br>这个命令加入到/etc/modprobe.d/blacklist.conf文件最后即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;####方法一&lt;br&gt;sudo rmmod acer-wmi&lt;/p&gt;
&lt;p&gt;#####这样就可以打开无线了！无线信号也会出来 ，但是有一个问题就是，只要机器一重启，那个文件又被修改回来了！&lt;/p&gt;
&lt;p&gt;####方法二（完美）&lt;br&gt;blacklist acer-wmi&lt;b
      
    
    </summary>
    
    
      <category term="wifi" scheme="https://lirawx.me/tags/wifi/"/>
    
  </entry>
  
  <entry>
    <title>linux ssh 设置</title>
    <link href="https://lirawx.me/2015/2015-03-07-linux-ssh.html"/>
    <id>https://lirawx.me/2015/2015-03-07-linux-ssh.html</id>
    <published>2015-03-07T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用putty的ssh代理功能"><a href="#使用putty的ssh代理功能" class="headerlink" title="使用putty的ssh代理功能"></a>使用putty的ssh代理功能</h4><p>ubuntu下执行<br>sudo apt-get install putty<br>很简单就可以安装完成了，<br>安装完成后只需要执行<br>plink -C -D 127.0.0.1:7070 -N -pw 密码 用户名@xxx.xxx.xxx -P 1234</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用putty的ssh代理功能&quot;&gt;&lt;a href=&quot;#使用putty的ssh代理功能&quot; class=&quot;headerlink&quot; title=&quot;使用putty的ssh代理功能&quot;&gt;&lt;/a&gt;使用putty的ssh代理功能&lt;/h4&gt;&lt;p&gt;ubuntu下执行&lt;br&gt;sudo 
      
    
    </summary>
    
    
      <category term="ssh" scheme="https://lirawx.me/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>mac下efi分区挂载</title>
    <link href="https://lirawx.me/2014/2014-03-07-mac-efi.html"/>
    <id>https://lirawx.me/2014/2014-03-07-mac-efi.html</id>
    <published>2014-03-07T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>###第一步<br>打开<code>终端</code>输入:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure><p>效果如上图所示<br><a id="more"></a></p><p>##第二步<br>打开<code>终端</code>输入:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir /Volumes/efi</span><br></pre></td></tr></table></figure><p>##第三步<br>打开<code>终端</code>输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mount -t msdos /dev/disk0s1 /Volumes/efi</span><br></pre></td></tr></table></figure><p><img src="http://7xl4ai.com1.z0.glb.clouddn.com/efi-mac.png" alt=""><br>其中/dev/disk0s1 为上图中的efi分区</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###第一步&lt;br&gt;打开&lt;code&gt;终端&lt;/code&gt;输入:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;diskutil list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如上图所示&lt;br&gt;
    
    </summary>
    
    
      <category term="efi" scheme="https://lirawx.me/tags/efi/"/>
    
  </entry>
  
  <entry>
    <title>git 安装与使用</title>
    <link href="https://lirawx.me/2014/2014-03-07-git-install.html"/>
    <id>https://lirawx.me/2014/2014-03-07-git-install.html</id>
    <published>2014-03-07T00:00:00.000Z</published>
    <updated>2018-03-18T13:14:48.522Z</updated>
    
    <content type="html"><![CDATA[<p>###一、git基本环境配置</p><p>1.首先去<a href="http://www.github.com上注册帐号" target="_blank" rel="noopener">www.github.com上注册帐号</a></p><p>2.本机安装git.   sudo apt-get install git</p><p>3.给本机注册SSH，请移步<a href="https://help.github.com/articles/generating-ssh-keys" target="_blank" rel="noopener">https://help.github.com/articles/generating-ssh-keys</a>，注册SSH后就默认可以在本机上传代码之类，不用在输入用户名密码…</p><p>4.配置Git的配置文件，username和email<br>   git config –global user.name “your name”   //配置用户名<br>   git config –global user.email “your email”    //配置email<br>配置这个每次commit都会通过email去关联github账户<br><a id="more"></a></p><p>###二、git基本命令</p><p>1.git clone 命令将远程的Git版本库在本地克隆一份，然后就可以用git对该目录下的文件进行版本控制。并且此时会默认生成一个文件夹，文件夹名字是远程仓库名字，cd进去之后，git remote -v发现存在远程仓库，其地址是clone的地址，名字是orgin。<br>比如  (git clone git://github.com/1292765944/ACM.git)    或者    (git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:1292765944/ACM.git)但不要用https协议</p><p>2.git init  你可以在本地创建了一个工作目录，然后进入这个目录，使用’git init’命令进行初始化，那么git以后就会对该目录下的文件进行版本控制。</p><p>这个命令应用比较简单，先cd到目标文件夹，然后git init即可。</p><p>3.git remote 通过这个命令我们可以建立和远程仓库的联系。</p><p>比如  git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:1292765944/ACM.git   我们就把<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:1292765944/ACM.git这个远程仓库取了origin别名，以后我们再访问的时候可以直接使用别名。</p><p>git remote -v 查看远程仓库</p><p>git remote rm [name] 删除远程仓库</p><p>git pull [remoteName] [localBranchName]拉取远程仓库。比如git pull origin master</p><p>git push [remoteName] [localBranchName]更新远程仓库，注意在更新之前要先pul。比如git push origin master</p><p>4.git add 该命令当前更改或者新增的文件加入到本地仓库中 git add 后面可以加文件名/目录，还有一中写法git add .会自动判断添加哪些文件然后把这个添加提交到本地的仓库</p><p>5.git rm 该命令删除本地仓库中的一些文件。git rm 后面可以直接接文件名，但要删除目录时，要加-r</p><p>6.git commit 提交你之前做的rm和add操作并必须要提交附加信息。比如 git commit -m “acm_template”</p><p>###三、使用git从本地上传github举例</p><p>第一步： 进入要所要上传文件的目录输入命令 “git init”<br>第二步： 创建一个远程仓库origin，使用命令 “git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:1292765944/ACM.git”，其中1292765944是你的GitHub的用户名，ACM是你要上传到GitHub的仓库<br>第三步：比如你要添加一个文件xxx到本地仓库，使用命令 “git add xxx”，可以使用“git add .”自动判断添加哪些文件，然后把这个添加提交到本地的仓库，使用命令 ”git commit -m ”说明这次的提交“，最后把本地仓库origin提交到远程的GitHub仓库，使用命令 ”git push origin master“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###一、git基本环境配置&lt;/p&gt;
&lt;p&gt;1.首先去&lt;a href=&quot;http://www.github.com上注册帐号&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.github.com上注册帐号&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.本机安装git.   sudo apt-get install git&lt;/p&gt;
&lt;p&gt;3.给本机注册SSH，请移步&lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://help.github.com/articles/generating-ssh-keys&lt;/a&gt;，注册SSH后就默认可以在本机上传代码之类，不用在输入用户名密码…&lt;/p&gt;
&lt;p&gt;4.配置Git的配置文件，username和email&lt;br&gt;   git config –global user.name “your name”   //配置用户名&lt;br&gt;   git config –global user.email “your email”    //配置email&lt;br&gt;配置这个每次commit都会通过email去关联github账户&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://lirawx.me/tags/git/"/>
    
  </entry>
  
</feed>
